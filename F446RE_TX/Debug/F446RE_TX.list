
F446RE_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800466c  0800466c  0000566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004800  08004800  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004808  08004808  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800480c  0800480c  0000580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004810  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08004878  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004878  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c205  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001feb  00000000  00000000  0001229d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00014288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000766  00000000  00000000  00014c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002515f  00000000  00000000  000153ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0b7  00000000  00000000  0003a50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce716  00000000  00000000  000475c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  00115d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004654 	.word	0x08004654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004654 	.word	0x08004654

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b3f      	ldr	r3, [pc, #252]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a3e      	ldr	r2, [pc, #248]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b3c      	ldr	r3, [pc, #240]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b38      	ldr	r3, [pc, #224]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a37      	ldr	r2, [pc, #220]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b35      	ldr	r3, [pc, #212]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b31      	ldr	r3, [pc, #196]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a30      	ldr	r2, [pc, #192]	@ (80006b8 <MX_GPIO_Init+0x118>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b2e      	ldr	r3, [pc, #184]	@ (80006b8 <MX_GPIO_Init+0x118>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000610:	482a      	ldr	r0, [pc, #168]	@ (80006bc <MX_GPIO_Init+0x11c>)
 8000612:	f001 f921 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	4829      	ldr	r0, [pc, #164]	@ (80006c0 <MX_GPIO_Init+0x120>)
 800061c:	f001 f91c 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000626:	4827      	ldr	r0, [pc, #156]	@ (80006c4 <MX_GPIO_Init+0x124>)
 8000628:	f001 f916 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 800062c:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8000630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	481d      	ldr	r0, [pc, #116]	@ (80006bc <MX_GPIO_Init+0x11c>)
 8000646:	f000 ff73 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800064a:	2380      	movs	r3, #128	@ 0x80
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_GPIO_Init+0x120>)
 8000662:	f000 ff65 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_GPIO_Init+0x124>)
 8000680:	f000 ff56 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <MX_GPIO_Init+0x124>)
 800069c:	f000 ff48 	bl	8001530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2017      	movs	r0, #23
 80006a6:	f000 ff0c 	bl	80014c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006aa:	2017      	movs	r0, #23
 80006ac:	f000 ff25 	bl	80014fa <HAL_NVIC_EnableIRQ>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020000 	.word	0x40020000

080006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void write_register(SPI_HandleTypeDef *spi_handle, uint8_t *write_data, uint8_t write_bytes);
void read_register(SPI_HandleTypeDef *spi_handle, uint8_t *read_data, uint8_t read_bytes);

void write_register(SPI_HandleTypeDef *spi_handle, uint8_t reg, uint8_t *write_data, uint8_t write_bytes) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	461a      	mov	r2, r3
 80006d4:	460b      	mov	r3, r1
 80006d6:	72fb      	strb	r3, [r7, #11]
 80006d8:	4613      	mov	r3, r2
 80006da:	72bb      	strb	r3, [r7, #10]
	uint8_t write_reg = write | reg;
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	f043 0320 	orr.w	r3, r3, #32
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	480d      	ldr	r0, [pc, #52]	@ (8000720 <_Z14write_registerP19__SPI_HandleTypeDefhPhh+0x58>)
 80006ec:	f001 f8b4 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_handle, &write_reg, 1, 100);
 80006f0:	f107 0117 	add.w	r1, r7, #23
 80006f4:	2364      	movs	r3, #100	@ 0x64
 80006f6:	2201      	movs	r2, #1
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f001 feca 	bl	8002492 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_handle, write_data, write_bytes, 100);
 80006fe:	7abb      	ldrb	r3, [r7, #10]
 8000700:	b29a      	uxth	r2, r3
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f001 fec3 	bl	8002492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2140      	movs	r1, #64	@ 0x40
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <_Z14write_registerP19__SPI_HandleTypeDefhPhh+0x58>)
 8000712:	f001 f8a1 	bl	8001858 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020400 	.word	0x40020400

08000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>:

void read_register(SPI_HandleTypeDef *spi_handle, uint8_t reg, uint8_t *read_data, uint8_t read_bytes) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	461a      	mov	r2, r3
 8000730:	460b      	mov	r3, r1
 8000732:	72fb      	strb	r3, [r7, #11]
 8000734:	4613      	mov	r3, r2
 8000736:	72bb      	strb	r3, [r7, #10]
	uint8_t read_reg = read | reg;
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2140      	movs	r1, #64	@ 0x40
 8000740:	480c      	ldr	r0, [pc, #48]	@ (8000774 <_Z13read_registerP19__SPI_HandleTypeDefhPhh+0x50>)
 8000742:	f001 f889 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_handle, &read_reg, 1, 100);
 8000746:	f107 0117 	add.w	r1, r7, #23
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f001 fe9f 	bl	8002492 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handle, read_data, read_bytes, 100);
 8000754:	7abb      	ldrb	r3, [r7, #10]
 8000756:	b29a      	uxth	r2, r3
 8000758:	2364      	movs	r3, #100	@ 0x64
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f001 ffdc 	bl	800271a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2140      	movs	r1, #64	@ 0x40
 8000766:	4803      	ldr	r0, [pc, #12]	@ (8000774 <_Z13read_registerP19__SPI_HandleTypeDefhPhh+0x50>)
 8000768:	f001 f876 	bl	8001858 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40020400 	.word	0x40020400

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	@ 0x30
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fd2f 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 fa13 	bl	8000bac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f7ff ff0b 	bl	80005a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800078a:	f000 fae7 	bl	8000d5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800078e:	f000 fc8b 	bl	80010a8 <MX_USART2_UART_Init>

	//when due to voltage being above 1.9V, we are currently in power down mode.

	//PB6 is the CS PIN. PC7 is CE pin, and PA9 is for the external interrupt.

    HAL_Delay(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f000 fd96 	bl	80012c4 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	48c4      	ldr	r0, [pc, #784]	@ (8000ab0 <main+0x338>)
 800079e:	f001 f85b 	bl	8001858 <HAL_GPIO_WritePin>



	//reset all registers
    uint8_t command = WRITE_CONFIG_REG;
 80007a2:	2320      	movs	r3, #32
 80007a4:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t reset_value = 0x08;
 80007a8:	2308      	movs	r3, #8
 80007aa:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, config_reg, &reset_value, 1);
 80007ac:	f107 021f 	add.w	r2, r7, #31
 80007b0:	2301      	movs	r3, #1
 80007b2:	2100      	movs	r1, #0
 80007b4:	48bf      	ldr	r0, [pc, #764]	@ (8000ab4 <main+0x33c>)
 80007b6:	f7ff ff87 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x3F;
 80007ba:	233f      	movs	r3, #63	@ 0x3f
 80007bc:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, en_aa_reg, &reset_value, 1);
 80007be:	f107 021f 	add.w	r2, r7, #31
 80007c2:	2301      	movs	r3, #1
 80007c4:	2101      	movs	r1, #1
 80007c6:	48bb      	ldr	r0, [pc, #748]	@ (8000ab4 <main+0x33c>)
 80007c8:	f7ff ff7e 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x03;
 80007cc:	2303      	movs	r3, #3
 80007ce:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, en_rxaddr, &reset_value, 1);
 80007d0:	f107 021f 	add.w	r2, r7, #31
 80007d4:	2301      	movs	r3, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	48b6      	ldr	r0, [pc, #728]	@ (8000ab4 <main+0x33c>)
 80007da:	f7ff ff75 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x03;
 80007de:	2303      	movs	r3, #3
 80007e0:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, aw_reg, &reset_value, 1);
 80007e2:	f107 021f 	add.w	r2, r7, #31
 80007e6:	2301      	movs	r3, #1
 80007e8:	2103      	movs	r1, #3
 80007ea:	48b2      	ldr	r0, [pc, #712]	@ (8000ab4 <main+0x33c>)
 80007ec:	f7ff ff6c 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x03;
 80007f0:	2303      	movs	r3, #3
 80007f2:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, setup_retr_reg, &reset_value, 1);
 80007f4:	f107 021f 	add.w	r2, r7, #31
 80007f8:	2301      	movs	r3, #1
 80007fa:	2104      	movs	r1, #4
 80007fc:	48ad      	ldr	r0, [pc, #692]	@ (8000ab4 <main+0x33c>)
 80007fe:	f7ff ff63 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x02;
 8000802:	2302      	movs	r3, #2
 8000804:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, rf_ch_reg, &reset_value, 1);
 8000806:	f107 021f 	add.w	r2, r7, #31
 800080a:	2301      	movs	r3, #1
 800080c:	2105      	movs	r1, #5
 800080e:	48a9      	ldr	r0, [pc, #676]	@ (8000ab4 <main+0x33c>)
 8000810:	f7ff ff5a 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x07;
 8000814:	2307      	movs	r3, #7
 8000816:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, rf_setup_reg, &reset_value, 1);
 8000818:	f107 021f 	add.w	r2, r7, #31
 800081c:	2301      	movs	r3, #1
 800081e:	2106      	movs	r1, #6
 8000820:	48a4      	ldr	r0, [pc, #656]	@ (8000ab4 <main+0x33c>)
 8000822:	f7ff ff51 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x7E;
 8000826:	237e      	movs	r3, #126	@ 0x7e
 8000828:	77fb      	strb	r3, [r7, #31]
	write_register(&hspi1, status_reg, &reset_value, 1);
 800082a:	f107 021f 	add.w	r2, r7, #31
 800082e:	2301      	movs	r3, #1
 8000830:	2107      	movs	r1, #7
 8000832:	48a0      	ldr	r0, [pc, #640]	@ (8000ab4 <main+0x33c>)
 8000834:	f7ff ff48 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>




	//CONFIG settings
  	uint8_t config_reg_bits = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	77bb      	strb	r3, [r7, #30]
  	read_register(&hspi1, config_reg, &config_reg_bits, 1);
 800083c:	f107 021e 	add.w	r2, r7, #30
 8000840:	2301      	movs	r3, #1
 8000842:	2100      	movs	r1, #0
 8000844:	489b      	ldr	r0, [pc, #620]	@ (8000ab4 <main+0x33c>)
 8000846:	f7ff ff6d 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

  	printf("Reading config reg %d...\n", config_reg_bits);
 800084a:	7fbb      	ldrb	r3, [r7, #30]
 800084c:	4619      	mov	r1, r3
 800084e:	489a      	ldr	r0, [pc, #616]	@ (8000ab8 <main+0x340>)
 8000850:	f003 f836 	bl	80038c0 <iprintf>

//	config_reg_bits |= 0x70; //clear interrupt flags
//	write_register(&hspi1, config_reg, &config_reg_bits, 1);

	//Set the PWR_UP bit in the config register.
	config_reg_bits |= PWR_UP_BIT;	//ENTER standby mode.
 8000854:	7fbb      	ldrb	r3, [r7, #30]
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, config_reg, &config_reg_bits, 1);
 800085e:	f107 021e 	add.w	r2, r7, #30
 8000862:	2301      	movs	r3, #1
 8000864:	2100      	movs	r1, #0
 8000866:	4893      	ldr	r0, [pc, #588]	@ (8000ab4 <main+0x33c>)
 8000868:	f7ff ff2e 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
	HAL_Delay(5);
 800086c:	2005      	movs	r0, #5
 800086e:	f000 fd29 	bl	80012c4 <HAL_Delay>

	//GO into TX mode.
	read_register(&hspi1, config_reg, &config_reg_bits, 1);
 8000872:	f107 021e 	add.w	r2, r7, #30
 8000876:	2301      	movs	r3, #1
 8000878:	2100      	movs	r1, #0
 800087a:	488e      	ldr	r0, [pc, #568]	@ (8000ab4 <main+0x33c>)
 800087c:	f7ff ff52 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	config_reg_bits &= ~PRIM_RX; //SET PRIM_RX to 0;
 8000880:	7fbb      	ldrb	r3, [r7, #30]
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, config_reg, &config_reg_bits, 1);
 800088a:	f107 021e 	add.w	r2, r7, #30
 800088e:	2301      	movs	r3, #1
 8000890:	2100      	movs	r1, #0
 8000892:	4888      	ldr	r0, [pc, #544]	@ (8000ab4 <main+0x33c>)
 8000894:	f7ff ff18 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
	HAL_Delay(5);
 8000898:	2005      	movs	r0, #5
 800089a:	f000 fd13 	bl	80012c4 <HAL_Delay>

	read_register(&hspi1, config_reg, &config_reg_bits, 1);
 800089e:	f107 021e 	add.w	r2, r7, #30
 80008a2:	2301      	movs	r3, #1
 80008a4:	2100      	movs	r1, #0
 80008a6:	4883      	ldr	r0, [pc, #524]	@ (8000ab4 <main+0x33c>)
 80008a8:	f7ff ff3c 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	printf("Reading config reg after setting pwr, mode and more %d...\n", config_reg_bits);
 80008ac:	7fbb      	ldrb	r3, [r7, #30]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4882      	ldr	r0, [pc, #520]	@ (8000abc <main+0x344>)
 80008b2:	f003 f805 	bl	80038c0 <iprintf>



	//RF CH settings
	uint8_t rf_channel_bits = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	777b      	strb	r3, [r7, #29]
	command = READ_RF_CH_REG;
 80008ba:	2305      	movs	r3, #5
 80008bc:	f887 3020 	strb.w	r3, [r7, #32]
	read_register(&hspi1, rf_ch_reg, &rf_channel_bits, 1);
 80008c0:	f107 021d 	add.w	r2, r7, #29
 80008c4:	2301      	movs	r3, #1
 80008c6:	2105      	movs	r1, #5
 80008c8:	487a      	ldr	r0, [pc, #488]	@ (8000ab4 <main+0x33c>)
 80008ca:	f7ff ff2b 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	//setting the rf_ch bits
	rf_channel_bits |= 0x64;
 80008ce:	7f7b      	ldrb	r3, [r7, #29]
 80008d0:	f043 0364 	orr.w	r3, r3, #100	@ 0x64
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	777b      	strb	r3, [r7, #29]
	write_register(&hspi1, rf_ch_reg, &rf_channel_bits, 1);
 80008d8:	f107 021d 	add.w	r2, r7, #29
 80008dc:	2301      	movs	r3, #1
 80008de:	2105      	movs	r1, #5
 80008e0:	4874      	ldr	r0, [pc, #464]	@ (8000ab4 <main+0x33c>)
 80008e2:	f7ff fef1 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>


	//AIR DATA RATE
	uint8_t rf_setup_reg_bits = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	773b      	strb	r3, [r7, #28]
	read_register(&hspi1, rf_setup_reg, &rf_setup_reg_bits, 1);
 80008ea:	f107 021c 	add.w	r2, r7, #28
 80008ee:	2301      	movs	r3, #1
 80008f0:	2106      	movs	r1, #6
 80008f2:	4870      	ldr	r0, [pc, #448]	@ (8000ab4 <main+0x33c>)
 80008f4:	f7ff ff16 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	//air data rate.
	rf_setup_reg_bits |= 0x06;
 80008f8:	7f3b      	ldrb	r3, [r7, #28]
 80008fa:	f043 0306 	orr.w	r3, r3, #6
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	773b      	strb	r3, [r7, #28]
	write_register(&hspi1, rf_setup_reg, &rf_setup_reg_bits, 1);
 8000902:	f107 021c 	add.w	r2, r7, #28
 8000906:	2301      	movs	r3, #1
 8000908:	2106      	movs	r1, #6
 800090a:	486a      	ldr	r0, [pc, #424]	@ (8000ab4 <main+0x33c>)
 800090c:	f7ff fedc 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	//setting up crc
	config_reg_bits |= CRCO | EN_CRC;
 8000910:	7fbb      	ldrb	r3, [r7, #30]
 8000912:	f043 030c 	orr.w	r3, r3, #12
 8000916:	b2db      	uxtb	r3, r3
 8000918:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, config_reg, &config_reg_bits, 1);
 800091a:	f107 021e 	add.w	r2, r7, #30
 800091e:	2301      	movs	r3, #1
 8000920:	2100      	movs	r1, #0
 8000922:	4864      	ldr	r0, [pc, #400]	@ (8000ab4 <main+0x33c>)
 8000924:	f7ff fed0 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	//Set the AW register
	uint8_t three_bytes = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t four_bytes = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t five_bytes = 3;
 8000934:	2303      	movs	r3, #3
 8000936:	76fb      	strb	r3, [r7, #27]
	write_register(&hspi1, aw_reg, &five_bytes, 1);
 8000938:	f107 021b 	add.w	r2, r7, #27
 800093c:	2301      	movs	r3, #1
 800093e:	2103      	movs	r1, #3
 8000940:	485c      	ldr	r0, [pc, #368]	@ (8000ab4 <main+0x33c>)
 8000942:	f7ff fec1 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	//SET THE TX address
	uint8_t tx_addr[5] = {0x77, 0x35, 0xF0, 0xD3, 0xE7};
 8000946:	4a5e      	ldr	r2, [pc, #376]	@ (8000ac0 <main+0x348>)
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	6018      	str	r0, [r3, #0]
 8000952:	3304      	adds	r3, #4
 8000954:	7019      	strb	r1, [r3, #0]
	write_register(&hspi1, tx_addr_reg, tx_addr, 5);
 8000956:	f107 0214 	add.w	r2, r7, #20
 800095a:	2305      	movs	r3, #5
 800095c:	2110      	movs	r1, #16
 800095e:	4855      	ldr	r0, [pc, #340]	@ (8000ab4 <main+0x33c>)
 8000960:	f7ff feb2 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	//SET RX address
	write_register(&hspi1, rx_addr_p0_reg, tx_addr, 5);
 8000964:	f107 0214 	add.w	r2, r7, #20
 8000968:	2305      	movs	r3, #5
 800096a:	210a      	movs	r1, #10
 800096c:	4851      	ldr	r0, [pc, #324]	@ (8000ab4 <main+0x33c>)
 800096e:	f7ff feab 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>


	uint8_t set_retr_reg_bits = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	74fb      	strb	r3, [r7, #19]
	read_register(&hspi1, setup_retr_reg, &set_retr_reg_bits, 1);
 8000976:	f107 0213 	add.w	r2, r7, #19
 800097a:	2301      	movs	r3, #1
 800097c:	2104      	movs	r1, #4
 800097e:	484d      	ldr	r0, [pc, #308]	@ (8000ab4 <main+0x33c>)
 8000980:	f7ff fed0 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

//	//set up the number of retransmits and the auto retransmit delay
	uint8_t arc_bits = 0x03;
 8000984:	2303      	movs	r3, #3
 8000986:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t ard_bits = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	set_retr_reg_bits |= (ard_bits << 4) | arc_bits;
 8000990:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	b25a      	sxtb	r2, r3
 8000998:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800099c:	4313      	orrs	r3, r2
 800099e:	b25a      	sxtb	r2, r3
 80009a0:	7cfb      	ldrb	r3, [r7, #19]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	74fb      	strb	r3, [r7, #19]
	command = WRITE_SETUP_RETR_REG;
 80009ac:	2324      	movs	r3, #36	@ 0x24
 80009ae:	f887 3020 	strb.w	r3, [r7, #32]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	@ 0x40
 80009b6:	4843      	ldr	r0, [pc, #268]	@ (8000ac4 <main+0x34c>)
 80009b8:	f000 ff4e 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 80009bc:	f107 0120 	add.w	r1, r7, #32
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	2201      	movs	r2, #1
 80009c4:	483b      	ldr	r0, [pc, #236]	@ (8000ab4 <main+0x33c>)
 80009c6:	f001 fd64 	bl	8002492 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &set_retr_reg_bits, 1, 100);
 80009ca:	f107 0113 	add.w	r1, r7, #19
 80009ce:	2364      	movs	r3, #100	@ 0x64
 80009d0:	2201      	movs	r2, #1
 80009d2:	4838      	ldr	r0, [pc, #224]	@ (8000ab4 <main+0x33c>)
 80009d4:	f001 fd5d 	bl	8002492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2140      	movs	r1, #64	@ 0x40
 80009dc:	4839      	ldr	r0, [pc, #228]	@ (8000ac4 <main+0x34c>)
 80009de:	f000 ff3b 	bl	8001858 <HAL_GPIO_WritePin>

//
	command = FLUSH_TX;
 80009e2:	23e1      	movs	r3, #225	@ 0xe1
 80009e4:	f887 3020 	strb.w	r3, [r7, #32]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	4835      	ldr	r0, [pc, #212]	@ (8000ac4 <main+0x34c>)
 80009ee:	f000 ff33 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 80009f2:	f107 0120 	add.w	r1, r7, #32
 80009f6:	2364      	movs	r3, #100	@ 0x64
 80009f8:	2201      	movs	r2, #1
 80009fa:	482e      	ldr	r0, [pc, #184]	@ (8000ab4 <main+0x33c>)
 80009fc:	f001 fd49 	bl	8002492 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2140      	movs	r1, #64	@ 0x40
 8000a04:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <main+0x34c>)
 8000a06:	f000 ff27 	bl	8001858 <HAL_GPIO_WritePin>

//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);



	uint8_t tx_full = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t tx_empty = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t fifo_status = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint8_t aw_reg_bits = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	74bb      	strb	r3, [r7, #18]
	read_register(&hspi1, aw_reg, &aw_reg_bits, 1);
 8000a20:	f107 0212 	add.w	r2, r7, #18
 8000a24:	2301      	movs	r3, #1
 8000a26:	2103      	movs	r1, #3
 8000a28:	4822      	ldr	r0, [pc, #136]	@ (8000ab4 <main+0x33c>)
 8000a2a:	f7ff fe7b 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, setup_retr_reg, &set_retr_reg_bits, 1);
 8000a2e:	f107 0213 	add.w	r2, r7, #19
 8000a32:	2301      	movs	r3, #1
 8000a34:	2104      	movs	r1, #4
 8000a36:	481f      	ldr	r0, [pc, #124]	@ (8000ab4 <main+0x33c>)
 8000a38:	f7ff fe74 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rf_ch_reg, &rf_channel_bits, 1);
 8000a3c:	f107 021d 	add.w	r2, r7, #29
 8000a40:	2301      	movs	r3, #1
 8000a42:	2105      	movs	r1, #5
 8000a44:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <main+0x33c>)
 8000a46:	f7ff fe6d 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rf_setup_reg, &rf_setup_reg_bits, 1);
 8000a4a:	f107 021c 	add.w	r2, r7, #28
 8000a4e:	2301      	movs	r3, #1
 8000a50:	2106      	movs	r1, #6
 8000a52:	4818      	ldr	r0, [pc, #96]	@ (8000ab4 <main+0x33c>)
 8000a54:	f7ff fe66 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	uint8_t status_reg_bits = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	747b      	strb	r3, [r7, #17]
	read_register(&hspi1, status_reg, &status_reg_bits, 1);
 8000a5c:	f107 0211 	add.w	r2, r7, #17
 8000a60:	2301      	movs	r3, #1
 8000a62:	2107      	movs	r1, #7
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <main+0x33c>)
 8000a66:	f7ff fe5d 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	uint8_t tx_address_read[5];
	read_register(&hspi1, tx_addr_reg, tx_address_read, 5);
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	2305      	movs	r3, #5
 8000a70:	2110      	movs	r1, #16
 8000a72:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <main+0x33c>)
 8000a74:	f7ff fe56 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	for (int i = 0; i < 5; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a7c:	e00b      	b.n	8000a96 <main+0x31e>
		printf("Tx Address Byte: %d\n", tx_address_read[i]);
 8000a7e:	f107 020c 	add.w	r2, r7, #12
 8000a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480f      	ldr	r0, [pc, #60]	@ (8000ac8 <main+0x350>)
 8000a8c:	f002 ff18 	bl	80038c0 <iprintf>
	for (int i = 0; i < 5; i++) {
 8000a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a92:	3301      	adds	r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	ddf0      	ble.n	8000a7e <main+0x306>
	}

	uint8_t rx_address_read[5];
	read_register(&hspi1, rx_addr_p0_reg, rx_address_read, 5);
 8000a9c:	1d3a      	adds	r2, r7, #4
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	210a      	movs	r1, #10
 8000aa2:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <main+0x33c>)
 8000aa4:	f7ff fe3e 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	for (int i = 0; i < 5; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aac:	e019      	b.n	8000ae2 <main+0x36a>
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	0800466c 	.word	0x0800466c
 8000abc:	08004688 	.word	0x08004688
 8000ac0:	0800476c 	.word	0x0800476c
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	080046c4 	.word	0x080046c4
		printf("RX Address Byte %d\n", rx_address_read[i]);
 8000acc:	1d3a      	adds	r2, r7, #4
 8000ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad0:	4413      	add	r3, r2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	482a      	ldr	r0, [pc, #168]	@ (8000b80 <main+0x408>)
 8000ad8:	f002 fef2 	bl	80038c0 <iprintf>
	for (int i = 0; i < 5; i++) {
 8000adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ade:	3301      	adds	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	ddf1      	ble.n	8000acc <main+0x354>
	}

	printf("AW reg bits is %d\n", aw_reg_bits);
 8000ae8:	7cbb      	ldrb	r3, [r7, #18]
 8000aea:	4619      	mov	r1, r3
 8000aec:	4825      	ldr	r0, [pc, #148]	@ (8000b84 <main+0x40c>)
 8000aee:	f002 fee7 	bl	80038c0 <iprintf>
	printf("SETUP_RETR reg bits %d\n", set_retr_reg_bits);
 8000af2:	7cfb      	ldrb	r3, [r7, #19]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4824      	ldr	r0, [pc, #144]	@ (8000b88 <main+0x410>)
 8000af8:	f002 fee2 	bl	80038c0 <iprintf>
	printf("RF CH bits %d\n", rf_channel_bits);
 8000afc:	7f7b      	ldrb	r3, [r7, #29]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4822      	ldr	r0, [pc, #136]	@ (8000b8c <main+0x414>)
 8000b02:	f002 fedd 	bl	80038c0 <iprintf>
	printf("RF_SETUP reg is %d\n", rf_setup_reg_bits);
 8000b06:	7f3b      	ldrb	r3, [r7, #28]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4821      	ldr	r0, [pc, #132]	@ (8000b90 <main+0x418>)
 8000b0c:	f002 fed8 	bl	80038c0 <iprintf>
	printf("Status reg %d\n", status_reg_bits);
 8000b10:	7c7b      	ldrb	r3, [r7, #17]
 8000b12:	4619      	mov	r1, r3
 8000b14:	481f      	ldr	r0, [pc, #124]	@ (8000b94 <main+0x41c>)
 8000b16:	f002 fed3 	bl	80038c0 <iprintf>
	printf("The config register is %d\n", &config_reg_bits);
 8000b1a:	f107 031e 	add.w	r3, r7, #30
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <main+0x420>)
 8000b22:	f002 fecd 	bl	80038c0 <iprintf>

	uint8_t data_bytes[3] = {5, 6, 7}; //31
 8000b26:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <main+0x424>)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	8019      	strh	r1, [r3, #0]
 8000b30:	3302      	adds	r3, #2
 8000b32:	0c12      	lsrs	r2, r2, #16
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2180      	movs	r1, #128	@ 0x80
 8000b3a:	4819      	ldr	r0, [pc, #100]	@ (8000ba0 <main+0x428>)
 8000b3c:	f000 fe8c 	bl	8001858 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  command = SEND_DATA;
 8000b40:	23a0      	movs	r3, #160	@ 0xa0
 8000b42:	f887 3020 	strb.w	r3, [r7, #32]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	@ 0x40
 8000b4a:	4816      	ldr	r0, [pc, #88]	@ (8000ba4 <main+0x42c>)
 8000b4c:	f000 fe84 	bl	8001858 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 8000b50:	f107 0120 	add.w	r1, r7, #32
 8000b54:	2364      	movs	r3, #100	@ 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	4813      	ldr	r0, [pc, #76]	@ (8000ba8 <main+0x430>)
 8000b5a:	f001 fc9a 	bl	8002492 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, data_bytes, 3, 100);
 8000b5e:	4639      	mov	r1, r7
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	2203      	movs	r2, #3
 8000b64:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <main+0x430>)
 8000b66:	f001 fc94 	bl	8002492 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2140      	movs	r1, #64	@ 0x40
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <main+0x42c>)
 8000b70:	f000 fe72 	bl	8001858 <HAL_GPIO_WritePin>


	  HAL_Delay(100);
 8000b74:	2064      	movs	r0, #100	@ 0x64
 8000b76:	f000 fba5 	bl	80012c4 <HAL_Delay>
	  command = SEND_DATA;
 8000b7a:	bf00      	nop
 8000b7c:	e7e0      	b.n	8000b40 <main+0x3c8>
 8000b7e:	bf00      	nop
 8000b80:	080046dc 	.word	0x080046dc
 8000b84:	080046f0 	.word	0x080046f0
 8000b88:	08004704 	.word	0x08004704
 8000b8c:	0800471c 	.word	0x0800471c
 8000b90:	0800472c 	.word	0x0800472c
 8000b94:	08004740 	.word	0x08004740
 8000b98:	08004750 	.word	0x08004750
 8000b9c:	08004774 	.word	0x08004774
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	20000084 	.word	0x20000084

08000bac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2234      	movs	r2, #52	@ 0x34
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fef0 	bl	80039a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <_Z18SystemClock_Configv+0xcc>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a27      	ldr	r2, [pc, #156]	@ (8000c78 <_Z18SystemClock_Configv+0xcc>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <_Z18SystemClock_Configv+0xcc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <_Z18SystemClock_Configv+0xd0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bf8:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <_Z18SystemClock_Configv+0xd0>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <_Z18SystemClock_Configv+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f90f 	bl	8001e44 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf14      	ite	ne
 8000c2c:	2301      	movne	r3, #1
 8000c2e:	2300      	moveq	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000c36:	f000 f88b 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fe31 	bl	80018bc <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000c6a:	f000 f871 	bl	8000d50 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3750      	adds	r7, #80	@ 0x50
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000

08000c80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_ds_irq = (1 << 5);
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	73fb      	strb	r3, [r7, #15]
	uint8_t max_rt_irq = (1 << 4);
 8000c8e:	2310      	movs	r3, #16
 8000c90:	73bb      	strb	r3, [r7, #14]
	uint8_t rx_dr_irq = (1 << 6);
 8000c92:	2340      	movs	r3, #64	@ 0x40
 8000c94:	737b      	strb	r3, [r7, #13]

	uint8_t status_register_bits_irq = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	733b      	strb	r3, [r7, #12]


//	status_register_bits &= tx_ds;
//	status_register_bits &= max_rt;

	if(GPIO_Pin == GPIO_PIN_9) {
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ca0:	d148      	bne.n	8000d34 <HAL_GPIO_EXTI_Callback+0xb4>
		read_register(&hspi1, status_reg, &status_register_bits_irq, 1);
 8000ca2:	f107 020c 	add.w	r2, r7, #12
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2107      	movs	r1, #7
 8000caa:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000cac:	f7ff fd3a 	bl	8000724 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
		printf("Sending\n");
 8000cb0:	4823      	ldr	r0, [pc, #140]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000cb2:	f002 fe6d 	bl	8003990 <puts>

		if (status_register_bits_irq & tx_ds_irq) {
 8000cb6:	7b3a      	ldrb	r2, [r7, #12]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00e      	beq.n	8000ce0 <HAL_GPIO_EXTI_Callback+0x60>
			status_register_bits_irq |= tx_ds_irq; //TX_DS clear
 8000cc2:	7b3a      	ldrb	r2, [r7, #12]
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
			write_register(&hspi1, status_reg, &status_register_bits_irq, 1);
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	4819      	ldr	r0, [pc, #100]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000cd6:	f7ff fcf7 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
			printf("Data sent\n");
 8000cda:	481a      	ldr	r0, [pc, #104]	@ (8000d44 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000cdc:	f002 fe58 	bl	8003990 <puts>
		}
		if (status_register_bits_irq & max_rt_irq) { //MAX_RT clear
 8000ce0:	7b3a      	ldrb	r2, [r7, #12]
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00e      	beq.n	8000d0a <HAL_GPIO_EXTI_Callback+0x8a>
			status_register_bits_irq |= max_rt_irq;
 8000cec:	7b3a      	ldrb	r2, [r7, #12]
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	733b      	strb	r3, [r7, #12]
			write_register(&hspi1, status_reg, &status_register_bits_irq, 1);
 8000cf6:	f107 020c 	add.w	r2, r7, #12
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d00:	f7ff fce2 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
			printf("Max number of retransmits sent\n");
 8000d04:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000d06:	f002 fe43 	bl	8003990 <puts>
		}

		if (status_register_bits_irq & rx_dr_irq) {
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00e      	beq.n	8000d34 <HAL_GPIO_EXTI_Callback+0xb4>
			printf("rx dr\n");
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000d18:	f002 fe3a 	bl	8003990 <puts>
			status_register_bits_irq |= rx_dr_irq;
 8000d1c:	7b3a      	ldrb	r2, [r7, #12]
 8000d1e:	7b7b      	ldrb	r3, [r7, #13]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	733b      	strb	r3, [r7, #12]
			write_register(&hspi1, status_reg, &status_register_bits_irq, 1);
 8000d26:	f107 020c 	add.w	r2, r7, #12
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2107      	movs	r1, #7
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000d30:	f7ff fcca 	bl	80006c8 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
		}

	}
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000084 	.word	0x20000084
 8000d40:	08004778 	.word	0x08004778
 8000d44:	08004780 	.word	0x08004780
 8000d48:	0800478c 	.word	0x0800478c
 8000d4c:	080047ac 	.word	0x080047ac

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f001 fae7 	bl	8002380 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f7ff ffca 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000084 	.word	0x20000084
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	@ (8000e4c <HAL_SPI_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e22:	23e0      	movs	r3, #224	@ 0xe0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_SPI_MspInit+0x8c>)
 8000e3e:	f000 fb77 	bl	8001530 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f9c1 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f0e:	f000 fcbd 	bl	800188c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f26:	2201      	movs	r2, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <__io_putchar+0x20>)
 8000f2a:	f002 f84b 	bl	8002fc4 <HAL_UART_Transmit>

  return ch;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000e0 	.word	0x200000e0

08000f3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
  }

  return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e009      	b.n	8000f9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ffc1 	bl	8000f18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf1      	blt.n	8000f88 <_write+0x12>
  }
  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f002 fcb2 	bl	80039b0 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20020000 	.word	0x20020000
 8001078:	00000400 	.word	0x00000400
 800107c:	200000dc 	.word	0x200000dc
 8001080:	20000278 	.word	0x20000278

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <MX_USART2_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f001 ff20 	bl	8002f24 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f7ff fe31 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000e0 	.word	0x200000e0
 80010f8:	40004400 	.word	0x40004400

080010fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <HAL_UART_MspInit+0x84>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d12b      	bne.n	8001176 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <HAL_UART_MspInit+0x88>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	4a17      	ldr	r2, [pc, #92]	@ (8001184 <HAL_UART_MspInit+0x88>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	6413      	str	r3, [r2, #64]	@ 0x40
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_UART_MspInit+0x88>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_UART_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0x88>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_UART_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001156:	230c      	movs	r3, #12
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001166:	2307      	movs	r3, #7
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_UART_MspInit+0x8c>)
 8001172:	f000 f9dd 	bl	8001530 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004400 	.word	0x40004400
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001190:	f7ff ff78 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001194:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001196:	490d      	ldr	r1, [pc, #52]	@ (80011cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f002 fbff 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fadb 	bl	8000778 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011d0:	08004810 	.word	0x08004810
  ldr r2, =_sbss
 80011d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011d8:	20000278 	.word	0x20000278

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f94f 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe20 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f967 	bl	8001516 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001260:	f000 f92f 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000128 	.word	0x20000128

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000128 	.word	0x20000128

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	e165      	b.n	8001818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	429a      	cmp	r2, r3
 8001566:	f040 8154 	bne.w	8001812 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d005      	beq.n	8001582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157e:	2b02      	cmp	r3, #2
 8001580:	d130      	bne.n	80015e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 0201 	and.w	r2, r3, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d017      	beq.n	8001620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d123      	bne.n	8001674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	69b9      	ldr	r1, [r7, #24]
 8001670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0203 	and.w	r2, r3, #3
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80ae 	beq.w	8001812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <HAL_GPIO_Init+0x300>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <HAL_GPIO_Init+0x300>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <HAL_GPIO_Init+0x300>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d2:	4a58      	ldr	r2, [pc, #352]	@ (8001834 <HAL_GPIO_Init+0x304>)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001838 <HAL_GPIO_Init+0x308>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d025      	beq.n	800174a <HAL_GPIO_Init+0x21a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4e      	ldr	r2, [pc, #312]	@ (800183c <HAL_GPIO_Init+0x30c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <HAL_GPIO_Init+0x216>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4d      	ldr	r2, [pc, #308]	@ (8001840 <HAL_GPIO_Init+0x310>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_GPIO_Init+0x212>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4c      	ldr	r2, [pc, #304]	@ (8001844 <HAL_GPIO_Init+0x314>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4b      	ldr	r2, [pc, #300]	@ (8001848 <HAL_GPIO_Init+0x318>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_GPIO_Init+0x20a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4a      	ldr	r2, [pc, #296]	@ (800184c <HAL_GPIO_Init+0x31c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x206>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a49      	ldr	r2, [pc, #292]	@ (8001850 <HAL_GPIO_Init+0x320>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_GPIO_Init+0x202>
 800172e:	2306      	movs	r3, #6
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001732:	2307      	movs	r3, #7
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x21c>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x21c>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x21c>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x21c>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	@ (8001834 <HAL_GPIO_Init+0x304>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <HAL_GPIO_Init+0x324>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a31      	ldr	r2, [pc, #196]	@ (8001854 <HAL_GPIO_Init+0x324>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <HAL_GPIO_Init+0x324>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <HAL_GPIO_Init+0x324>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <HAL_GPIO_Init+0x324>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <HAL_GPIO_Init+0x324>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_GPIO_Init+0x324>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <HAL_GPIO_Init+0x324>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae96 	bls.w	800154c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40013c00 	.word	0x40013c00

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001874:	e003      	b.n	800187e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	619a      	str	r2, [r3, #24]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9e8 	bl	8000c80 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013c00 	.word	0x40013c00

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0cc      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b68      	ldr	r3, [pc, #416]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d90c      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b65      	ldr	r3, [pc, #404]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800191a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d044      	beq.n	80019dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d119      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d003      	beq.n	800197a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e067      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4934      	ldr	r1, [pc, #208]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ac:	f7ff fc7e 	bl	80012ac <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7ff fc7a 	bl	80012ac <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e04f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 020c 	and.w	r2, r3, #12
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1eb      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019dc:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20c      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f855 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fbde 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	080047b4 	.word	0x080047b4
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	@ (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080047c4 	.word	0x080047c4

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	@ (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080047c4 	.word	0x080047c4

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b0a6      	sub	sp, #152	@ 0x98
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b16:	4bc8      	ldr	r3, [pc, #800]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	f200 817e 	bhi.w	8001e20 <HAL_RCC_GetSysClockFreq+0x330>
 8001b24:	a201      	add	r2, pc, #4	@ (adr r2, 8001b2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b61 	.word	0x08001b61
 8001b30:	08001e21 	.word	0x08001e21
 8001b34:	08001e21 	.word	0x08001e21
 8001b38:	08001e21 	.word	0x08001e21
 8001b3c:	08001b69 	.word	0x08001b69
 8001b40:	08001e21 	.word	0x08001e21
 8001b44:	08001e21 	.word	0x08001e21
 8001b48:	08001e21 	.word	0x08001e21
 8001b4c:	08001b71 	.word	0x08001b71
 8001b50:	08001e21 	.word	0x08001e21
 8001b54:	08001e21 	.word	0x08001e21
 8001b58:	08001e21 	.word	0x08001e21
 8001b5c:	08001cdb 	.word	0x08001cdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4bb6      	ldr	r3, [pc, #728]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b66:	e15f      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b68:	4bb5      	ldr	r3, [pc, #724]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b6e:	e15b      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b70:	4bb1      	ldr	r3, [pc, #708]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7c:	4bae      	ldr	r3, [pc, #696]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d031      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b88:	4bab      	ldr	r3, [pc, #684]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	2200      	movs	r2, #0
 8001b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ba0:	4ba7      	ldr	r3, [pc, #668]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ba6:	462a      	mov	r2, r5
 8001ba8:	fb03 f202 	mul.w	r2, r3, r2
 8001bac:	2300      	movs	r3, #0
 8001bae:	4621      	mov	r1, r4
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4aa2      	ldr	r2, [pc, #648]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bb8:	4621      	mov	r1, r4
 8001bba:	fba1 1202 	umull	r1, r2, r1, r2
 8001bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001bc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001bc6:	4413      	add	r3, r2
 8001bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bce:	2200      	movs	r2, #0
 8001bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bd2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bd8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001bdc:	f7fe fb68 	bl	80002b0 <__aeabi_uldivmod>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4613      	mov	r3, r2
 8001be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bea:	e064      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bec:	4b92      	ldr	r3, [pc, #584]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bf6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c04:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001c08:	4622      	mov	r2, r4
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	0159      	lsls	r1, r3, #5
 8001c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1a:	0150      	lsls	r0, r2, #5
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4621      	mov	r1, r4
 8001c22:	1a51      	subs	r1, r2, r1
 8001c24:	6139      	str	r1, [r7, #16]
 8001c26:	4629      	mov	r1, r5
 8001c28:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c3a:	4659      	mov	r1, fp
 8001c3c:	018b      	lsls	r3, r1, #6
 8001c3e:	4651      	mov	r1, sl
 8001c40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c44:	4651      	mov	r1, sl
 8001c46:	018a      	lsls	r2, r1, #6
 8001c48:	4651      	mov	r1, sl
 8001c4a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c4e:	4659      	mov	r1, fp
 8001c50:	eb63 0901 	sbc.w	r9, r3, r1
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c68:	4690      	mov	r8, r2
 8001c6a:	4699      	mov	r9, r3
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	eb18 0303 	adds.w	r3, r8, r3
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	462b      	mov	r3, r5
 8001c76:	eb49 0303 	adc.w	r3, r9, r3
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	028b      	lsls	r3, r1, #10
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c92:	4621      	mov	r1, r4
 8001c94:	028a      	lsls	r2, r1, #10
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ca2:	647a      	str	r2, [r7, #68]	@ 0x44
 8001ca4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ca8:	f7fe fb02 	bl	80002b0 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cb6:	4b60      	ldr	r3, [pc, #384]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0c1b      	lsrs	r3, r3, #16
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001cc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cd8:	e0a6      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cda:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce6:	4b54      	ldr	r3, [pc, #336]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02a      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d04:	2100      	movs	r1, #0
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d08:	fb03 f201 	mul.w	r2, r3, r1
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	fb00 f303 	mul.w	r3, r0, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	4a4a      	ldr	r2, [pc, #296]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d16:	fba0 1202 	umull	r1, r2, r0, r2
 8001d1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d22:	4413      	add	r3, r2
 8001d24:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d2e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d34:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d38:	f7fe faba 	bl	80002b0 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d46:	e05b      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d48:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d64:	4642      	mov	r2, r8
 8001d66:	464b      	mov	r3, r9
 8001d68:	f04f 0000 	mov.w	r0, #0
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	0159      	lsls	r1, r3, #5
 8001d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d76:	0150      	lsls	r0, r2, #5
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001da0:	eb63 050b 	sbc.w	r5, r3, fp
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	00eb      	lsls	r3, r5, #3
 8001dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db2:	00e2      	lsls	r2, r4, #3
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	4643      	mov	r3, r8
 8001dba:	18e3      	adds	r3, r4, r3
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	eb45 0303 	adc.w	r3, r5, r3
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de8:	2200      	movs	r2, #0
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	61fa      	str	r2, [r7, #28]
 8001dee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df2:	f7fe fa5d 	bl	80002b0 <__aeabi_uldivmod>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e00:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0f1b      	lsrs	r3, r3, #28
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e1e:	e003      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3798      	adds	r7, #152	@ 0x98
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	017d7840 	.word	0x017d7840

08001e44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e28d      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8083 	beq.w	8001f6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e64:	4b94      	ldr	r3, [pc, #592]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e70:	4b91      	ldr	r3, [pc, #580]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e88:	d00c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e96:	4b88      	ldr	r3, [pc, #544]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	4b84      	ldr	r3, [pc, #528]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d05b      	beq.n	8001f68 <HAL_RCC_OscConfig+0x124>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d157      	bne.n	8001f68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e25a      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x90>
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7b      	ldr	r2, [pc, #492]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xcc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xb4>
 8001ede:	4b76      	ldr	r3, [pc, #472]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b73      	ldr	r3, [pc, #460]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a72      	ldr	r2, [pc, #456]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xcc>
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6e      	ldr	r2, [pc, #440]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b6c      	ldr	r3, [pc, #432]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a6b      	ldr	r2, [pc, #428]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f9c8 	bl	80012ac <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f9c4 	bl	80012ac <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e21f      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b61      	ldr	r3, [pc, #388]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xdc>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f9b4 	bl	80012ac <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f9b0 	bl	80012ac <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e20b      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b57      	ldr	r3, [pc, #348]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x104>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06f      	beq.n	8002056 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f76:	4b50      	ldr	r3, [pc, #320]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d017      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f82:	4b4d      	ldr	r3, [pc, #308]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b44      	ldr	r3, [pc, #272]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b41      	ldr	r3, [pc, #260]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x186>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1d3      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4937      	ldr	r1, [pc, #220]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <HAL_RCC_OscConfig+0x278>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff f95d 	bl	80012ac <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f959 	bl	80012ac <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1b4      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4925      	ldr	r1, [pc, #148]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <HAL_RCC_OscConfig+0x278>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff f93c 	bl	80012ac <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff f938 	bl	80012ac <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e193      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d036      	beq.n	80020d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff f91c 	bl	80012ac <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff f918 	bl	80012ac <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e173      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_OscConfig+0x274>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x234>
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_OscConfig+0x27c>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7ff f905 	bl	80012ac <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e00e      	b.n	80020c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a6:	f7ff f901 	bl	80012ac <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d907      	bls.n	80020c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e15c      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b8a      	ldr	r3, [pc, #552]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ea      	bne.n	80020a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8097 	beq.w	800220c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b83      	ldr	r3, [pc, #524]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	4a7e      	ldr	r2, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fe:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b79      	ldr	r3, [pc, #484]	@ (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b76      	ldr	r3, [pc, #472]	@ (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	@ (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff f8c1 	bl	80012ac <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff f8bd 	bl	80012ac <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e118      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b6c      	ldr	r3, [pc, #432]	@ (80022f4 <HAL_RCC_OscConfig+0x4b0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x31e>
 8002154:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002158:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x358>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x340>
 800216a:	4b61      	ldr	r3, [pc, #388]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	4a60      	ldr	r2, [pc, #384]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	@ 0x70
 8002176:	4b5e      	ldr	r3, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	4a5d      	ldr	r2, [pc, #372]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	@ 0x70
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x358>
 8002184:	4b5a      	ldr	r3, [pc, #360]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002188:	4a59      	ldr	r2, [pc, #356]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002190:	4b57      	ldr	r3, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002194:	4a56      	ldr	r2, [pc, #344]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7ff f882 	bl	80012ac <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7ff f87e 	bl	80012ac <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0d7      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	4b4b      	ldr	r3, [pc, #300]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ee      	beq.n	80021ac <HAL_RCC_OscConfig+0x368>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7ff f86c 	bl	80012ac <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7ff f868 	bl	80012ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0c1      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	4a3a      	ldr	r2, [pc, #232]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80ad 	beq.w	8002370 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002216:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d060      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d145      	bne.n	80022b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b33      	ldr	r3, [pc, #204]	@ (80022f8 <HAL_RCC_OscConfig+0x4b4>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff f83c 	bl	80012ac <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7ff f838 	bl	80012ac <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e093      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	071b      	lsls	r3, r3, #28
 8002282:	491b      	ldr	r1, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x4b4>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff f80d 	bl	80012ac <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff f809 	bl	80012ac <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e064      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x452>
 80022b4:	e05c      	b.n	8002370 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_RCC_OscConfig+0x4b4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fff6 	bl	80012ac <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fff2 	bl	80012ac <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04d      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x480>
 80022e2:	e045      	b.n	8002370 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e040      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <HAL_RCC_OscConfig+0x538>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d030      	beq.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d129      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d122      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d119      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d10f      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07b      	b.n	800248a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	2b00      	cmp	r3, #0
 8002398:	d108      	bne.n	80023ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023a2:	d009      	beq.n	80023b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
 80023aa:	e005      	b.n	80023b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fcf8 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243c:	ea42 0103 	orr.w	r1, r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f003 0104 	and.w	r1, r3, #4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	f003 0210 	and.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002478:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024a2:	f7fe ff03 	bl	80012ac <HAL_GetTick>
 80024a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	e12a      	b.n	8002712 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_SPI_Transmit+0x36>
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e122      	b.n	8002712 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_SPI_Transmit+0x48>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e11b      	b.n	8002712 <HAL_SPI_Transmit+0x280>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002528:	d10f      	bne.n	800254a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002548:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002554:	2b40      	cmp	r3, #64	@ 0x40
 8002556:	d007      	beq.n	8002568 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002570:	d152      	bne.n	8002618 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_SPI_Transmit+0xee>
 800257a:	8b7b      	ldrh	r3, [r7, #26]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d145      	bne.n	800260c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	1c9a      	adds	r2, r3, #2
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025a4:	e032      	b.n	800260c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d112      	bne.n	80025da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	1c9a      	adds	r2, r3, #2
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025d8:	e018      	b.n	800260c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025da:	f7fe fe67 	bl	80012ac <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d803      	bhi.n	80025f2 <HAL_SPI_Transmit+0x160>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f0:	d102      	bne.n	80025f8 <HAL_SPI_Transmit+0x166>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e082      	b.n	8002712 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1c7      	bne.n	80025a6 <HAL_SPI_Transmit+0x114>
 8002616:	e053      	b.n	80026c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_SPI_Transmit+0x194>
 8002620:	8b7b      	ldrh	r3, [r7, #26]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d147      	bne.n	80026b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800264c:	e033      	b.n	80026b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d113      	bne.n	8002684 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002682:	e018      	b.n	80026b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002684:	f7fe fe12 	bl	80012ac <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d803      	bhi.n	800269c <HAL_SPI_Transmit+0x20a>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800269a:	d102      	bne.n	80026a2 <HAL_SPI_Transmit+0x210>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e02d      	b.n	8002712 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1c6      	bne.n	800264e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fbd9 	bl	8002e7c <SPI_EndRxTxTransaction>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002710:	2300      	movs	r3, #0
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e104      	b.n	8002944 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002742:	d112      	bne.n	800276a <HAL_SPI_Receive+0x50>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2204      	movs	r2, #4
 8002750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f8f3 	bl	800294c <HAL_SPI_TransmitReceive>
 8002766:	4603      	mov	r3, r0
 8002768:	e0ec      	b.n	8002944 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800276a:	f7fe fd9f 	bl	80012ac <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_SPI_Receive+0x62>
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0e1      	b.n	8002944 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_SPI_Receive+0x74>
 800278a:	2302      	movs	r3, #2
 800278c:	e0da      	b.n	8002944 <HAL_SPI_Receive+0x22a>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2204      	movs	r2, #4
 800279a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027dc:	d10f      	bne.n	80027fe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d007      	beq.n	800281c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d170      	bne.n	8002906 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002824:	e035      	b.n	8002892 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d115      	bne.n	8002860 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f103 020c 	add.w	r2, r3, #12
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800285e:	e018      	b.n	8002892 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002860:	f7fe fd24 	bl	80012ac <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d803      	bhi.n	8002878 <HAL_SPI_Receive+0x15e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002876:	d102      	bne.n	800287e <HAL_SPI_Receive+0x164>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e058      	b.n	8002944 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1c4      	bne.n	8002826 <HAL_SPI_Receive+0x10c>
 800289c:	e038      	b.n	8002910 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d113      	bne.n	80028d4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	b292      	uxth	r2, r2
 80028b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	1c9a      	adds	r2, r3, #2
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028d2:	e018      	b.n	8002906 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028d4:	f7fe fcea 	bl	80012ac <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d803      	bhi.n	80028ec <HAL_SPI_Receive+0x1d2>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028ea:	d102      	bne.n	80028f2 <HAL_SPI_Receive+0x1d8>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e01e      	b.n	8002944 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1c6      	bne.n	800289e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	6839      	ldr	r1, [r7, #0]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa4b 	bl	8002db0 <SPI_EndRxTransaction>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002942:	2300      	movs	r3, #0
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800295a:	2301      	movs	r3, #1
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800295e:	f7fe fca5 	bl	80012ac <HAL_GetTick>
 8002962:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800296a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d00c      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x4a>
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002982:	d106      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x46>
 800298c:	7ffb      	ldrb	r3, [r7, #31]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d001      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	e17f      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x5c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x5c>
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e174      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x6e>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e16d      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2205      	movs	r2, #5
 80029d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	887a      	ldrh	r2, [r7, #2]
 80029fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a16:	2b40      	cmp	r3, #64	@ 0x40
 8002a18:	d007      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a32:	d17e      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0xf6>
 8002a3c:	8afb      	ldrh	r3, [r7, #22]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d16c      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a66:	e059      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d11b      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x162>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d016      	beq.n	8002aae <HAL_SPI_TransmitReceive+0x162>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d113      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	1c9a      	adds	r2, r3, #2
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d119      	bne.n	8002af0 <HAL_SPI_TransmitReceive+0x1a4>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d014      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	1c9a      	adds	r2, r3, #2
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002af0:	f7fe fbdc 	bl	80012ac <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d80d      	bhi.n	8002b1c <HAL_SPI_TransmitReceive+0x1d0>
 8002b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b06:	d009      	beq.n	8002b1c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e0bc      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1a0      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x11c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d19b      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x11c>
 8002b30:	e082      	b.n	8002c38 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x1f4>
 8002b3a:	8afb      	ldrh	r3, [r7, #22]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d171      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b66:	e05d      	b.n	8002c24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d11c      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x264>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x264>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d114      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d119      	bne.n	8002bf2 <HAL_SPI_TransmitReceive+0x2a6>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d014      	beq.n	8002bf2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bf2:	f7fe fb5b 	bl	80012ac <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d803      	bhi.n	8002c0a <HAL_SPI_TransmitReceive+0x2be>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c08:	d102      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x2c4>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e038      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d19c      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x21c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d197      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f91d 	bl	8002e7c <SPI_EndRxTxTransaction>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e01d      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3728      	adds	r7, #40	@ 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cb0:	f7fe fafc 	bl	80012ac <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cc0:	f7fe faf4 	bl	80012ac <HAL_GetTick>
 8002cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	0d1b      	lsrs	r3, r3, #20
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd6:	e054      	b.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cde:	d050      	beq.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce0:	f7fe fae4 	bl	80012ac <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13d      	bne.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d0e:	d111      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d18:	d004      	beq.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d22:	d107      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3c:	d10f      	bne.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e017      	b.n	8002da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d19b      	bne.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc4:	d111      	bne.n	8002dea <SPI_EndRxTransaction+0x3a>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dce:	d004      	beq.n	8002dda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd8:	d107      	bne.n	8002dea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002df2:	d12a      	bne.n	8002e4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfc:	d012      	beq.n	8002e24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff ff49 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02d      	beq.n	8002e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e026      	b.n	8002e72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff ff36 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01a      	beq.n	8002e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e013      	b.n	8002e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2101      	movs	r1, #1
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff ff23 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2102      	movs	r1, #2
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff04 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f043 0220 	orr.w	r2, r3, #32
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e032      	b.n	8002f14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002eae:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <SPI_EndRxTxTransaction+0xa0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <SPI_EndRxTxTransaction+0xa4>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	0d5b      	lsrs	r3, r3, #21
 8002eba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ecc:	d112      	bne.n	8002ef4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fee1 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00f      	b.n	8002f14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d0f2      	beq.n	8002ef4 <SPI_EndRxTxTransaction+0x78>
 8002f0e:	e000      	b.n	8002f12 <SPI_EndRxTxTransaction+0x96>
        break;
 8002f10:	bf00      	nop
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	165e9f81 	.word	0x165e9f81

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e042      	b.n	8002fbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe f8d6 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	@ 0x24
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f973 	bl	8003254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d175      	bne.n	80030d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Transmit+0x2c>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e06e      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	@ 0x21
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fe f953 	bl	80012ac <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301c:	d108      	bne.n	8003030 <HAL_UART_Transmit+0x6c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e003      	b.n	8003038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003038:	e02e      	b.n	8003098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f848 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03a      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	3302      	adds	r3, #2
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e007      	b.n	800308a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1cb      	bne.n	800303a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2140      	movs	r1, #64	@ 0x40
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f814 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	e03b      	b.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f2:	d037      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fe f8da 	bl	80012ac <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <UART_WaitOnFlagUntilTimeout+0x30>
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e03a      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d023      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	d020      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b40      	cmp	r3, #64	@ 0x40
 8003126:	d01d      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d116      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f81d 	bl	800318c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2208      	movs	r2, #8
 8003156:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e00f      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d0b4      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b095      	sub	sp, #84	@ 0x54
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d119      	bne.n	8003238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60bb      	str	r3, [r7, #8]
   return(result);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	647b      	str	r3, [r7, #68]	@ 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003224:	61ba      	str	r2, [r7, #24]
 8003226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	613b      	str	r3, [r7, #16]
   return(result);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003246:	bf00      	nop
 8003248:	3754      	adds	r7, #84	@ 0x54
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b0c0      	sub	sp, #256	@ 0x100
 800325a:	af00      	add	r7, sp, #0
 800325c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	68d9      	ldr	r1, [r3, #12]
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	ea40 0301 	orr.w	r3, r0, r1
 800327c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032ac:	f021 010c 	bic.w	r1, r1, #12
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032ba:	430b      	orrs	r3, r1
 80032bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	6999      	ldr	r1, [r3, #24]
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	ea40 0301 	orr.w	r3, r0, r1
 80032da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003520 <UART_SetConfig+0x2cc>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d005      	beq.n	80032f4 <UART_SetConfig+0xa0>
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003524 <UART_SetConfig+0x2d0>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d104      	bne.n	80032fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f4:	f7fe fbe8 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 80032f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032fc:	e003      	b.n	8003306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032fe:	f7fe fbcf 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8003302:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003310:	f040 810c 	bne.w	800352c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800331e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	1891      	adds	r1, r2, r2
 800332c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800332e:	415b      	adcs	r3, r3
 8003330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003336:	4621      	mov	r1, r4
 8003338:	eb12 0801 	adds.w	r8, r2, r1
 800333c:	4629      	mov	r1, r5
 800333e:	eb43 0901 	adc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003364:	462b      	mov	r3, r5
 8003366:	eb49 0303 	adc.w	r3, r9, r3
 800336a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800337a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800337e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003382:	460b      	mov	r3, r1
 8003384:	18db      	adds	r3, r3, r3
 8003386:	653b      	str	r3, [r7, #80]	@ 0x50
 8003388:	4613      	mov	r3, r2
 800338a:	eb42 0303 	adc.w	r3, r2, r3
 800338e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003398:	f7fc ff8a 	bl	80002b0 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4b61      	ldr	r3, [pc, #388]	@ (8003528 <UART_SetConfig+0x2d4>)
 80033a2:	fba3 2302 	umull	r2, r3, r3, r2
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	011c      	lsls	r4, r3, #4
 80033aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	1891      	adds	r1, r2, r2
 80033c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033c4:	415b      	adcs	r3, r3
 80033c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033cc:	4641      	mov	r1, r8
 80033ce:	eb12 0a01 	adds.w	sl, r2, r1
 80033d2:	4649      	mov	r1, r9
 80033d4:	eb43 0b01 	adc.w	fp, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ec:	4692      	mov	sl, r2
 80033ee:	469b      	mov	fp, r3
 80033f0:	4643      	mov	r3, r8
 80033f2:	eb1a 0303 	adds.w	r3, sl, r3
 80033f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033fa:	464b      	mov	r3, r9
 80033fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003410:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003418:	460b      	mov	r3, r1
 800341a:	18db      	adds	r3, r3, r3
 800341c:	643b      	str	r3, [r7, #64]	@ 0x40
 800341e:	4613      	mov	r3, r2
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	647b      	str	r3, [r7, #68]	@ 0x44
 8003426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800342a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800342e:	f7fc ff3f 	bl	80002b0 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4611      	mov	r1, r2
 8003438:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <UART_SetConfig+0x2d4>)
 800343a:	fba3 2301 	umull	r2, r3, r3, r1
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2264      	movs	r2, #100	@ 0x64
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	1acb      	subs	r3, r1, r3
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800344e:	4b36      	ldr	r3, [pc, #216]	@ (8003528 <UART_SetConfig+0x2d4>)
 8003450:	fba3 2302 	umull	r2, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800345c:	441c      	add	r4, r3
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003468:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800346c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003470:	4642      	mov	r2, r8
 8003472:	464b      	mov	r3, r9
 8003474:	1891      	adds	r1, r2, r2
 8003476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003478:	415b      	adcs	r3, r3
 800347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003480:	4641      	mov	r1, r8
 8003482:	1851      	adds	r1, r2, r1
 8003484:	6339      	str	r1, [r7, #48]	@ 0x30
 8003486:	4649      	mov	r1, r9
 8003488:	414b      	adcs	r3, r1
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003498:	4659      	mov	r1, fp
 800349a:	00cb      	lsls	r3, r1, #3
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a2:	4651      	mov	r1, sl
 80034a4:	00ca      	lsls	r2, r1, #3
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	4642      	mov	r2, r8
 80034ae:	189b      	adds	r3, r3, r2
 80034b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034b4:	464b      	mov	r3, r9
 80034b6:	460a      	mov	r2, r1
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034d4:	460b      	mov	r3, r1
 80034d6:	18db      	adds	r3, r3, r3
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034da:	4613      	mov	r3, r2
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034ea:	f7fc fee1 	bl	80002b0 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <UART_SetConfig+0x2d4>)
 80034f4:	fba3 1302 	umull	r1, r3, r3, r2
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	2164      	movs	r1, #100	@ 0x64
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	3332      	adds	r3, #50	@ 0x32
 8003506:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <UART_SetConfig+0x2d4>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	f003 0207 	and.w	r2, r3, #7
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4422      	add	r2, r4
 800351a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800351c:	e106      	b.n	800372c <UART_SetConfig+0x4d8>
 800351e:	bf00      	nop
 8003520:	40011000 	.word	0x40011000
 8003524:	40011400 	.word	0x40011400
 8003528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800352c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003536:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800353a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800353e:	4642      	mov	r2, r8
 8003540:	464b      	mov	r3, r9
 8003542:	1891      	adds	r1, r2, r2
 8003544:	6239      	str	r1, [r7, #32]
 8003546:	415b      	adcs	r3, r3
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
 800354a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800354e:	4641      	mov	r1, r8
 8003550:	1854      	adds	r4, r2, r1
 8003552:	4649      	mov	r1, r9
 8003554:	eb43 0501 	adc.w	r5, r3, r1
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	00eb      	lsls	r3, r5, #3
 8003562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003566:	00e2      	lsls	r2, r4, #3
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	4643      	mov	r3, r8
 800356e:	18e3      	adds	r3, r4, r3
 8003570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003574:	464b      	mov	r3, r9
 8003576:	eb45 0303 	adc.w	r3, r5, r3
 800357a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800358a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800359a:	4629      	mov	r1, r5
 800359c:	008b      	lsls	r3, r1, #2
 800359e:	4621      	mov	r1, r4
 80035a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a4:	4621      	mov	r1, r4
 80035a6:	008a      	lsls	r2, r1, #2
 80035a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035ac:	f7fc fe80 	bl	80002b0 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b60      	ldr	r3, [pc, #384]	@ (8003738 <UART_SetConfig+0x4e4>)
 80035b6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	011c      	lsls	r4, r3, #4
 80035be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	1891      	adds	r1, r2, r2
 80035d6:	61b9      	str	r1, [r7, #24]
 80035d8:	415b      	adcs	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e0:	4641      	mov	r1, r8
 80035e2:	1851      	adds	r1, r2, r1
 80035e4:	6139      	str	r1, [r7, #16]
 80035e6:	4649      	mov	r1, r9
 80035e8:	414b      	adcs	r3, r1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f8:	4659      	mov	r1, fp
 80035fa:	00cb      	lsls	r3, r1, #3
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003602:	4651      	mov	r1, sl
 8003604:	00ca      	lsls	r2, r1, #3
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	4603      	mov	r3, r0
 800360c:	4642      	mov	r2, r8
 800360e:	189b      	adds	r3, r3, r2
 8003610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003614:	464b      	mov	r3, r9
 8003616:	460a      	mov	r2, r1
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800362a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003638:	4649      	mov	r1, r9
 800363a:	008b      	lsls	r3, r1, #2
 800363c:	4641      	mov	r1, r8
 800363e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003642:	4641      	mov	r1, r8
 8003644:	008a      	lsls	r2, r1, #2
 8003646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800364a:	f7fc fe31 	bl	80002b0 <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4611      	mov	r1, r2
 8003654:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <UART_SetConfig+0x4e4>)
 8003656:	fba3 2301 	umull	r2, r3, r3, r1
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2264      	movs	r2, #100	@ 0x64
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	1acb      	subs	r3, r1, r3
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	3332      	adds	r3, #50	@ 0x32
 8003668:	4a33      	ldr	r2, [pc, #204]	@ (8003738 <UART_SetConfig+0x4e4>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003674:	441c      	add	r4, r3
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800367a:	2200      	movs	r2, #0
 800367c:	673b      	str	r3, [r7, #112]	@ 0x70
 800367e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003680:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003684:	4642      	mov	r2, r8
 8003686:	464b      	mov	r3, r9
 8003688:	1891      	adds	r1, r2, r2
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	415b      	adcs	r3, r3
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003694:	4641      	mov	r1, r8
 8003696:	1851      	adds	r1, r2, r1
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	4649      	mov	r1, r9
 800369c:	414b      	adcs	r3, r1
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036ac:	4659      	mov	r1, fp
 80036ae:	00cb      	lsls	r3, r1, #3
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b6:	4651      	mov	r1, sl
 80036b8:	00ca      	lsls	r2, r1, #3
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	4642      	mov	r2, r8
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c6:	464b      	mov	r3, r9
 80036c8:	460a      	mov	r2, r1
 80036ca:	eb42 0303 	adc.w	r3, r2, r3
 80036ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036da:	667a      	str	r2, [r7, #100]	@ 0x64
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036e8:	4649      	mov	r1, r9
 80036ea:	008b      	lsls	r3, r1, #2
 80036ec:	4641      	mov	r1, r8
 80036ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f2:	4641      	mov	r1, r8
 80036f4:	008a      	lsls	r2, r1, #2
 80036f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036fa:	f7fc fdd9 	bl	80002b0 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <UART_SetConfig+0x4e4>)
 8003704:	fba3 1302 	umull	r1, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	2164      	movs	r1, #100	@ 0x64
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	3332      	adds	r3, #50	@ 0x32
 8003716:	4a08      	ldr	r2, [pc, #32]	@ (8003738 <UART_SetConfig+0x4e4>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4422      	add	r2, r4
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003732:	46bd      	mov	sp, r7
 8003734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003738:	51eb851f 	.word	0x51eb851f

0800373c <std>:
 800373c:	2300      	movs	r3, #0
 800373e:	b510      	push	{r4, lr}
 8003740:	4604      	mov	r4, r0
 8003742:	e9c0 3300 	strd	r3, r3, [r0]
 8003746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800374a:	6083      	str	r3, [r0, #8]
 800374c:	8181      	strh	r1, [r0, #12]
 800374e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003750:	81c2      	strh	r2, [r0, #14]
 8003752:	6183      	str	r3, [r0, #24]
 8003754:	4619      	mov	r1, r3
 8003756:	2208      	movs	r2, #8
 8003758:	305c      	adds	r0, #92	@ 0x5c
 800375a:	f000 f921 	bl	80039a0 <memset>
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <std+0x58>)
 8003760:	6263      	str	r3, [r4, #36]	@ 0x24
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <std+0x5c>)
 8003764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <std+0x60>)
 8003768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <std+0x64>)
 800376c:	6323      	str	r3, [r4, #48]	@ 0x30
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <std+0x68>)
 8003770:	6224      	str	r4, [r4, #32]
 8003772:	429c      	cmp	r4, r3
 8003774:	d006      	beq.n	8003784 <std+0x48>
 8003776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800377a:	4294      	cmp	r4, r2
 800377c:	d002      	beq.n	8003784 <std+0x48>
 800377e:	33d0      	adds	r3, #208	@ 0xd0
 8003780:	429c      	cmp	r4, r3
 8003782:	d105      	bne.n	8003790 <std+0x54>
 8003784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800378c:	f000 b93a 	b.w	8003a04 <__retarget_lock_init_recursive>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	bf00      	nop
 8003794:	0800425d 	.word	0x0800425d
 8003798:	0800427f 	.word	0x0800427f
 800379c:	080042b7 	.word	0x080042b7
 80037a0:	080042db 	.word	0x080042db
 80037a4:	2000012c 	.word	0x2000012c

080037a8 <stdio_exit_handler>:
 80037a8:	4a02      	ldr	r2, [pc, #8]	@ (80037b4 <stdio_exit_handler+0xc>)
 80037aa:	4903      	ldr	r1, [pc, #12]	@ (80037b8 <stdio_exit_handler+0x10>)
 80037ac:	4803      	ldr	r0, [pc, #12]	@ (80037bc <stdio_exit_handler+0x14>)
 80037ae:	f000 b869 	b.w	8003884 <_fwalk_sglue>
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	080041f5 	.word	0x080041f5
 80037bc:	2000001c 	.word	0x2000001c

080037c0 <cleanup_stdio>:
 80037c0:	6841      	ldr	r1, [r0, #4]
 80037c2:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <cleanup_stdio+0x34>)
 80037c4:	4299      	cmp	r1, r3
 80037c6:	b510      	push	{r4, lr}
 80037c8:	4604      	mov	r4, r0
 80037ca:	d001      	beq.n	80037d0 <cleanup_stdio+0x10>
 80037cc:	f000 fd12 	bl	80041f4 <_fflush_r>
 80037d0:	68a1      	ldr	r1, [r4, #8]
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <cleanup_stdio+0x38>)
 80037d4:	4299      	cmp	r1, r3
 80037d6:	d002      	beq.n	80037de <cleanup_stdio+0x1e>
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 fd0b 	bl	80041f4 <_fflush_r>
 80037de:	68e1      	ldr	r1, [r4, #12]
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <cleanup_stdio+0x3c>)
 80037e2:	4299      	cmp	r1, r3
 80037e4:	d004      	beq.n	80037f0 <cleanup_stdio+0x30>
 80037e6:	4620      	mov	r0, r4
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ec:	f000 bd02 	b.w	80041f4 <_fflush_r>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	2000012c 	.word	0x2000012c
 80037f8:	20000194 	.word	0x20000194
 80037fc:	200001fc 	.word	0x200001fc

08003800 <global_stdio_init.part.0>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <global_stdio_init.part.0+0x30>)
 8003804:	4c0b      	ldr	r4, [pc, #44]	@ (8003834 <global_stdio_init.part.0+0x34>)
 8003806:	4a0c      	ldr	r2, [pc, #48]	@ (8003838 <global_stdio_init.part.0+0x38>)
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	4620      	mov	r0, r4
 800380c:	2200      	movs	r2, #0
 800380e:	2104      	movs	r1, #4
 8003810:	f7ff ff94 	bl	800373c <std>
 8003814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003818:	2201      	movs	r2, #1
 800381a:	2109      	movs	r1, #9
 800381c:	f7ff ff8e 	bl	800373c <std>
 8003820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003824:	2202      	movs	r2, #2
 8003826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382a:	2112      	movs	r1, #18
 800382c:	f7ff bf86 	b.w	800373c <std>
 8003830:	20000264 	.word	0x20000264
 8003834:	2000012c 	.word	0x2000012c
 8003838:	080037a9 	.word	0x080037a9

0800383c <__sfp_lock_acquire>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__sfp_lock_acquire+0x8>)
 800383e:	f000 b8e2 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 8003842:	bf00      	nop
 8003844:	20000269 	.word	0x20000269

08003848 <__sfp_lock_release>:
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <__sfp_lock_release+0x8>)
 800384a:	f000 b8dd 	b.w	8003a08 <__retarget_lock_release_recursive>
 800384e:	bf00      	nop
 8003850:	20000269 	.word	0x20000269

08003854 <__sinit>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	f7ff fff0 	bl	800383c <__sfp_lock_acquire>
 800385c:	6a23      	ldr	r3, [r4, #32]
 800385e:	b11b      	cbz	r3, 8003868 <__sinit+0x14>
 8003860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003864:	f7ff bff0 	b.w	8003848 <__sfp_lock_release>
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <__sinit+0x28>)
 800386a:	6223      	str	r3, [r4, #32]
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <__sinit+0x2c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f5      	bne.n	8003860 <__sinit+0xc>
 8003874:	f7ff ffc4 	bl	8003800 <global_stdio_init.part.0>
 8003878:	e7f2      	b.n	8003860 <__sinit+0xc>
 800387a:	bf00      	nop
 800387c:	080037c1 	.word	0x080037c1
 8003880:	20000264 	.word	0x20000264

08003884 <_fwalk_sglue>:
 8003884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003888:	4607      	mov	r7, r0
 800388a:	4688      	mov	r8, r1
 800388c:	4614      	mov	r4, r2
 800388e:	2600      	movs	r6, #0
 8003890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003894:	f1b9 0901 	subs.w	r9, r9, #1
 8003898:	d505      	bpl.n	80038a6 <_fwalk_sglue+0x22>
 800389a:	6824      	ldr	r4, [r4, #0]
 800389c:	2c00      	cmp	r4, #0
 800389e:	d1f7      	bne.n	8003890 <_fwalk_sglue+0xc>
 80038a0:	4630      	mov	r0, r6
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d907      	bls.n	80038bc <_fwalk_sglue+0x38>
 80038ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b0:	3301      	adds	r3, #1
 80038b2:	d003      	beq.n	80038bc <_fwalk_sglue+0x38>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	4306      	orrs	r6, r0
 80038bc:	3568      	adds	r5, #104	@ 0x68
 80038be:	e7e9      	b.n	8003894 <_fwalk_sglue+0x10>

080038c0 <iprintf>:
 80038c0:	b40f      	push	{r0, r1, r2, r3}
 80038c2:	b507      	push	{r0, r1, r2, lr}
 80038c4:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <iprintf+0x20>)
 80038c6:	ab04      	add	r3, sp, #16
 80038c8:	6808      	ldr	r0, [r1, #0]
 80038ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80038ce:	6881      	ldr	r1, [r0, #8]
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	f000 f8c3 	bl	8003a5c <_vfiprintf_r>
 80038d6:	b003      	add	sp, #12
 80038d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038dc:	b004      	add	sp, #16
 80038de:	4770      	bx	lr
 80038e0:	20000018 	.word	0x20000018

080038e4 <_puts_r>:
 80038e4:	6a03      	ldr	r3, [r0, #32]
 80038e6:	b570      	push	{r4, r5, r6, lr}
 80038e8:	6884      	ldr	r4, [r0, #8]
 80038ea:	4605      	mov	r5, r0
 80038ec:	460e      	mov	r6, r1
 80038ee:	b90b      	cbnz	r3, 80038f4 <_puts_r+0x10>
 80038f0:	f7ff ffb0 	bl	8003854 <__sinit>
 80038f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038f6:	07db      	lsls	r3, r3, #31
 80038f8:	d405      	bmi.n	8003906 <_puts_r+0x22>
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	0598      	lsls	r0, r3, #22
 80038fe:	d402      	bmi.n	8003906 <_puts_r+0x22>
 8003900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003902:	f000 f880 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	0719      	lsls	r1, r3, #28
 800390a:	d502      	bpl.n	8003912 <_puts_r+0x2e>
 800390c:	6923      	ldr	r3, [r4, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d135      	bne.n	800397e <_puts_r+0x9a>
 8003912:	4621      	mov	r1, r4
 8003914:	4628      	mov	r0, r5
 8003916:	f000 fd23 	bl	8004360 <__swsetup_r>
 800391a:	b380      	cbz	r0, 800397e <_puts_r+0x9a>
 800391c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003922:	07da      	lsls	r2, r3, #31
 8003924:	d405      	bmi.n	8003932 <_puts_r+0x4e>
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	059b      	lsls	r3, r3, #22
 800392a:	d402      	bmi.n	8003932 <_puts_r+0x4e>
 800392c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800392e:	f000 f86b 	bl	8003a08 <__retarget_lock_release_recursive>
 8003932:	4628      	mov	r0, r5
 8003934:	bd70      	pop	{r4, r5, r6, pc}
 8003936:	2b00      	cmp	r3, #0
 8003938:	da04      	bge.n	8003944 <_puts_r+0x60>
 800393a:	69a2      	ldr	r2, [r4, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	dc17      	bgt.n	8003970 <_puts_r+0x8c>
 8003940:	290a      	cmp	r1, #10
 8003942:	d015      	beq.n	8003970 <_puts_r+0x8c>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	6022      	str	r2, [r4, #0]
 800394a:	7019      	strb	r1, [r3, #0]
 800394c:	68a3      	ldr	r3, [r4, #8]
 800394e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003952:	3b01      	subs	r3, #1
 8003954:	60a3      	str	r3, [r4, #8]
 8003956:	2900      	cmp	r1, #0
 8003958:	d1ed      	bne.n	8003936 <_puts_r+0x52>
 800395a:	2b00      	cmp	r3, #0
 800395c:	da11      	bge.n	8003982 <_puts_r+0x9e>
 800395e:	4622      	mov	r2, r4
 8003960:	210a      	movs	r1, #10
 8003962:	4628      	mov	r0, r5
 8003964:	f000 fcbd 	bl	80042e2 <__swbuf_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d0d7      	beq.n	800391c <_puts_r+0x38>
 800396c:	250a      	movs	r5, #10
 800396e:	e7d7      	b.n	8003920 <_puts_r+0x3c>
 8003970:	4622      	mov	r2, r4
 8003972:	4628      	mov	r0, r5
 8003974:	f000 fcb5 	bl	80042e2 <__swbuf_r>
 8003978:	3001      	adds	r0, #1
 800397a:	d1e7      	bne.n	800394c <_puts_r+0x68>
 800397c:	e7ce      	b.n	800391c <_puts_r+0x38>
 800397e:	3e01      	subs	r6, #1
 8003980:	e7e4      	b.n	800394c <_puts_r+0x68>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	6022      	str	r2, [r4, #0]
 8003988:	220a      	movs	r2, #10
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e7ee      	b.n	800396c <_puts_r+0x88>
	...

08003990 <puts>:
 8003990:	4b02      	ldr	r3, [pc, #8]	@ (800399c <puts+0xc>)
 8003992:	4601      	mov	r1, r0
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f7ff bfa5 	b.w	80038e4 <_puts_r>
 800399a:	bf00      	nop
 800399c:	20000018 	.word	0x20000018

080039a0 <memset>:
 80039a0:	4402      	add	r2, r0
 80039a2:	4603      	mov	r3, r0
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d100      	bne.n	80039aa <memset+0xa>
 80039a8:	4770      	bx	lr
 80039aa:	f803 1b01 	strb.w	r1, [r3], #1
 80039ae:	e7f9      	b.n	80039a4 <memset+0x4>

080039b0 <__errno>:
 80039b0:	4b01      	ldr	r3, [pc, #4]	@ (80039b8 <__errno+0x8>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000018 	.word	0x20000018

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4d0d      	ldr	r5, [pc, #52]	@ (80039f4 <__libc_init_array+0x38>)
 80039c0:	4c0d      	ldr	r4, [pc, #52]	@ (80039f8 <__libc_init_array+0x3c>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	2600      	movs	r6, #0
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	4d0b      	ldr	r5, [pc, #44]	@ (80039fc <__libc_init_array+0x40>)
 80039ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003a00 <__libc_init_array+0x44>)
 80039d0:	f000 fe40 	bl	8004654 <_init>
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	2600      	movs	r6, #0
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08004808 	.word	0x08004808
 80039f8:	08004808 	.word	0x08004808
 80039fc:	08004808 	.word	0x08004808
 8003a00:	0800480c 	.word	0x0800480c

08003a04 <__retarget_lock_init_recursive>:
 8003a04:	4770      	bx	lr

08003a06 <__retarget_lock_acquire_recursive>:
 8003a06:	4770      	bx	lr

08003a08 <__retarget_lock_release_recursive>:
 8003a08:	4770      	bx	lr

08003a0a <__sfputc_r>:
 8003a0a:	6893      	ldr	r3, [r2, #8]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	b410      	push	{r4}
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	da08      	bge.n	8003a28 <__sfputc_r+0x1e>
 8003a16:	6994      	ldr	r4, [r2, #24]
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	db01      	blt.n	8003a20 <__sfputc_r+0x16>
 8003a1c:	290a      	cmp	r1, #10
 8003a1e:	d103      	bne.n	8003a28 <__sfputc_r+0x1e>
 8003a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a24:	f000 bc5d 	b.w	80042e2 <__swbuf_r>
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	1c58      	adds	r0, r3, #1
 8003a2c:	6010      	str	r0, [r2, #0]
 8003a2e:	7019      	strb	r1, [r3, #0]
 8003a30:	4608      	mov	r0, r1
 8003a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <__sfputs_r>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	460f      	mov	r7, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	18d5      	adds	r5, r2, r3
 8003a42:	42ac      	cmp	r4, r5
 8003a44:	d101      	bne.n	8003a4a <__sfputs_r+0x12>
 8003a46:	2000      	movs	r0, #0
 8003a48:	e007      	b.n	8003a5a <__sfputs_r+0x22>
 8003a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4e:	463a      	mov	r2, r7
 8003a50:	4630      	mov	r0, r6
 8003a52:	f7ff ffda 	bl	8003a0a <__sfputc_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d1f3      	bne.n	8003a42 <__sfputs_r+0xa>
 8003a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a5c <_vfiprintf_r>:
 8003a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a60:	460d      	mov	r5, r1
 8003a62:	b09d      	sub	sp, #116	@ 0x74
 8003a64:	4614      	mov	r4, r2
 8003a66:	4698      	mov	r8, r3
 8003a68:	4606      	mov	r6, r0
 8003a6a:	b118      	cbz	r0, 8003a74 <_vfiprintf_r+0x18>
 8003a6c:	6a03      	ldr	r3, [r0, #32]
 8003a6e:	b90b      	cbnz	r3, 8003a74 <_vfiprintf_r+0x18>
 8003a70:	f7ff fef0 	bl	8003854 <__sinit>
 8003a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a76:	07d9      	lsls	r1, r3, #31
 8003a78:	d405      	bmi.n	8003a86 <_vfiprintf_r+0x2a>
 8003a7a:	89ab      	ldrh	r3, [r5, #12]
 8003a7c:	059a      	lsls	r2, r3, #22
 8003a7e:	d402      	bmi.n	8003a86 <_vfiprintf_r+0x2a>
 8003a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a82:	f7ff ffc0 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003a86:	89ab      	ldrh	r3, [r5, #12]
 8003a88:	071b      	lsls	r3, r3, #28
 8003a8a:	d501      	bpl.n	8003a90 <_vfiprintf_r+0x34>
 8003a8c:	692b      	ldr	r3, [r5, #16]
 8003a8e:	b99b      	cbnz	r3, 8003ab8 <_vfiprintf_r+0x5c>
 8003a90:	4629      	mov	r1, r5
 8003a92:	4630      	mov	r0, r6
 8003a94:	f000 fc64 	bl	8004360 <__swsetup_r>
 8003a98:	b170      	cbz	r0, 8003ab8 <_vfiprintf_r+0x5c>
 8003a9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a9c:	07dc      	lsls	r4, r3, #31
 8003a9e:	d504      	bpl.n	8003aaa <_vfiprintf_r+0x4e>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa4:	b01d      	add	sp, #116	@ 0x74
 8003aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	0598      	lsls	r0, r3, #22
 8003aae:	d4f7      	bmi.n	8003aa0 <_vfiprintf_r+0x44>
 8003ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ab2:	f7ff ffa9 	bl	8003a08 <__retarget_lock_release_recursive>
 8003ab6:	e7f3      	b.n	8003aa0 <_vfiprintf_r+0x44>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8003abc:	2320      	movs	r3, #32
 8003abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ac6:	2330      	movs	r3, #48	@ 0x30
 8003ac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c78 <_vfiprintf_r+0x21c>
 8003acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ad0:	f04f 0901 	mov.w	r9, #1
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	469a      	mov	sl, r3
 8003ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003adc:	b10a      	cbz	r2, 8003ae2 <_vfiprintf_r+0x86>
 8003ade:	2a25      	cmp	r2, #37	@ 0x25
 8003ae0:	d1f9      	bne.n	8003ad6 <_vfiprintf_r+0x7a>
 8003ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ae6:	d00b      	beq.n	8003b00 <_vfiprintf_r+0xa4>
 8003ae8:	465b      	mov	r3, fp
 8003aea:	4622      	mov	r2, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	4630      	mov	r0, r6
 8003af0:	f7ff ffa2 	bl	8003a38 <__sfputs_r>
 8003af4:	3001      	adds	r0, #1
 8003af6:	f000 80a7 	beq.w	8003c48 <_vfiprintf_r+0x1ec>
 8003afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003afc:	445a      	add	r2, fp
 8003afe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b00:	f89a 3000 	ldrb.w	r3, [sl]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 809f 	beq.w	8003c48 <_vfiprintf_r+0x1ec>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b14:	f10a 0a01 	add.w	sl, sl, #1
 8003b18:	9304      	str	r3, [sp, #16]
 8003b1a:	9307      	str	r3, [sp, #28]
 8003b1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b20:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b22:	4654      	mov	r4, sl
 8003b24:	2205      	movs	r2, #5
 8003b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b2a:	4853      	ldr	r0, [pc, #332]	@ (8003c78 <_vfiprintf_r+0x21c>)
 8003b2c:	f7fc fb70 	bl	8000210 <memchr>
 8003b30:	9a04      	ldr	r2, [sp, #16]
 8003b32:	b9d8      	cbnz	r0, 8003b6c <_vfiprintf_r+0x110>
 8003b34:	06d1      	lsls	r1, r2, #27
 8003b36:	bf44      	itt	mi
 8003b38:	2320      	movmi	r3, #32
 8003b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b3e:	0713      	lsls	r3, r2, #28
 8003b40:	bf44      	itt	mi
 8003b42:	232b      	movmi	r3, #43	@ 0x2b
 8003b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b48:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b4e:	d015      	beq.n	8003b7c <_vfiprintf_r+0x120>
 8003b50:	9a07      	ldr	r2, [sp, #28]
 8003b52:	4654      	mov	r4, sl
 8003b54:	2000      	movs	r0, #0
 8003b56:	f04f 0c0a 	mov.w	ip, #10
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b60:	3b30      	subs	r3, #48	@ 0x30
 8003b62:	2b09      	cmp	r3, #9
 8003b64:	d94b      	bls.n	8003bfe <_vfiprintf_r+0x1a2>
 8003b66:	b1b0      	cbz	r0, 8003b96 <_vfiprintf_r+0x13a>
 8003b68:	9207      	str	r2, [sp, #28]
 8003b6a:	e014      	b.n	8003b96 <_vfiprintf_r+0x13a>
 8003b6c:	eba0 0308 	sub.w	r3, r0, r8
 8003b70:	fa09 f303 	lsl.w	r3, r9, r3
 8003b74:	4313      	orrs	r3, r2
 8003b76:	9304      	str	r3, [sp, #16]
 8003b78:	46a2      	mov	sl, r4
 8003b7a:	e7d2      	b.n	8003b22 <_vfiprintf_r+0xc6>
 8003b7c:	9b03      	ldr	r3, [sp, #12]
 8003b7e:	1d19      	adds	r1, r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	9103      	str	r1, [sp, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bfbb      	ittet	lt
 8003b88:	425b      	neglt	r3, r3
 8003b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b8e:	9307      	strge	r3, [sp, #28]
 8003b90:	9307      	strlt	r3, [sp, #28]
 8003b92:	bfb8      	it	lt
 8003b94:	9204      	strlt	r2, [sp, #16]
 8003b96:	7823      	ldrb	r3, [r4, #0]
 8003b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b9a:	d10a      	bne.n	8003bb2 <_vfiprintf_r+0x156>
 8003b9c:	7863      	ldrb	r3, [r4, #1]
 8003b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba0:	d132      	bne.n	8003c08 <_vfiprintf_r+0x1ac>
 8003ba2:	9b03      	ldr	r3, [sp, #12]
 8003ba4:	1d1a      	adds	r2, r3, #4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	9203      	str	r2, [sp, #12]
 8003baa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bae:	3402      	adds	r4, #2
 8003bb0:	9305      	str	r3, [sp, #20]
 8003bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c88 <_vfiprintf_r+0x22c>
 8003bb6:	7821      	ldrb	r1, [r4, #0]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4650      	mov	r0, sl
 8003bbc:	f7fc fb28 	bl	8000210 <memchr>
 8003bc0:	b138      	cbz	r0, 8003bd2 <_vfiprintf_r+0x176>
 8003bc2:	9b04      	ldr	r3, [sp, #16]
 8003bc4:	eba0 000a 	sub.w	r0, r0, sl
 8003bc8:	2240      	movs	r2, #64	@ 0x40
 8003bca:	4082      	lsls	r2, r0
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	3401      	adds	r4, #1
 8003bd0:	9304      	str	r3, [sp, #16]
 8003bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd6:	4829      	ldr	r0, [pc, #164]	@ (8003c7c <_vfiprintf_r+0x220>)
 8003bd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bdc:	2206      	movs	r2, #6
 8003bde:	f7fc fb17 	bl	8000210 <memchr>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d03f      	beq.n	8003c66 <_vfiprintf_r+0x20a>
 8003be6:	4b26      	ldr	r3, [pc, #152]	@ (8003c80 <_vfiprintf_r+0x224>)
 8003be8:	bb1b      	cbnz	r3, 8003c32 <_vfiprintf_r+0x1d6>
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	3307      	adds	r3, #7
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	9303      	str	r3, [sp, #12]
 8003bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf8:	443b      	add	r3, r7
 8003bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bfc:	e76a      	b.n	8003ad4 <_vfiprintf_r+0x78>
 8003bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c02:	460c      	mov	r4, r1
 8003c04:	2001      	movs	r0, #1
 8003c06:	e7a8      	b.n	8003b5a <_vfiprintf_r+0xfe>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	3401      	adds	r4, #1
 8003c0c:	9305      	str	r3, [sp, #20]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 0c0a 	mov.w	ip, #10
 8003c14:	4620      	mov	r0, r4
 8003c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c1a:	3a30      	subs	r2, #48	@ 0x30
 8003c1c:	2a09      	cmp	r2, #9
 8003c1e:	d903      	bls.n	8003c28 <_vfiprintf_r+0x1cc>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0c6      	beq.n	8003bb2 <_vfiprintf_r+0x156>
 8003c24:	9105      	str	r1, [sp, #20]
 8003c26:	e7c4      	b.n	8003bb2 <_vfiprintf_r+0x156>
 8003c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e7f0      	b.n	8003c14 <_vfiprintf_r+0x1b8>
 8003c32:	ab03      	add	r3, sp, #12
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	462a      	mov	r2, r5
 8003c38:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <_vfiprintf_r+0x228>)
 8003c3a:	a904      	add	r1, sp, #16
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f3af 8000 	nop.w
 8003c42:	4607      	mov	r7, r0
 8003c44:	1c78      	adds	r0, r7, #1
 8003c46:	d1d6      	bne.n	8003bf6 <_vfiprintf_r+0x19a>
 8003c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c4a:	07d9      	lsls	r1, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_vfiprintf_r+0x1fe>
 8003c4e:	89ab      	ldrh	r3, [r5, #12]
 8003c50:	059a      	lsls	r2, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_vfiprintf_r+0x1fe>
 8003c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c56:	f7ff fed7 	bl	8003a08 <__retarget_lock_release_recursive>
 8003c5a:	89ab      	ldrh	r3, [r5, #12]
 8003c5c:	065b      	lsls	r3, r3, #25
 8003c5e:	f53f af1f 	bmi.w	8003aa0 <_vfiprintf_r+0x44>
 8003c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c64:	e71e      	b.n	8003aa4 <_vfiprintf_r+0x48>
 8003c66:	ab03      	add	r3, sp, #12
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	462a      	mov	r2, r5
 8003c6c:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <_vfiprintf_r+0x228>)
 8003c6e:	a904      	add	r1, sp, #16
 8003c70:	4630      	mov	r0, r6
 8003c72:	f000 f91b 	bl	8003eac <_printf_i>
 8003c76:	e7e4      	b.n	8003c42 <_vfiprintf_r+0x1e6>
 8003c78:	080047cc 	.word	0x080047cc
 8003c7c:	080047d6 	.word	0x080047d6
 8003c80:	00000000 	.word	0x00000000
 8003c84:	08003a39 	.word	0x08003a39
 8003c88:	080047d2 	.word	0x080047d2

08003c8c <sbrk_aligned>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ccc <sbrk_aligned+0x40>)
 8003c90:	460c      	mov	r4, r1
 8003c92:	6831      	ldr	r1, [r6, #0]
 8003c94:	4605      	mov	r5, r0
 8003c96:	b911      	cbnz	r1, 8003c9e <sbrk_aligned+0x12>
 8003c98:	f000 fc70 	bl	800457c <_sbrk_r>
 8003c9c:	6030      	str	r0, [r6, #0]
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 fc6b 	bl	800457c <_sbrk_r>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	d103      	bne.n	8003cb2 <sbrk_aligned+0x26>
 8003caa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003cae:	4620      	mov	r0, r4
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
 8003cb2:	1cc4      	adds	r4, r0, #3
 8003cb4:	f024 0403 	bic.w	r4, r4, #3
 8003cb8:	42a0      	cmp	r0, r4
 8003cba:	d0f8      	beq.n	8003cae <sbrk_aligned+0x22>
 8003cbc:	1a21      	subs	r1, r4, r0
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 fc5c 	bl	800457c <_sbrk_r>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d1f2      	bne.n	8003cae <sbrk_aligned+0x22>
 8003cc8:	e7ef      	b.n	8003caa <sbrk_aligned+0x1e>
 8003cca:	bf00      	nop
 8003ccc:	2000026c 	.word	0x2000026c

08003cd0 <_malloc_r>:
 8003cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	1ccd      	adds	r5, r1, #3
 8003cd6:	f025 0503 	bic.w	r5, r5, #3
 8003cda:	3508      	adds	r5, #8
 8003cdc:	2d0c      	cmp	r5, #12
 8003cde:	bf38      	it	cc
 8003ce0:	250c      	movcc	r5, #12
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	db01      	blt.n	8003cec <_malloc_r+0x1c>
 8003ce8:	42a9      	cmp	r1, r5
 8003cea:	d904      	bls.n	8003cf6 <_malloc_r+0x26>
 8003cec:	230c      	movs	r3, #12
 8003cee:	6033      	str	r3, [r6, #0]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dcc <_malloc_r+0xfc>
 8003cfa:	f000 faa3 	bl	8004244 <__malloc_lock>
 8003cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8003d02:	461c      	mov	r4, r3
 8003d04:	bb44      	cbnz	r4, 8003d58 <_malloc_r+0x88>
 8003d06:	4629      	mov	r1, r5
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f7ff ffbf 	bl	8003c8c <sbrk_aligned>
 8003d0e:	1c43      	adds	r3, r0, #1
 8003d10:	4604      	mov	r4, r0
 8003d12:	d158      	bne.n	8003dc6 <_malloc_r+0xf6>
 8003d14:	f8d8 4000 	ldr.w	r4, [r8]
 8003d18:	4627      	mov	r7, r4
 8003d1a:	2f00      	cmp	r7, #0
 8003d1c:	d143      	bne.n	8003da6 <_malloc_r+0xd6>
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	d04b      	beq.n	8003dba <_malloc_r+0xea>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	4639      	mov	r1, r7
 8003d26:	4630      	mov	r0, r6
 8003d28:	eb04 0903 	add.w	r9, r4, r3
 8003d2c:	f000 fc26 	bl	800457c <_sbrk_r>
 8003d30:	4581      	cmp	r9, r0
 8003d32:	d142      	bne.n	8003dba <_malloc_r+0xea>
 8003d34:	6821      	ldr	r1, [r4, #0]
 8003d36:	1a6d      	subs	r5, r5, r1
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f7ff ffa6 	bl	8003c8c <sbrk_aligned>
 8003d40:	3001      	adds	r0, #1
 8003d42:	d03a      	beq.n	8003dba <_malloc_r+0xea>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	442b      	add	r3, r5
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	bb62      	cbnz	r2, 8003dac <_malloc_r+0xdc>
 8003d52:	f8c8 7000 	str.w	r7, [r8]
 8003d56:	e00f      	b.n	8003d78 <_malloc_r+0xa8>
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	1b52      	subs	r2, r2, r5
 8003d5c:	d420      	bmi.n	8003da0 <_malloc_r+0xd0>
 8003d5e:	2a0b      	cmp	r2, #11
 8003d60:	d917      	bls.n	8003d92 <_malloc_r+0xc2>
 8003d62:	1961      	adds	r1, r4, r5
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	6025      	str	r5, [r4, #0]
 8003d68:	bf18      	it	ne
 8003d6a:	6059      	strne	r1, [r3, #4]
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	bf08      	it	eq
 8003d70:	f8c8 1000 	streq.w	r1, [r8]
 8003d74:	5162      	str	r2, [r4, r5]
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f000 fa69 	bl	8004250 <__malloc_unlock>
 8003d7e:	f104 000b 	add.w	r0, r4, #11
 8003d82:	1d23      	adds	r3, r4, #4
 8003d84:	f020 0007 	bic.w	r0, r0, #7
 8003d88:	1ac2      	subs	r2, r0, r3
 8003d8a:	bf1c      	itt	ne
 8003d8c:	1a1b      	subne	r3, r3, r0
 8003d8e:	50a3      	strne	r3, [r4, r2]
 8003d90:	e7af      	b.n	8003cf2 <_malloc_r+0x22>
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	bf0c      	ite	eq
 8003d98:	f8c8 2000 	streq.w	r2, [r8]
 8003d9c:	605a      	strne	r2, [r3, #4]
 8003d9e:	e7eb      	b.n	8003d78 <_malloc_r+0xa8>
 8003da0:	4623      	mov	r3, r4
 8003da2:	6864      	ldr	r4, [r4, #4]
 8003da4:	e7ae      	b.n	8003d04 <_malloc_r+0x34>
 8003da6:	463c      	mov	r4, r7
 8003da8:	687f      	ldr	r7, [r7, #4]
 8003daa:	e7b6      	b.n	8003d1a <_malloc_r+0x4a>
 8003dac:	461a      	mov	r2, r3
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	d1fb      	bne.n	8003dac <_malloc_r+0xdc>
 8003db4:	2300      	movs	r3, #0
 8003db6:	6053      	str	r3, [r2, #4]
 8003db8:	e7de      	b.n	8003d78 <_malloc_r+0xa8>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f000 fa46 	bl	8004250 <__malloc_unlock>
 8003dc4:	e794      	b.n	8003cf0 <_malloc_r+0x20>
 8003dc6:	6005      	str	r5, [r0, #0]
 8003dc8:	e7d6      	b.n	8003d78 <_malloc_r+0xa8>
 8003dca:	bf00      	nop
 8003dcc:	20000270 	.word	0x20000270

08003dd0 <_printf_common>:
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	4616      	mov	r6, r2
 8003dd6:	4698      	mov	r8, r3
 8003dd8:	688a      	ldr	r2, [r1, #8]
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	bfb8      	it	lt
 8003de4:	4613      	movlt	r3, r2
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dec:	4607      	mov	r7, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	b10a      	cbz	r2, 8003df6 <_printf_common+0x26>
 8003df2:	3301      	adds	r3, #1
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	0699      	lsls	r1, r3, #26
 8003dfa:	bf42      	ittt	mi
 8003dfc:	6833      	ldrmi	r3, [r6, #0]
 8003dfe:	3302      	addmi	r3, #2
 8003e00:	6033      	strmi	r3, [r6, #0]
 8003e02:	6825      	ldr	r5, [r4, #0]
 8003e04:	f015 0506 	ands.w	r5, r5, #6
 8003e08:	d106      	bne.n	8003e18 <_printf_common+0x48>
 8003e0a:	f104 0a19 	add.w	sl, r4, #25
 8003e0e:	68e3      	ldr	r3, [r4, #12]
 8003e10:	6832      	ldr	r2, [r6, #0]
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	42ab      	cmp	r3, r5
 8003e16:	dc26      	bgt.n	8003e66 <_printf_common+0x96>
 8003e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	3b00      	subs	r3, #0
 8003e20:	bf18      	it	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	0692      	lsls	r2, r2, #26
 8003e26:	d42b      	bmi.n	8003e80 <_printf_common+0xb0>
 8003e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	4638      	mov	r0, r7
 8003e30:	47c8      	blx	r9
 8003e32:	3001      	adds	r0, #1
 8003e34:	d01e      	beq.n	8003e74 <_printf_common+0xa4>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	bf02      	ittt	eq
 8003e42:	68e5      	ldreq	r5, [r4, #12]
 8003e44:	6833      	ldreq	r3, [r6, #0]
 8003e46:	1aed      	subeq	r5, r5, r3
 8003e48:	68a3      	ldr	r3, [r4, #8]
 8003e4a:	bf0c      	ite	eq
 8003e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e50:	2500      	movne	r5, #0
 8003e52:	4293      	cmp	r3, r2
 8003e54:	bfc4      	itt	gt
 8003e56:	1a9b      	subgt	r3, r3, r2
 8003e58:	18ed      	addgt	r5, r5, r3
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	341a      	adds	r4, #26
 8003e5e:	42b5      	cmp	r5, r6
 8003e60:	d11a      	bne.n	8003e98 <_printf_common+0xc8>
 8003e62:	2000      	movs	r0, #0
 8003e64:	e008      	b.n	8003e78 <_printf_common+0xa8>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4652      	mov	r2, sl
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	47c8      	blx	r9
 8003e70:	3001      	adds	r0, #1
 8003e72:	d103      	bne.n	8003e7c <_printf_common+0xac>
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7c:	3501      	adds	r5, #1
 8003e7e:	e7c6      	b.n	8003e0e <_printf_common+0x3e>
 8003e80:	18e1      	adds	r1, r4, r3
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	2030      	movs	r0, #48	@ 0x30
 8003e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e8a:	4422      	add	r2, r4
 8003e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e94:	3302      	adds	r3, #2
 8003e96:	e7c7      	b.n	8003e28 <_printf_common+0x58>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	47c8      	blx	r9
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d0e6      	beq.n	8003e74 <_printf_common+0xa4>
 8003ea6:	3601      	adds	r6, #1
 8003ea8:	e7d9      	b.n	8003e5e <_printf_common+0x8e>
	...

08003eac <_printf_i>:
 8003eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	7e0f      	ldrb	r7, [r1, #24]
 8003eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eb4:	2f78      	cmp	r7, #120	@ 0x78
 8003eb6:	4691      	mov	r9, r2
 8003eb8:	4680      	mov	r8, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	469a      	mov	sl, r3
 8003ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ec2:	d807      	bhi.n	8003ed4 <_printf_i+0x28>
 8003ec4:	2f62      	cmp	r7, #98	@ 0x62
 8003ec6:	d80a      	bhi.n	8003ede <_printf_i+0x32>
 8003ec8:	2f00      	cmp	r7, #0
 8003eca:	f000 80d2 	beq.w	8004072 <_printf_i+0x1c6>
 8003ece:	2f58      	cmp	r7, #88	@ 0x58
 8003ed0:	f000 80b9 	beq.w	8004046 <_printf_i+0x19a>
 8003ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003edc:	e03a      	b.n	8003f54 <_printf_i+0xa8>
 8003ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ee2:	2b15      	cmp	r3, #21
 8003ee4:	d8f6      	bhi.n	8003ed4 <_printf_i+0x28>
 8003ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8003eec <_printf_i+0x40>)
 8003ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003ed5 	.word	0x08003ed5
 8003ef8:	08003ed5 	.word	0x08003ed5
 8003efc:	08003ed5 	.word	0x08003ed5
 8003f00:	08003ed5 	.word	0x08003ed5
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003ed5 	.word	0x08003ed5
 8003f0c:	08003ed5 	.word	0x08003ed5
 8003f10:	08003ed5 	.word	0x08003ed5
 8003f14:	08003ed5 	.word	0x08003ed5
 8003f18:	08004059 	.word	0x08004059
 8003f1c:	08003f83 	.word	0x08003f83
 8003f20:	08004013 	.word	0x08004013
 8003f24:	08003ed5 	.word	0x08003ed5
 8003f28:	08003ed5 	.word	0x08003ed5
 8003f2c:	0800407b 	.word	0x0800407b
 8003f30:	08003ed5 	.word	0x08003ed5
 8003f34:	08003f83 	.word	0x08003f83
 8003f38:	08003ed5 	.word	0x08003ed5
 8003f3c:	08003ed5 	.word	0x08003ed5
 8003f40:	0800401b 	.word	0x0800401b
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6032      	str	r2, [r6, #0]
 8003f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f54:	2301      	movs	r3, #1
 8003f56:	e09d      	b.n	8004094 <_printf_i+0x1e8>
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	1d19      	adds	r1, r3, #4
 8003f5e:	6031      	str	r1, [r6, #0]
 8003f60:	0606      	lsls	r6, r0, #24
 8003f62:	d501      	bpl.n	8003f68 <_printf_i+0xbc>
 8003f64:	681d      	ldr	r5, [r3, #0]
 8003f66:	e003      	b.n	8003f70 <_printf_i+0xc4>
 8003f68:	0645      	lsls	r5, r0, #25
 8003f6a:	d5fb      	bpl.n	8003f64 <_printf_i+0xb8>
 8003f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f70:	2d00      	cmp	r5, #0
 8003f72:	da03      	bge.n	8003f7c <_printf_i+0xd0>
 8003f74:	232d      	movs	r3, #45	@ 0x2d
 8003f76:	426d      	negs	r5, r5
 8003f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7c:	4859      	ldr	r0, [pc, #356]	@ (80040e4 <_printf_i+0x238>)
 8003f7e:	230a      	movs	r3, #10
 8003f80:	e011      	b.n	8003fa6 <_printf_i+0xfa>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	6833      	ldr	r3, [r6, #0]
 8003f86:	0608      	lsls	r0, r1, #24
 8003f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f8c:	d402      	bmi.n	8003f94 <_printf_i+0xe8>
 8003f8e:	0649      	lsls	r1, r1, #25
 8003f90:	bf48      	it	mi
 8003f92:	b2ad      	uxthmi	r5, r5
 8003f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f96:	4853      	ldr	r0, [pc, #332]	@ (80040e4 <_printf_i+0x238>)
 8003f98:	6033      	str	r3, [r6, #0]
 8003f9a:	bf14      	ite	ne
 8003f9c:	230a      	movne	r3, #10
 8003f9e:	2308      	moveq	r3, #8
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fa6:	6866      	ldr	r6, [r4, #4]
 8003fa8:	60a6      	str	r6, [r4, #8]
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	bfa2      	ittt	ge
 8003fae:	6821      	ldrge	r1, [r4, #0]
 8003fb0:	f021 0104 	bicge.w	r1, r1, #4
 8003fb4:	6021      	strge	r1, [r4, #0]
 8003fb6:	b90d      	cbnz	r5, 8003fbc <_printf_i+0x110>
 8003fb8:	2e00      	cmp	r6, #0
 8003fba:	d04b      	beq.n	8004054 <_printf_i+0x1a8>
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8003fc6:	5dc7      	ldrb	r7, [r0, r7]
 8003fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fcc:	462f      	mov	r7, r5
 8003fce:	42bb      	cmp	r3, r7
 8003fd0:	460d      	mov	r5, r1
 8003fd2:	d9f4      	bls.n	8003fbe <_printf_i+0x112>
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d10b      	bne.n	8003ff0 <_printf_i+0x144>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	07df      	lsls	r7, r3, #31
 8003fdc:	d508      	bpl.n	8003ff0 <_printf_i+0x144>
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	6861      	ldr	r1, [r4, #4]
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	bfde      	ittt	le
 8003fe6:	2330      	movle	r3, #48	@ 0x30
 8003fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ff0:	1b92      	subs	r2, r2, r6
 8003ff2:	6122      	str	r2, [r4, #16]
 8003ff4:	f8cd a000 	str.w	sl, [sp]
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	aa03      	add	r2, sp, #12
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4640      	mov	r0, r8
 8004000:	f7ff fee6 	bl	8003dd0 <_printf_common>
 8004004:	3001      	adds	r0, #1
 8004006:	d14a      	bne.n	800409e <_printf_i+0x1f2>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800400c:	b004      	add	sp, #16
 800400e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	f043 0320 	orr.w	r3, r3, #32
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	4833      	ldr	r0, [pc, #204]	@ (80040e8 <_printf_i+0x23c>)
 800401c:	2778      	movs	r7, #120	@ 0x78
 800401e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	6831      	ldr	r1, [r6, #0]
 8004026:	061f      	lsls	r7, r3, #24
 8004028:	f851 5b04 	ldr.w	r5, [r1], #4
 800402c:	d402      	bmi.n	8004034 <_printf_i+0x188>
 800402e:	065f      	lsls	r7, r3, #25
 8004030:	bf48      	it	mi
 8004032:	b2ad      	uxthmi	r5, r5
 8004034:	6031      	str	r1, [r6, #0]
 8004036:	07d9      	lsls	r1, r3, #31
 8004038:	bf44      	itt	mi
 800403a:	f043 0320 	orrmi.w	r3, r3, #32
 800403e:	6023      	strmi	r3, [r4, #0]
 8004040:	b11d      	cbz	r5, 800404a <_printf_i+0x19e>
 8004042:	2310      	movs	r3, #16
 8004044:	e7ac      	b.n	8003fa0 <_printf_i+0xf4>
 8004046:	4827      	ldr	r0, [pc, #156]	@ (80040e4 <_printf_i+0x238>)
 8004048:	e7e9      	b.n	800401e <_printf_i+0x172>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	f023 0320 	bic.w	r3, r3, #32
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	e7f6      	b.n	8004042 <_printf_i+0x196>
 8004054:	4616      	mov	r6, r2
 8004056:	e7bd      	b.n	8003fd4 <_printf_i+0x128>
 8004058:	6833      	ldr	r3, [r6, #0]
 800405a:	6825      	ldr	r5, [r4, #0]
 800405c:	6961      	ldr	r1, [r4, #20]
 800405e:	1d18      	adds	r0, r3, #4
 8004060:	6030      	str	r0, [r6, #0]
 8004062:	062e      	lsls	r6, r5, #24
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	d501      	bpl.n	800406c <_printf_i+0x1c0>
 8004068:	6019      	str	r1, [r3, #0]
 800406a:	e002      	b.n	8004072 <_printf_i+0x1c6>
 800406c:	0668      	lsls	r0, r5, #25
 800406e:	d5fb      	bpl.n	8004068 <_printf_i+0x1bc>
 8004070:	8019      	strh	r1, [r3, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	6123      	str	r3, [r4, #16]
 8004076:	4616      	mov	r6, r2
 8004078:	e7bc      	b.n	8003ff4 <_printf_i+0x148>
 800407a:	6833      	ldr	r3, [r6, #0]
 800407c:	1d1a      	adds	r2, r3, #4
 800407e:	6032      	str	r2, [r6, #0]
 8004080:	681e      	ldr	r6, [r3, #0]
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	2100      	movs	r1, #0
 8004086:	4630      	mov	r0, r6
 8004088:	f7fc f8c2 	bl	8000210 <memchr>
 800408c:	b108      	cbz	r0, 8004092 <_printf_i+0x1e6>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	6060      	str	r0, [r4, #4]
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	2300      	movs	r3, #0
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800409c:	e7aa      	b.n	8003ff4 <_printf_i+0x148>
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	4632      	mov	r2, r6
 80040a2:	4649      	mov	r1, r9
 80040a4:	4640      	mov	r0, r8
 80040a6:	47d0      	blx	sl
 80040a8:	3001      	adds	r0, #1
 80040aa:	d0ad      	beq.n	8004008 <_printf_i+0x15c>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	079b      	lsls	r3, r3, #30
 80040b0:	d413      	bmi.n	80040da <_printf_i+0x22e>
 80040b2:	68e0      	ldr	r0, [r4, #12]
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	4298      	cmp	r0, r3
 80040b8:	bfb8      	it	lt
 80040ba:	4618      	movlt	r0, r3
 80040bc:	e7a6      	b.n	800400c <_printf_i+0x160>
 80040be:	2301      	movs	r3, #1
 80040c0:	4632      	mov	r2, r6
 80040c2:	4649      	mov	r1, r9
 80040c4:	4640      	mov	r0, r8
 80040c6:	47d0      	blx	sl
 80040c8:	3001      	adds	r0, #1
 80040ca:	d09d      	beq.n	8004008 <_printf_i+0x15c>
 80040cc:	3501      	adds	r5, #1
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	9903      	ldr	r1, [sp, #12]
 80040d2:	1a5b      	subs	r3, r3, r1
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	dcf2      	bgt.n	80040be <_printf_i+0x212>
 80040d8:	e7eb      	b.n	80040b2 <_printf_i+0x206>
 80040da:	2500      	movs	r5, #0
 80040dc:	f104 0619 	add.w	r6, r4, #25
 80040e0:	e7f5      	b.n	80040ce <_printf_i+0x222>
 80040e2:	bf00      	nop
 80040e4:	080047dd 	.word	0x080047dd
 80040e8:	080047ee 	.word	0x080047ee

080040ec <__sflush_r>:
 80040ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	0716      	lsls	r6, r2, #28
 80040f6:	4605      	mov	r5, r0
 80040f8:	460c      	mov	r4, r1
 80040fa:	d454      	bmi.n	80041a6 <__sflush_r+0xba>
 80040fc:	684b      	ldr	r3, [r1, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	dc02      	bgt.n	8004108 <__sflush_r+0x1c>
 8004102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	dd48      	ble.n	800419a <__sflush_r+0xae>
 8004108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800410a:	2e00      	cmp	r6, #0
 800410c:	d045      	beq.n	800419a <__sflush_r+0xae>
 800410e:	2300      	movs	r3, #0
 8004110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004114:	682f      	ldr	r7, [r5, #0]
 8004116:	6a21      	ldr	r1, [r4, #32]
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	d030      	beq.n	800417e <__sflush_r+0x92>
 800411c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	0759      	lsls	r1, r3, #29
 8004122:	d505      	bpl.n	8004130 <__sflush_r+0x44>
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800412a:	b10b      	cbz	r3, 8004130 <__sflush_r+0x44>
 800412c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004134:	6a21      	ldr	r1, [r4, #32]
 8004136:	4628      	mov	r0, r5
 8004138:	47b0      	blx	r6
 800413a:	1c43      	adds	r3, r0, #1
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	d106      	bne.n	800414e <__sflush_r+0x62>
 8004140:	6829      	ldr	r1, [r5, #0]
 8004142:	291d      	cmp	r1, #29
 8004144:	d82b      	bhi.n	800419e <__sflush_r+0xb2>
 8004146:	4a2a      	ldr	r2, [pc, #168]	@ (80041f0 <__sflush_r+0x104>)
 8004148:	410a      	asrs	r2, r1
 800414a:	07d6      	lsls	r6, r2, #31
 800414c:	d427      	bmi.n	800419e <__sflush_r+0xb2>
 800414e:	2200      	movs	r2, #0
 8004150:	6062      	str	r2, [r4, #4]
 8004152:	04d9      	lsls	r1, r3, #19
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	d504      	bpl.n	8004164 <__sflush_r+0x78>
 800415a:	1c42      	adds	r2, r0, #1
 800415c:	d101      	bne.n	8004162 <__sflush_r+0x76>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	b903      	cbnz	r3, 8004164 <__sflush_r+0x78>
 8004162:	6560      	str	r0, [r4, #84]	@ 0x54
 8004164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004166:	602f      	str	r7, [r5, #0]
 8004168:	b1b9      	cbz	r1, 800419a <__sflush_r+0xae>
 800416a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800416e:	4299      	cmp	r1, r3
 8004170:	d002      	beq.n	8004178 <__sflush_r+0x8c>
 8004172:	4628      	mov	r0, r5
 8004174:	f000 fa24 	bl	80045c0 <_free_r>
 8004178:	2300      	movs	r3, #0
 800417a:	6363      	str	r3, [r4, #52]	@ 0x34
 800417c:	e00d      	b.n	800419a <__sflush_r+0xae>
 800417e:	2301      	movs	r3, #1
 8004180:	4628      	mov	r0, r5
 8004182:	47b0      	blx	r6
 8004184:	4602      	mov	r2, r0
 8004186:	1c50      	adds	r0, r2, #1
 8004188:	d1c9      	bne.n	800411e <__sflush_r+0x32>
 800418a:	682b      	ldr	r3, [r5, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0c6      	beq.n	800411e <__sflush_r+0x32>
 8004190:	2b1d      	cmp	r3, #29
 8004192:	d001      	beq.n	8004198 <__sflush_r+0xac>
 8004194:	2b16      	cmp	r3, #22
 8004196:	d11e      	bne.n	80041d6 <__sflush_r+0xea>
 8004198:	602f      	str	r7, [r5, #0]
 800419a:	2000      	movs	r0, #0
 800419c:	e022      	b.n	80041e4 <__sflush_r+0xf8>
 800419e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	e01b      	b.n	80041de <__sflush_r+0xf2>
 80041a6:	690f      	ldr	r7, [r1, #16]
 80041a8:	2f00      	cmp	r7, #0
 80041aa:	d0f6      	beq.n	800419a <__sflush_r+0xae>
 80041ac:	0793      	lsls	r3, r2, #30
 80041ae:	680e      	ldr	r6, [r1, #0]
 80041b0:	bf08      	it	eq
 80041b2:	694b      	ldreq	r3, [r1, #20]
 80041b4:	600f      	str	r7, [r1, #0]
 80041b6:	bf18      	it	ne
 80041b8:	2300      	movne	r3, #0
 80041ba:	eba6 0807 	sub.w	r8, r6, r7
 80041be:	608b      	str	r3, [r1, #8]
 80041c0:	f1b8 0f00 	cmp.w	r8, #0
 80041c4:	dde9      	ble.n	800419a <__sflush_r+0xae>
 80041c6:	6a21      	ldr	r1, [r4, #32]
 80041c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041ca:	4643      	mov	r3, r8
 80041cc:	463a      	mov	r2, r7
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b0      	blx	r6
 80041d2:	2800      	cmp	r0, #0
 80041d4:	dc08      	bgt.n	80041e8 <__sflush_r+0xfc>
 80041d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e8:	4407      	add	r7, r0
 80041ea:	eba8 0800 	sub.w	r8, r8, r0
 80041ee:	e7e7      	b.n	80041c0 <__sflush_r+0xd4>
 80041f0:	dfbffffe 	.word	0xdfbffffe

080041f4 <_fflush_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	690b      	ldr	r3, [r1, #16]
 80041f8:	4605      	mov	r5, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	b913      	cbnz	r3, 8004204 <_fflush_r+0x10>
 80041fe:	2500      	movs	r5, #0
 8004200:	4628      	mov	r0, r5
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	b118      	cbz	r0, 800420e <_fflush_r+0x1a>
 8004206:	6a03      	ldr	r3, [r0, #32]
 8004208:	b90b      	cbnz	r3, 800420e <_fflush_r+0x1a>
 800420a:	f7ff fb23 	bl	8003854 <__sinit>
 800420e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f3      	beq.n	80041fe <_fflush_r+0xa>
 8004216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004218:	07d0      	lsls	r0, r2, #31
 800421a:	d404      	bmi.n	8004226 <_fflush_r+0x32>
 800421c:	0599      	lsls	r1, r3, #22
 800421e:	d402      	bmi.n	8004226 <_fflush_r+0x32>
 8004220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004222:	f7ff fbf0 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8004226:	4628      	mov	r0, r5
 8004228:	4621      	mov	r1, r4
 800422a:	f7ff ff5f 	bl	80040ec <__sflush_r>
 800422e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004230:	07da      	lsls	r2, r3, #31
 8004232:	4605      	mov	r5, r0
 8004234:	d4e4      	bmi.n	8004200 <_fflush_r+0xc>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	059b      	lsls	r3, r3, #22
 800423a:	d4e1      	bmi.n	8004200 <_fflush_r+0xc>
 800423c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800423e:	f7ff fbe3 	bl	8003a08 <__retarget_lock_release_recursive>
 8004242:	e7dd      	b.n	8004200 <_fflush_r+0xc>

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__malloc_lock+0x8>)
 8004246:	f7ff bbde 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	20000268 	.word	0x20000268

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	@ (8004258 <__malloc_unlock+0x8>)
 8004252:	f7ff bbd9 	b.w	8003a08 <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	20000268 	.word	0x20000268

0800425c <__sread>:
 800425c:	b510      	push	{r4, lr}
 800425e:	460c      	mov	r4, r1
 8004260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004264:	f000 f978 	bl	8004558 <_read_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	bfab      	itete	ge
 800426c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800426e:	89a3      	ldrhlt	r3, [r4, #12]
 8004270:	181b      	addge	r3, r3, r0
 8004272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004276:	bfac      	ite	ge
 8004278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800427a:	81a3      	strhlt	r3, [r4, #12]
 800427c:	bd10      	pop	{r4, pc}

0800427e <__swrite>:
 800427e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004282:	461f      	mov	r7, r3
 8004284:	898b      	ldrh	r3, [r1, #12]
 8004286:	05db      	lsls	r3, r3, #23
 8004288:	4605      	mov	r5, r0
 800428a:	460c      	mov	r4, r1
 800428c:	4616      	mov	r6, r2
 800428e:	d505      	bpl.n	800429c <__swrite+0x1e>
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	2302      	movs	r3, #2
 8004296:	2200      	movs	r2, #0
 8004298:	f000 f94c 	bl	8004534 <_lseek_r>
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	4632      	mov	r2, r6
 80042aa:	463b      	mov	r3, r7
 80042ac:	4628      	mov	r0, r5
 80042ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042b2:	f000 b973 	b.w	800459c <_write_r>

080042b6 <__sseek>:
 80042b6:	b510      	push	{r4, lr}
 80042b8:	460c      	mov	r4, r1
 80042ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042be:	f000 f939 	bl	8004534 <_lseek_r>
 80042c2:	1c43      	adds	r3, r0, #1
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	bf15      	itete	ne
 80042c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042d2:	81a3      	strheq	r3, [r4, #12]
 80042d4:	bf18      	it	ne
 80042d6:	81a3      	strhne	r3, [r4, #12]
 80042d8:	bd10      	pop	{r4, pc}

080042da <__sclose>:
 80042da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042de:	f000 b8f7 	b.w	80044d0 <_close_r>

080042e2 <__swbuf_r>:
 80042e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e4:	460e      	mov	r6, r1
 80042e6:	4614      	mov	r4, r2
 80042e8:	4605      	mov	r5, r0
 80042ea:	b118      	cbz	r0, 80042f4 <__swbuf_r+0x12>
 80042ec:	6a03      	ldr	r3, [r0, #32]
 80042ee:	b90b      	cbnz	r3, 80042f4 <__swbuf_r+0x12>
 80042f0:	f7ff fab0 	bl	8003854 <__sinit>
 80042f4:	69a3      	ldr	r3, [r4, #24]
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	071a      	lsls	r2, r3, #28
 80042fc:	d501      	bpl.n	8004302 <__swbuf_r+0x20>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	b943      	cbnz	r3, 8004314 <__swbuf_r+0x32>
 8004302:	4621      	mov	r1, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f82b 	bl	8004360 <__swsetup_r>
 800430a:	b118      	cbz	r0, 8004314 <__swbuf_r+0x32>
 800430c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004310:	4638      	mov	r0, r7
 8004312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	6922      	ldr	r2, [r4, #16]
 8004318:	1a98      	subs	r0, r3, r2
 800431a:	6963      	ldr	r3, [r4, #20]
 800431c:	b2f6      	uxtb	r6, r6
 800431e:	4283      	cmp	r3, r0
 8004320:	4637      	mov	r7, r6
 8004322:	dc05      	bgt.n	8004330 <__swbuf_r+0x4e>
 8004324:	4621      	mov	r1, r4
 8004326:	4628      	mov	r0, r5
 8004328:	f7ff ff64 	bl	80041f4 <_fflush_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	d1ed      	bne.n	800430c <__swbuf_r+0x2a>
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	3b01      	subs	r3, #1
 8004334:	60a3      	str	r3, [r4, #8]
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	6022      	str	r2, [r4, #0]
 800433c:	701e      	strb	r6, [r3, #0]
 800433e:	6962      	ldr	r2, [r4, #20]
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	429a      	cmp	r2, r3
 8004344:	d004      	beq.n	8004350 <__swbuf_r+0x6e>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	07db      	lsls	r3, r3, #31
 800434a:	d5e1      	bpl.n	8004310 <__swbuf_r+0x2e>
 800434c:	2e0a      	cmp	r6, #10
 800434e:	d1df      	bne.n	8004310 <__swbuf_r+0x2e>
 8004350:	4621      	mov	r1, r4
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff ff4e 	bl	80041f4 <_fflush_r>
 8004358:	2800      	cmp	r0, #0
 800435a:	d0d9      	beq.n	8004310 <__swbuf_r+0x2e>
 800435c:	e7d6      	b.n	800430c <__swbuf_r+0x2a>
	...

08004360 <__swsetup_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4b29      	ldr	r3, [pc, #164]	@ (8004408 <__swsetup_r+0xa8>)
 8004364:	4605      	mov	r5, r0
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	460c      	mov	r4, r1
 800436a:	b118      	cbz	r0, 8004374 <__swsetup_r+0x14>
 800436c:	6a03      	ldr	r3, [r0, #32]
 800436e:	b90b      	cbnz	r3, 8004374 <__swsetup_r+0x14>
 8004370:	f7ff fa70 	bl	8003854 <__sinit>
 8004374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004378:	0719      	lsls	r1, r3, #28
 800437a:	d422      	bmi.n	80043c2 <__swsetup_r+0x62>
 800437c:	06da      	lsls	r2, r3, #27
 800437e:	d407      	bmi.n	8004390 <__swsetup_r+0x30>
 8004380:	2209      	movs	r2, #9
 8004382:	602a      	str	r2, [r5, #0]
 8004384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800438e:	e033      	b.n	80043f8 <__swsetup_r+0x98>
 8004390:	0758      	lsls	r0, r3, #29
 8004392:	d512      	bpl.n	80043ba <__swsetup_r+0x5a>
 8004394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004396:	b141      	cbz	r1, 80043aa <__swsetup_r+0x4a>
 8004398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800439c:	4299      	cmp	r1, r3
 800439e:	d002      	beq.n	80043a6 <__swsetup_r+0x46>
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 f90d 	bl	80045c0 <_free_r>
 80043a6:	2300      	movs	r3, #0
 80043a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	2300      	movs	r3, #0
 80043b4:	6063      	str	r3, [r4, #4]
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	b94b      	cbnz	r3, 80043da <__swsetup_r+0x7a>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d0:	d003      	beq.n	80043da <__swsetup_r+0x7a>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 f83f 	bl	8004458 <__smakebuf_r>
 80043da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043de:	f013 0201 	ands.w	r2, r3, #1
 80043e2:	d00a      	beq.n	80043fa <__swsetup_r+0x9a>
 80043e4:	2200      	movs	r2, #0
 80043e6:	60a2      	str	r2, [r4, #8]
 80043e8:	6962      	ldr	r2, [r4, #20]
 80043ea:	4252      	negs	r2, r2
 80043ec:	61a2      	str	r2, [r4, #24]
 80043ee:	6922      	ldr	r2, [r4, #16]
 80043f0:	b942      	cbnz	r2, 8004404 <__swsetup_r+0xa4>
 80043f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80043f6:	d1c5      	bne.n	8004384 <__swsetup_r+0x24>
 80043f8:	bd38      	pop	{r3, r4, r5, pc}
 80043fa:	0799      	lsls	r1, r3, #30
 80043fc:	bf58      	it	pl
 80043fe:	6962      	ldrpl	r2, [r4, #20]
 8004400:	60a2      	str	r2, [r4, #8]
 8004402:	e7f4      	b.n	80043ee <__swsetup_r+0x8e>
 8004404:	2000      	movs	r0, #0
 8004406:	e7f7      	b.n	80043f8 <__swsetup_r+0x98>
 8004408:	20000018 	.word	0x20000018

0800440c <__swhatbuf_r>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	460c      	mov	r4, r1
 8004410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004414:	2900      	cmp	r1, #0
 8004416:	b096      	sub	sp, #88	@ 0x58
 8004418:	4615      	mov	r5, r2
 800441a:	461e      	mov	r6, r3
 800441c:	da0d      	bge.n	800443a <__swhatbuf_r+0x2e>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	bf14      	ite	ne
 800442a:	2340      	movne	r3, #64	@ 0x40
 800442c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004430:	2000      	movs	r0, #0
 8004432:	6031      	str	r1, [r6, #0]
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	b016      	add	sp, #88	@ 0x58
 8004438:	bd70      	pop	{r4, r5, r6, pc}
 800443a:	466a      	mov	r2, sp
 800443c:	f000 f858 	bl	80044f0 <_fstat_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	dbec      	blt.n	800441e <__swhatbuf_r+0x12>
 8004444:	9901      	ldr	r1, [sp, #4]
 8004446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800444a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800444e:	4259      	negs	r1, r3
 8004450:	4159      	adcs	r1, r3
 8004452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004456:	e7eb      	b.n	8004430 <__swhatbuf_r+0x24>

08004458 <__smakebuf_r>:
 8004458:	898b      	ldrh	r3, [r1, #12]
 800445a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800445c:	079d      	lsls	r5, r3, #30
 800445e:	4606      	mov	r6, r0
 8004460:	460c      	mov	r4, r1
 8004462:	d507      	bpl.n	8004474 <__smakebuf_r+0x1c>
 8004464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	6123      	str	r3, [r4, #16]
 800446c:	2301      	movs	r3, #1
 800446e:	6163      	str	r3, [r4, #20]
 8004470:	b003      	add	sp, #12
 8004472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004474:	ab01      	add	r3, sp, #4
 8004476:	466a      	mov	r2, sp
 8004478:	f7ff ffc8 	bl	800440c <__swhatbuf_r>
 800447c:	9f00      	ldr	r7, [sp, #0]
 800447e:	4605      	mov	r5, r0
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	f7ff fc24 	bl	8003cd0 <_malloc_r>
 8004488:	b948      	cbnz	r0, 800449e <__smakebuf_r+0x46>
 800448a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800448e:	059a      	lsls	r2, r3, #22
 8004490:	d4ee      	bmi.n	8004470 <__smakebuf_r+0x18>
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	e7e2      	b.n	8004464 <__smakebuf_r+0xc>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	6020      	str	r0, [r4, #0]
 80044a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	9b01      	ldr	r3, [sp, #4]
 80044aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044ae:	b15b      	cbz	r3, 80044c8 <__smakebuf_r+0x70>
 80044b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f82d 	bl	8004514 <_isatty_r>
 80044ba:	b128      	cbz	r0, 80044c8 <__smakebuf_r+0x70>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	431d      	orrs	r5, r3
 80044cc:	81a5      	strh	r5, [r4, #12]
 80044ce:	e7cf      	b.n	8004470 <__smakebuf_r+0x18>

080044d0 <_close_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d06      	ldr	r5, [pc, #24]	@ (80044ec <_close_r+0x1c>)
 80044d4:	2300      	movs	r3, #0
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	f7fc fd67 	bl	8000fae <_close>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_close_r+0x1a>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_close_r+0x1a>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000274 	.word	0x20000274

080044f0 <_fstat_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	@ (8004510 <_fstat_r+0x20>)
 80044f4:	2300      	movs	r3, #0
 80044f6:	4604      	mov	r4, r0
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	f7fc fd62 	bl	8000fc6 <_fstat>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d102      	bne.n	800450c <_fstat_r+0x1c>
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	b103      	cbz	r3, 800450c <_fstat_r+0x1c>
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	bd38      	pop	{r3, r4, r5, pc}
 800450e:	bf00      	nop
 8004510:	20000274 	.word	0x20000274

08004514 <_isatty_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d06      	ldr	r5, [pc, #24]	@ (8004530 <_isatty_r+0x1c>)
 8004518:	2300      	movs	r3, #0
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fc fd61 	bl	8000fe6 <_isatty>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_isatty_r+0x1a>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_isatty_r+0x1a>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000274 	.word	0x20000274

08004534 <_lseek_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d07      	ldr	r5, [pc, #28]	@ (8004554 <_lseek_r+0x20>)
 8004538:	4604      	mov	r4, r0
 800453a:	4608      	mov	r0, r1
 800453c:	4611      	mov	r1, r2
 800453e:	2200      	movs	r2, #0
 8004540:	602a      	str	r2, [r5, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	f7fc fd5a 	bl	8000ffc <_lseek>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_lseek_r+0x1e>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_lseek_r+0x1e>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	20000274 	.word	0x20000274

08004558 <_read_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	@ (8004578 <_read_r+0x20>)
 800455c:	4604      	mov	r4, r0
 800455e:	4608      	mov	r0, r1
 8004560:	4611      	mov	r1, r2
 8004562:	2200      	movs	r2, #0
 8004564:	602a      	str	r2, [r5, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	f7fc fce8 	bl	8000f3c <_read>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_read_r+0x1e>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_read_r+0x1e>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	20000274 	.word	0x20000274

0800457c <_sbrk_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	@ (8004598 <_sbrk_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc fd46 	bl	8001018 <_sbrk>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_sbrk_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_sbrk_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000274 	.word	0x20000274

0800459c <_write_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	@ (80045bc <_write_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fc fce3 	bl	8000f76 <_write>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_write_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_write_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	20000274 	.word	0x20000274

080045c0 <_free_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4605      	mov	r5, r0
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d041      	beq.n	800464c <_free_r+0x8c>
 80045c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045cc:	1f0c      	subs	r4, r1, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bfb8      	it	lt
 80045d2:	18e4      	addlt	r4, r4, r3
 80045d4:	f7ff fe36 	bl	8004244 <__malloc_lock>
 80045d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <_free_r+0x90>)
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	b933      	cbnz	r3, 80045ec <_free_r+0x2c>
 80045de:	6063      	str	r3, [r4, #4]
 80045e0:	6014      	str	r4, [r2, #0]
 80045e2:	4628      	mov	r0, r5
 80045e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e8:	f7ff be32 	b.w	8004250 <__malloc_unlock>
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	d908      	bls.n	8004602 <_free_r+0x42>
 80045f0:	6820      	ldr	r0, [r4, #0]
 80045f2:	1821      	adds	r1, r4, r0
 80045f4:	428b      	cmp	r3, r1
 80045f6:	bf01      	itttt	eq
 80045f8:	6819      	ldreq	r1, [r3, #0]
 80045fa:	685b      	ldreq	r3, [r3, #4]
 80045fc:	1809      	addeq	r1, r1, r0
 80045fe:	6021      	streq	r1, [r4, #0]
 8004600:	e7ed      	b.n	80045de <_free_r+0x1e>
 8004602:	461a      	mov	r2, r3
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	b10b      	cbz	r3, 800460c <_free_r+0x4c>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d9fa      	bls.n	8004602 <_free_r+0x42>
 800460c:	6811      	ldr	r1, [r2, #0]
 800460e:	1850      	adds	r0, r2, r1
 8004610:	42a0      	cmp	r0, r4
 8004612:	d10b      	bne.n	800462c <_free_r+0x6c>
 8004614:	6820      	ldr	r0, [r4, #0]
 8004616:	4401      	add	r1, r0
 8004618:	1850      	adds	r0, r2, r1
 800461a:	4283      	cmp	r3, r0
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	d1e0      	bne.n	80045e2 <_free_r+0x22>
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	6053      	str	r3, [r2, #4]
 8004626:	4408      	add	r0, r1
 8004628:	6010      	str	r0, [r2, #0]
 800462a:	e7da      	b.n	80045e2 <_free_r+0x22>
 800462c:	d902      	bls.n	8004634 <_free_r+0x74>
 800462e:	230c      	movs	r3, #12
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	e7d6      	b.n	80045e2 <_free_r+0x22>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	1821      	adds	r1, r4, r0
 8004638:	428b      	cmp	r3, r1
 800463a:	bf04      	itt	eq
 800463c:	6819      	ldreq	r1, [r3, #0]
 800463e:	685b      	ldreq	r3, [r3, #4]
 8004640:	6063      	str	r3, [r4, #4]
 8004642:	bf04      	itt	eq
 8004644:	1809      	addeq	r1, r1, r0
 8004646:	6021      	streq	r1, [r4, #0]
 8004648:	6054      	str	r4, [r2, #4]
 800464a:	e7ca      	b.n	80045e2 <_free_r+0x22>
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	20000270 	.word	0x20000270

08004654 <_init>:
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	bf00      	nop
 8004658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465a:	bc08      	pop	{r3}
 800465c:	469e      	mov	lr, r3
 800465e:	4770      	bx	lr

08004660 <_fini>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr
