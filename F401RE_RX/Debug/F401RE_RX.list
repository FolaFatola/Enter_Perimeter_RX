
F401RE_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005054  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d8  080052d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08005348  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005348  000072cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffe4  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002836  00000000  00000000  0001707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000198b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c6  00000000  00000000  0001a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4aa  00000000  00000000  0001af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011492  00000000  00000000  000353d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e477  00000000  00000000  00046862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4cd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000d4d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d8834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051dc 	.word	0x080051dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080051dc 	.word	0x080051dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b30      	ldr	r3, [pc, #192]	@ (800064c <MX_GPIO_Init+0xdc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a2f      	ldr	r2, [pc, #188]	@ (800064c <MX_GPIO_Init+0xdc>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b2d      	ldr	r3, [pc, #180]	@ (800064c <MX_GPIO_Init+0xdc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b29      	ldr	r3, [pc, #164]	@ (800064c <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a28      	ldr	r2, [pc, #160]	@ (800064c <MX_GPIO_Init+0xdc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b22      	ldr	r3, [pc, #136]	@ (800064c <MX_GPIO_Init+0xdc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a21      	ldr	r2, [pc, #132]	@ (800064c <MX_GPIO_Init+0xdc>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_GPIO_Init+0xdc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2140      	movs	r1, #64	@ 0x40
 80005de:	481c      	ldr	r0, [pc, #112]	@ (8000650 <MX_GPIO_Init+0xe0>)
 80005e0:	f001 f96a 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	4817      	ldr	r0, [pc, #92]	@ (8000654 <MX_GPIO_Init+0xe4>)
 80005f8:	f000 ffda 	bl	80015b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000602:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4811      	ldr	r0, [pc, #68]	@ (8000658 <MX_GPIO_Init+0xe8>)
 8000614:	f000 ffcc 	bl	80015b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000618:	2340      	movs	r3, #64	@ 0x40
 800061a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4808      	ldr	r0, [pc, #32]	@ (8000650 <MX_GPIO_Init+0xe0>)
 8000630:	f000 ffbe 	bl	80015b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2017      	movs	r0, #23
 800063a:	f000 ff82 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800063e:	2017      	movs	r0, #23
 8000640:	f000 ff9b 	bl	800157a <HAL_NVIC_EnableIRQ>

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400
 8000654:	40020800 	.word	0x40020800
 8000658:	40020000 	.word	0x40020000

0800065c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_I2C2_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <MX_I2C2_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_I2C2_Init+0x50>)
 8000668:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_I2C2_Init+0x58>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_I2C2_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_I2C2_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_I2C2_Init+0x50>)
 800067a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800067e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_I2C2_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_I2C2_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <MX_I2C2_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_I2C2_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_I2C2_Init+0x50>)
 800069a:	f001 f93f 	bl	800191c <HAL_I2C_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 fb94 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000084 	.word	0x20000084
 80006b0:	40005800 	.word	0x40005800
 80006b4:	000186a0 	.word	0x000186a0

080006b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <HAL_I2C_MspInit+0xa4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d13c      	bne.n	8000754 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <HAL_I2C_MspInit+0xa8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000760 <HAL_I2C_MspInit+0xa8>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <HAL_I2C_MspInit+0xa8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fc:	2312      	movs	r3, #18
 80006fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000708:	2304      	movs	r3, #4
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4814      	ldr	r0, [pc, #80]	@ (8000764 <HAL_I2C_MspInit+0xac>)
 8000714:	f000 ff4c 	bl	80015b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000718:	2308      	movs	r3, #8
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071c:	2312      	movs	r3, #18
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000728:	2309      	movs	r3, #9
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	480c      	ldr	r0, [pc, #48]	@ (8000764 <HAL_I2C_MspInit+0xac>)
 8000734:	f000 ff3c 	bl	80015b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HAL_I2C_MspInit+0xa8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <HAL_I2C_MspInit+0xa8>)
 8000742:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_I2C_MspInit+0xa8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	@ 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40005800 	.word	0x40005800
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400

08000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void write_register(SPI_HandleTypeDef *spi_handle, uint8_t *write_data, uint8_t write_bytes);
void read_register(SPI_HandleTypeDef *spi_handle, uint8_t *read_data, uint8_t read_bytes);

void write_register(SPI_HandleTypeDef *spi_handle, uint8_t reg, uint8_t *write_data, uint8_t write_bytes) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	461a      	mov	r2, r3
 8000774:	460b      	mov	r3, r1
 8000776:	72fb      	strb	r3, [r7, #11]
 8000778:	4613      	mov	r3, r2
 800077a:	72bb      	strb	r3, [r7, #10]
	uint8_t write_reg = write | reg;
 800077c:	7afb      	ldrb	r3, [r7, #11]
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	b2db      	uxtb	r3, r3
 8000784:	75fb      	strb	r3, [r7, #23]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2140      	movs	r1, #64	@ 0x40
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <_Z14write_registerP19__SPI_HandleTypeDefhPhh+0x58>)
 800078c:	f001 f894 	bl	80018b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_handle, &write_reg, 1, 100);
 8000790:	f107 0117 	add.w	r1, r7, #23
 8000794:	2364      	movs	r3, #100	@ 0x64
 8000796:	2201      	movs	r2, #1
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f002 fa4e 	bl	8002c3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_handle, write_data, write_bytes, 100);
 800079e:	7abb      	ldrb	r3, [r7, #10]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	2364      	movs	r3, #100	@ 0x64
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f002 fa47 	bl	8002c3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2140      	movs	r1, #64	@ 0x40
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <_Z14write_registerP19__SPI_HandleTypeDefhPhh+0x58>)
 80007b2:	f001 f881 	bl	80018b8 <HAL_GPIO_WritePin>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40020400 	.word	0x40020400

080007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>:

void read_register(SPI_HandleTypeDef *spi_handle, uint8_t reg, uint8_t *read_data, uint8_t read_bytes) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	461a      	mov	r2, r3
 80007d0:	460b      	mov	r3, r1
 80007d2:	72fb      	strb	r3, [r7, #11]
 80007d4:	4613      	mov	r3, r2
 80007d6:	72bb      	strb	r3, [r7, #10]
	uint8_t read_reg = read | reg;
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2140      	movs	r1, #64	@ 0x40
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <_Z13read_registerP19__SPI_HandleTypeDefhPhh+0x50>)
 80007e2:	f001 f869 	bl	80018b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi_handle, &read_reg, 1, 100);
 80007e6:	f107 0117 	add.w	r1, r7, #23
 80007ea:	2364      	movs	r3, #100	@ 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f002 fa23 	bl	8002c3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handle, read_data, read_bytes, 100);
 80007f4:	7abb      	ldrb	r3, [r7, #10]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f002 fb60 	bl	8002ec2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2140      	movs	r1, #64	@ 0x40
 8000806:	4803      	ldr	r0, [pc, #12]	@ (8000814 <_Z13read_registerP19__SPI_HandleTypeDefhPhh+0x50>)
 8000808:	f001 f856 	bl	80018b8 <HAL_GPIO_WritePin>
}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020400 	.word	0x40020400

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b098      	sub	sp, #96	@ 0x60
 800081c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fd1f 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 fa11 	bl	8000c48 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f7ff fea3 	bl	8000570 <MX_GPIO_Init>
  MX_I2C2_Init();
 800082a:	f7ff ff17 	bl	800065c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800082e:	f000 fc7b 	bl	8001128 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000832:	f000 fad3 	bl	8000ddc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	bool use_tfh_time = true;
 8000836:	2301      	movs	r3, #1
 8000838:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t seconds = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint8_t minutes = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t hours = 6;
 8000848:	2306      	movs	r3, #6
 800084a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t weekday = SATURDAY;
 800084e:	2307      	movs	r3, #7
 8000850:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t date_day = 12;
 8000854:	230c      	movs	r3, #12
 8000856:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	uint8_t month = APRIL;
 800085a:	2304      	movs	r3, #4
 800085c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	uint8_t year = 25;
 8000860:	2319      	movs	r3, #25
 8000862:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

	Time_RTC rtc_sensor_time{&hi2c2, use_tfh_time, seconds, minutes, hours, weekday, date_day, month, year};
 8000866:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 800086a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800086e:	f107 0020 	add.w	r0, r7, #32
 8000872:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000876:	9305      	str	r3, [sp, #20]
 8000878:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800087c:	9304      	str	r3, [sp, #16]
 800087e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000882:	9303      	str	r3, [sp, #12]
 8000884:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	460b      	mov	r3, r1
 8000898:	49dc      	ldr	r1, [pc, #880]	@ (8000c0c <main+0x3f4>)
 800089a:	f003 fb3b 	bl	8003f14 <_ZN8Time_RTCC1EP17I2C_HandleTypeDefbhhhhhhh>
	rtc_sensor_time.rtc_init();
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fb8e 	bl	8003fc4 <_ZN8Time_RTC8rtc_initEv>
	  //when due to voltage being above 1.9V, we are currently in power down mode.

	    //PB6 is the CS PIN. PC7 is CE pin, and PA9 is for the external interrupt.


	HAL_Delay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f000 fd4b 	bl	8001344 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	48d7      	ldr	r0, [pc, #860]	@ (8000c10 <main+0x3f8>)
 80008b4:	f001 f800 	bl	80018b8 <HAL_GPIO_WritePin>
	//reset all registers
	uint8_t command = WRITE_CONFIG_REG;
 80008b8:	2320      	movs	r3, #32
 80008ba:	77fb      	strb	r3, [r7, #31]
	uint8_t reset_value = 0x08;
 80008bc:	2308      	movs	r3, #8
 80008be:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, config_reg, &reset_value, 1);
 80008c0:	f107 021e 	add.w	r2, r7, #30
 80008c4:	2301      	movs	r3, #1
 80008c6:	2100      	movs	r1, #0
 80008c8:	48d2      	ldr	r0, [pc, #840]	@ (8000c14 <main+0x3fc>)
 80008ca:	f7ff ff4d 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x3F;
 80008ce:	233f      	movs	r3, #63	@ 0x3f
 80008d0:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, en_aa_reg, &reset_value, 1);
 80008d2:	f107 021e 	add.w	r2, r7, #30
 80008d6:	2301      	movs	r3, #1
 80008d8:	2101      	movs	r1, #1
 80008da:	48ce      	ldr	r0, [pc, #824]	@ (8000c14 <main+0x3fc>)
 80008dc:	f7ff ff44 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x03;
 80008e0:	2303      	movs	r3, #3
 80008e2:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, en_rxaddr_reg, &reset_value, 1);
 80008e4:	f107 021e 	add.w	r2, r7, #30
 80008e8:	2301      	movs	r3, #1
 80008ea:	2102      	movs	r1, #2
 80008ec:	48c9      	ldr	r0, [pc, #804]	@ (8000c14 <main+0x3fc>)
 80008ee:	f7ff ff3b 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x03;
 80008f2:	2303      	movs	r3, #3
 80008f4:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, aw_reg, &reset_value, 1);
 80008f6:	f107 021e 	add.w	r2, r7, #30
 80008fa:	2301      	movs	r3, #1
 80008fc:	2103      	movs	r1, #3
 80008fe:	48c5      	ldr	r0, [pc, #788]	@ (8000c14 <main+0x3fc>)
 8000900:	f7ff ff32 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x03;
 8000904:	2303      	movs	r3, #3
 8000906:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, setup_retr_reg, &reset_value, 1);
 8000908:	f107 021e 	add.w	r2, r7, #30
 800090c:	2301      	movs	r3, #1
 800090e:	2104      	movs	r1, #4
 8000910:	48c0      	ldr	r0, [pc, #768]	@ (8000c14 <main+0x3fc>)
 8000912:	f7ff ff29 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x02;
 8000916:	2302      	movs	r3, #2
 8000918:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, rf_ch_reg, &reset_value, 1);
 800091a:	f107 021e 	add.w	r2, r7, #30
 800091e:	2301      	movs	r3, #1
 8000920:	2105      	movs	r1, #5
 8000922:	48bc      	ldr	r0, [pc, #752]	@ (8000c14 <main+0x3fc>)
 8000924:	f7ff ff20 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x07;
 8000928:	2307      	movs	r3, #7
 800092a:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, rf_setup_reg, &reset_value, 1);
 800092c:	f107 021e 	add.w	r2, r7, #30
 8000930:	2301      	movs	r3, #1
 8000932:	2106      	movs	r1, #6
 8000934:	48b7      	ldr	r0, [pc, #732]	@ (8000c14 <main+0x3fc>)
 8000936:	f7ff ff17 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	reset_value = 0x7E;
 800093a:	237e      	movs	r3, #126	@ 0x7e
 800093c:	77bb      	strb	r3, [r7, #30]
	write_register(&hspi1, status_reg, &reset_value, 1);
 800093e:	f107 021e 	add.w	r2, r7, #30
 8000942:	2301      	movs	r3, #1
 8000944:	2107      	movs	r1, #7
 8000946:	48b3      	ldr	r0, [pc, #716]	@ (8000c14 <main+0x3fc>)
 8000948:	f7ff ff0e 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>



	//CONFIG settings
  	uint8_t config_reg_bits = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	777b      	strb	r3, [r7, #29]
  	read_register(&hspi1, config_reg, &config_reg_bits, 1);
 8000950:	f107 021d 	add.w	r2, r7, #29
 8000954:	2301      	movs	r3, #1
 8000956:	2100      	movs	r1, #0
 8000958:	48ae      	ldr	r0, [pc, #696]	@ (8000c14 <main+0x3fc>)
 800095a:	f7ff ff33 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	//Set the PWR_UP bit in the config register.
	config_reg_bits |= PWR_UP_BIT;	//ENTER standby mode.
 800095e:	7f7b      	ldrb	r3, [r7, #29]
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	777b      	strb	r3, [r7, #29]
	write_register(&hspi1, config_reg, &config_reg_bits, 1);
 8000968:	f107 021d 	add.w	r2, r7, #29
 800096c:	2301      	movs	r3, #1
 800096e:	2100      	movs	r1, #0
 8000970:	48a8      	ldr	r0, [pc, #672]	@ (8000c14 <main+0x3fc>)
 8000972:	f7ff fef9 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
	HAL_Delay(5);
 8000976:	2005      	movs	r0, #5
 8000978:	f000 fce4 	bl	8001344 <HAL_Delay>

	config_reg_bits |= PRIM_RX;
 800097c:	7f7b      	ldrb	r3, [r7, #29]
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	777b      	strb	r3, [r7, #29]
	write_register(&hspi1, config_reg, &config_reg_bits, 1);
 8000986:	f107 021d 	add.w	r2, r7, #29
 800098a:	2301      	movs	r3, #1
 800098c:	2100      	movs	r1, #0
 800098e:	48a1      	ldr	r0, [pc, #644]	@ (8000c14 <main+0x3fc>)
 8000990:	f7ff feea 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>


	HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f000 fcd5 	bl	8001344 <HAL_Delay>

	read_register(&hspi1, config_reg, &config_reg_bits, 1);
 800099a:	f107 021d 	add.w	r2, r7, #29
 800099e:	2301      	movs	r3, #1
 80009a0:	2100      	movs	r1, #0
 80009a2:	489c      	ldr	r0, [pc, #624]	@ (8000c14 <main+0x3fc>)
 80009a4:	f7ff ff0e 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	printf("The config bits should show %d\n", config_reg_bits);
 80009a8:	7f7b      	ldrb	r3, [r7, #29]
 80009aa:	4619      	mov	r1, r3
 80009ac:	489a      	ldr	r0, [pc, #616]	@ (8000c18 <main+0x400>)
 80009ae:	f003 fd4b 	bl	8004448 <iprintf>

	uint8_t en_rxaddr_bits = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	773b      	strb	r3, [r7, #28]
	read_register(&hspi1, en_rxaddr_reg, &en_rxaddr_bits, 1);
 80009b6:	f107 021c 	add.w	r2, r7, #28
 80009ba:	2301      	movs	r3, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	4895      	ldr	r0, [pc, #596]	@ (8000c14 <main+0x3fc>)
 80009c0:	f7ff ff00 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	en_rxaddr_bits |= ERX_P0;
 80009c4:	7f3b      	ldrb	r3, [r7, #28]
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	773b      	strb	r3, [r7, #28]
	write_register(&hspi1, en_rxaddr_reg, &en_rxaddr_bits, 1);
 80009ce:	f107 021c 	add.w	r2, r7, #28
 80009d2:	2301      	movs	r3, #1
 80009d4:	2102      	movs	r1, #2
 80009d6:	488f      	ldr	r0, [pc, #572]	@ (8000c14 <main+0x3fc>)
 80009d8:	f7ff fec6 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	uint8_t en_aa_reg_bits = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	76fb      	strb	r3, [r7, #27]
	read_register(&hspi1, en_aa_reg, &en_aa_reg_bits, 1);
 80009e0:	f107 021b 	add.w	r2, r7, #27
 80009e4:	2301      	movs	r3, #1
 80009e6:	2101      	movs	r1, #1
 80009e8:	488a      	ldr	r0, [pc, #552]	@ (8000c14 <main+0x3fc>)
 80009ea:	f7ff feeb 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	en_aa_reg_bits |= (1 << 0);
 80009ee:	7efb      	ldrb	r3, [r7, #27]
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	76fb      	strb	r3, [r7, #27]
	write_register(&hspi1, en_aa_reg, &en_aa_reg_bits, 1);
 80009f8:	f107 021b 	add.w	r2, r7, #27
 80009fc:	2301      	movs	r3, #1
 80009fe:	2101      	movs	r1, #1
 8000a00:	4884      	ldr	r0, [pc, #528]	@ (8000c14 <main+0x3fc>)
 8000a02:	f7ff feb1 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>



	uint8_t payload_length = 0x03; //payload length is 3 byte.
 8000a06:	2303      	movs	r3, #3
 8000a08:	76bb      	strb	r3, [r7, #26]
	write_register(&hspi1, rx_pw_p0_reg, &payload_length, 1);
 8000a0a:	f107 021a 	add.w	r2, r7, #26
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2111      	movs	r1, #17
 8000a12:	4880      	ldr	r0, [pc, #512]	@ (8000c14 <main+0x3fc>)
 8000a14:	f7ff fea8 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>


	//RF CH settings
	uint8_t rf_channel_bits = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	767b      	strb	r3, [r7, #25]
	command = READ_RF_CH_REG;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	77fb      	strb	r3, [r7, #31]
	read_register(&hspi1, rf_ch_reg, &rf_channel_bits, 1);
 8000a20:	f107 0219 	add.w	r2, r7, #25
 8000a24:	2301      	movs	r3, #1
 8000a26:	2105      	movs	r1, #5
 8000a28:	487a      	ldr	r0, [pc, #488]	@ (8000c14 <main+0x3fc>)
 8000a2a:	f7ff fecb 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	//setting the rf_ch bits
	rf_channel_bits |= 0x64;
 8000a2e:	7e7b      	ldrb	r3, [r7, #25]
 8000a30:	f043 0364 	orr.w	r3, r3, #100	@ 0x64
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	767b      	strb	r3, [r7, #25]
	write_register(&hspi1, rf_ch_reg, &rf_channel_bits, 1);
 8000a38:	f107 0219 	add.w	r2, r7, #25
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4874      	ldr	r0, [pc, #464]	@ (8000c14 <main+0x3fc>)
 8000a42:	f7ff fe91 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>



	//AIR DATA RATE
	uint8_t rf_setup_reg_bits = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	763b      	strb	r3, [r7, #24]
	read_register(&hspi1, rf_setup_reg, &rf_setup_reg_bits, 1);
 8000a4a:	f107 0218 	add.w	r2, r7, #24
 8000a4e:	2301      	movs	r3, #1
 8000a50:	2106      	movs	r1, #6
 8000a52:	4870      	ldr	r0, [pc, #448]	@ (8000c14 <main+0x3fc>)
 8000a54:	f7ff feb6 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	//air data rate.
	rf_setup_reg_bits |= 0x06;
 8000a58:	7e3b      	ldrb	r3, [r7, #24]
 8000a5a:	f043 0306 	orr.w	r3, r3, #6
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	763b      	strb	r3, [r7, #24]
	write_register(&hspi1, rf_setup_reg, &rf_setup_reg_bits, 1);
 8000a62:	f107 0218 	add.w	r2, r7, #24
 8000a66:	2301      	movs	r3, #1
 8000a68:	2106      	movs	r1, #6
 8000a6a:	486a      	ldr	r0, [pc, #424]	@ (8000c14 <main+0x3fc>)
 8000a6c:	f7ff fe7c 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	//setting up crc
	config_reg_bits |= CRCO | EN_CRC;
 8000a70:	7f7b      	ldrb	r3, [r7, #29]
 8000a72:	f043 030c 	orr.w	r3, r3, #12
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	777b      	strb	r3, [r7, #29]
	write_register(&hspi1, config_reg, &config_reg_bits, 1);
 8000a7a:	f107 021d 	add.w	r2, r7, #29
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2100      	movs	r1, #0
 8000a82:	4864      	ldr	r0, [pc, #400]	@ (8000c14 <main+0x3fc>)
 8000a84:	f7ff fe70 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>


	//Set the AW register. We determine that we want the address to be 3 bytes.
	//Set the AW register
	//Set the AW register
	uint8_t three_bytes = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t four_bytes = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t five_bytes = 3;
 8000a94:	2303      	movs	r3, #3
 8000a96:	75fb      	strb	r3, [r7, #23]
	write_register(&hspi1, aw_reg, &five_bytes, 1);
 8000a98:	f107 0217 	add.w	r2, r7, #23
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	485c      	ldr	r0, [pc, #368]	@ (8000c14 <main+0x3fc>)
 8000aa2:	f7ff fe61 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>


	//SET THE TX address
	uint8_t rx_addr[5] = {0x77, 0x35, 0xF0, 0xD3, 0xE7};
 8000aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8000c1c <main+0x404>)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab0:	6018      	str	r0, [r3, #0]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	7019      	strb	r1, [r3, #0]

	//SET RX address
	write_register(&hspi1, rx_addr_p0_reg, rx_addr, 5);
 8000ab6:	f107 0210 	add.w	r2, r7, #16
 8000aba:	2305      	movs	r3, #5
 8000abc:	210a      	movs	r1, #10
 8000abe:	4855      	ldr	r0, [pc, #340]	@ (8000c14 <main+0x3fc>)
 8000ac0:	f7ff fe52 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>

	uint8_t set_retr_reg_bits = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
	read_register(&hspi1, setup_retr_reg, &set_retr_reg_bits, 1);
 8000ac8:	f107 020f 	add.w	r2, r7, #15
 8000acc:	2301      	movs	r3, #1
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4850      	ldr	r0, [pc, #320]	@ (8000c14 <main+0x3fc>)
 8000ad2:	f7ff fe77 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>


//	//set up the number of retransmits and the auto retransmit delay
	uint8_t arc_bits = 0x03;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t ard_bits = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	set_retr_reg_bits |= (ard_bits << 0) | arc_bits;
 8000ae2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000ae6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	73fb      	strb	r3, [r7, #15]
	command = WRITE_SETUP_RETR_REG;
 8000af6:	2324      	movs	r3, #36	@ 0x24
 8000af8:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	@ 0x40
 8000afe:	4848      	ldr	r0, [pc, #288]	@ (8000c20 <main+0x408>)
 8000b00:	f000 feda 	bl	80018b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 8000b04:	f107 011f 	add.w	r1, r7, #31
 8000b08:	2364      	movs	r3, #100	@ 0x64
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4841      	ldr	r0, [pc, #260]	@ (8000c14 <main+0x3fc>)
 8000b0e:	f002 f894 	bl	8002c3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &set_retr_reg_bits, 1, 100);
 8000b12:	f107 010f 	add.w	r1, r7, #15
 8000b16:	2364      	movs	r3, #100	@ 0x64
 8000b18:	2201      	movs	r2, #1
 8000b1a:	483e      	ldr	r0, [pc, #248]	@ (8000c14 <main+0x3fc>)
 8000b1c:	f002 f88d 	bl	8002c3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2140      	movs	r1, #64	@ 0x40
 8000b24:	483e      	ldr	r0, [pc, #248]	@ (8000c20 <main+0x408>)
 8000b26:	f000 fec7 	bl	80018b8 <HAL_GPIO_WritePin>





	printf("RX\n");
 8000b2a:	483e      	ldr	r0, [pc, #248]	@ (8000c24 <main+0x40c>)
 8000b2c:	f003 fcf4 	bl	8004518 <puts>
//	read_register(&hspi1, rx_addr_p5_reg, rx_address_read_5, 5);
//	for (int i = 0; i < 5; i++) {
//		printf("RX Address Byte_5 %d\n", rx_address_read_5[i]);
//	}

	read_register(&hspi1, en_aa_reg, &en_aa_reg_bits, 1);
 8000b30:	f107 021b 	add.w	r2, r7, #27
 8000b34:	2301      	movs	r3, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	4836      	ldr	r0, [pc, #216]	@ (8000c14 <main+0x3fc>)
 8000b3a:	f7ff fe43 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, en_rxaddr_reg, &en_rxaddr_bits, 1);
 8000b3e:	f107 021c 	add.w	r2, r7, #28
 8000b42:	2301      	movs	r3, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	4833      	ldr	r0, [pc, #204]	@ (8000c14 <main+0x3fc>)
 8000b48:	f7ff fe3c 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	uint8_t aw_reg_bits = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]
	read_register(&hspi1, aw_reg, &aw_reg_bits, 1);
 8000b50:	f107 020e 	add.w	r2, r7, #14
 8000b54:	2301      	movs	r3, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	482e      	ldr	r0, [pc, #184]	@ (8000c14 <main+0x3fc>)
 8000b5a:	f7ff fe33 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, setup_retr_reg, &set_retr_reg_bits, 1);
 8000b5e:	f107 020f 	add.w	r2, r7, #15
 8000b62:	2301      	movs	r3, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	482b      	ldr	r0, [pc, #172]	@ (8000c14 <main+0x3fc>)
 8000b68:	f7ff fe2c 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rf_ch_reg, &rf_channel_bits, 1);
 8000b6c:	f107 0219 	add.w	r2, r7, #25
 8000b70:	2301      	movs	r3, #1
 8000b72:	2105      	movs	r1, #5
 8000b74:	4827      	ldr	r0, [pc, #156]	@ (8000c14 <main+0x3fc>)
 8000b76:	f7ff fe25 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rf_setup_reg, &rf_setup_reg_bits, 1);
 8000b7a:	f107 0218 	add.w	r2, r7, #24
 8000b7e:	2301      	movs	r3, #1
 8000b80:	2106      	movs	r1, #6
 8000b82:	4824      	ldr	r0, [pc, #144]	@ (8000c14 <main+0x3fc>)
 8000b84:	f7ff fe1e 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	uint8_t status_reg_bits = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	737b      	strb	r3, [r7, #13]
	read_register(&hspi1, status_reg, &status_reg_bits, 1);
 8000b8c:	f107 020d 	add.w	r2, r7, #13
 8000b90:	2301      	movs	r3, #1
 8000b92:	2107      	movs	r1, #7
 8000b94:	481f      	ldr	r0, [pc, #124]	@ (8000c14 <main+0x3fc>)
 8000b96:	f7ff fe15 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

	uint8_t pl_length_0 = 0; //payload length is 3 byte.
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	733b      	strb	r3, [r7, #12]
	uint8_t pl_length_1 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	72fb      	strb	r3, [r7, #11]
	uint8_t pl_length_2 = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72bb      	strb	r3, [r7, #10]
	uint8_t pl_length_3 = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	727b      	strb	r3, [r7, #9]
	uint8_t pl_length_4 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	723b      	strb	r3, [r7, #8]
	uint8_t pl_length_5 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]

	read_register(&hspi1, rx_pw_p0_reg, &pl_length_0, 1);
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	2111      	movs	r1, #17
 8000bba:	4816      	ldr	r0, [pc, #88]	@ (8000c14 <main+0x3fc>)
 8000bbc:	f7ff fe02 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rx_pw_p1_reg, &pl_length_1, 1);
 8000bc0:	f107 020b 	add.w	r2, r7, #11
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2112      	movs	r1, #18
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <main+0x3fc>)
 8000bca:	f7ff fdfb 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rx_pw_p2_reg, &pl_length_2, 1);
 8000bce:	f107 020a 	add.w	r2, r7, #10
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2113      	movs	r1, #19
 8000bd6:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <main+0x3fc>)
 8000bd8:	f7ff fdf4 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rx_pw_p3_reg, &pl_length_3, 1);
 8000bdc:	f107 0209 	add.w	r2, r7, #9
 8000be0:	2301      	movs	r3, #1
 8000be2:	2114      	movs	r1, #20
 8000be4:	480b      	ldr	r0, [pc, #44]	@ (8000c14 <main+0x3fc>)
 8000be6:	f7ff fded 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rx_pw_p4_reg, &pl_length_4, 1);
 8000bea:	f107 0208 	add.w	r2, r7, #8
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2115      	movs	r1, #21
 8000bf2:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <main+0x3fc>)
 8000bf4:	f7ff fde6 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
	read_register(&hspi1, rx_pw_p5_reg, &pl_length_5, 1);
 8000bf8:	1dfa      	adds	r2, r7, #7
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2116      	movs	r1, #22
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <main+0x3fc>)
 8000c00:	f7ff fde0 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>
//	printf("RF CH bits %d\n", rf_channel_bits);
//	printf("RF_SETUP reg is %d\n", rf_setup_reg_bits);
//	printf("Status reg %d\n", status_reg_bits);
//	printf("The config reg is %d\n", config_reg_bits);

	printf("The payload length 0 is %d\n", pl_length_0);
 8000c04:	7b3b      	ldrb	r3, [r7, #12]
 8000c06:	4619      	mov	r1, r3
 8000c08:	e00e      	b.n	8000c28 <main+0x410>
 8000c0a:	bf00      	nop
 8000c0c:	20000084 	.word	0x20000084
 8000c10:	40020800 	.word	0x40020800
 8000c14:	200000d8 	.word	0x200000d8
 8000c18:	080051f4 	.word	0x080051f4
 8000c1c:	08005234 	.word	0x08005234
 8000c20:	40020400 	.word	0x40020400
 8000c24:	08005214 	.word	0x08005214
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <main+0x428>)
 8000c2a:	f003 fc0d 	bl	8004448 <iprintf>




	  //set the CE pin high.
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <main+0x42c>)
 8000c34:	f000 fe40 	bl	80018b8 <HAL_GPIO_WritePin>
//		  printf("The rf_ch reg value is %d\n", read_rf_channel_bits);

//		//Receive the data
//	   printf("%d\n", receive_payload);
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
		HAL_Delay(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f000 fb83 	bl	8001344 <HAL_Delay>
 8000c3e:	e7fb      	b.n	8000c38 <main+0x420>
 8000c40:	08005218 	.word	0x08005218
 8000c44:	40020800 	.word	0x40020800

08000c48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	@ 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	2230      	movs	r2, #48	@ 0x30
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 fc66 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <_Z18SystemClock_Configv+0xcc>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <_Z18SystemClock_Configv+0xcc>)
 8000c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <_Z18SystemClock_Configv+0xcc>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <_Z18SystemClock_Configv+0xd0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c94:	4a20      	ldr	r2, [pc, #128]	@ (8000d18 <_Z18SystemClock_Configv+0xd0>)
 8000c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <_Z18SystemClock_Configv+0xd0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fadb 	bl	8002278 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bf14      	ite	ne
 8000cc8:	2301      	movne	r3, #1
 8000cca:	2300      	moveq	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000cd2:	f000 f87d 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fd39 	bl	8002768 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf14      	ite	ne
 8000cfc:	2301      	movne	r3, #1
 8000cfe:	2300      	moveq	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000d06:	f000 f863 	bl	8000dd0 <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	@ 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) {
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d2c:	d13e      	bne.n	8000dac <HAL_GPIO_EXTI_Callback+0x90>
		printf("Receive\n");
 8000d2e:	4823      	ldr	r0, [pc, #140]	@ (8000dbc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000d30:	f003 fbf2 	bl	8004518 <puts>
		uint8_t comm = R_RX_PAYLOAD;
 8000d34:	2361      	movs	r3, #97	@ 0x61
 8000d36:	73fb      	strb	r3, [r7, #15]

		uint8_t come_now[3];
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2140      	movs	r1, #64	@ 0x40
 8000d3c:	4820      	ldr	r0, [pc, #128]	@ (8000dc0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d3e:	f000 fdbb 	bl	80018b8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &comm, 1, 100);
 8000d42:	f107 010f 	add.w	r1, r7, #15
 8000d46:	2364      	movs	r3, #100	@ 0x64
 8000d48:	2201      	movs	r2, #1
 8000d4a:	481e      	ldr	r0, [pc, #120]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000d4c:	f001 ff75 	bl	8002c3a <HAL_SPI_Transmit>

		HAL_SPI_Receive(&hspi1, come_now, 3, 100);
 8000d50:	f107 010c 	add.w	r1, r7, #12
 8000d54:	2364      	movs	r3, #100	@ 0x64
 8000d56:	2203      	movs	r2, #3
 8000d58:	481a      	ldr	r0, [pc, #104]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000d5a:	f002 f8b2 	bl	8002ec2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2140      	movs	r1, #64	@ 0x40
 8000d62:	4817      	ldr	r0, [pc, #92]	@ (8000dc0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d64:	f000 fda8 	bl	80018b8 <HAL_GPIO_WritePin>
		printf("The received payload is %d %d %d\n", come_now[0], come_now[1], come_now[2]);
 8000d68:	7b3b      	ldrb	r3, [r7, #12]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	7b7b      	ldrb	r3, [r7, #13]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	4815      	ldr	r0, [pc, #84]	@ (8000dc8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000d74:	f003 fb68 	bl	8004448 <iprintf>

		uint8_t status_test = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	72fb      	strb	r3, [r7, #11]
		read_register(&hspi1, status_reg, &status_test ,1);
 8000d7c:	f107 020b 	add.w	r2, r7, #11
 8000d80:	2301      	movs	r3, #1
 8000d82:	2107      	movs	r1, #7
 8000d84:	480f      	ldr	r0, [pc, #60]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000d86:	f7ff fd1d 	bl	80007c4 <_Z13read_registerP19__SPI_HandleTypeDefhPhh>

		if (status_test & 0x40) {
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d004      	beq.n	8000d9e <HAL_GPIO_EXTI_Callback+0x82>
			status_test |= 0x40;
 8000d94:	7afb      	ldrb	r3, [r7, #11]
 8000d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	72fb      	strb	r3, [r7, #11]
		}

		write_register(&hspi1, status_reg, &status_test ,1);
 8000d9e:	f107 020b 	add.w	r2, r7, #11
 8000da2:	2301      	movs	r3, #1
 8000da4:	2107      	movs	r1, #7
 8000da6:	4807      	ldr	r0, [pc, #28]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000da8:	f7ff fcde 	bl	8000768 <_Z14write_registerP19__SPI_HandleTypeDefhPhh>
	}

	printf("INside interrupt\n");
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <HAL_GPIO_EXTI_Callback+0xb0>)
 8000dae:	f003 fbb3 	bl	8004518 <puts>


}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800523c 	.word	0x0800523c
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	200000d8 	.word	0x200000d8
 8000dc8:	08005244 	.word	0x08005244
 8000dcc:	08005268 	.word	0x08005268

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000de0:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	@ (8000e44 <MX_SPI1_Init+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000de8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e28:	220a      	movs	r2, #10
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2c:	4804      	ldr	r0, [pc, #16]	@ (8000e40 <MX_SPI1_Init+0x64>)
 8000e2e:	f001 fe7b 	bl	8002b28 <HAL_SPI_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e38:	f7ff ffca 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000d8 	.word	0x200000d8
 8000e44:	40013000 	.word	0x40013000

08000e48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <HAL_SPI_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23e0      	movs	r3, #224	@ 0xe0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	f000 fb77 	bl	80015b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	@ 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <NMI_Handler+0x4>

08000f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <MemManage_Handler+0x4>

08000f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7e:	f000 f9c1 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f8e:	f000 fcad 	bl	80018ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fa0:	1d39      	adds	r1, r7, #4
 8000fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <__io_putchar+0x20>)
 8000faa:	f002 fbdf 	bl	800376c <HAL_UART_Transmit>

  return ch;
 8000fae:	687b      	ldr	r3, [r7, #4]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000134 	.word	0x20000134

08000fbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
  }

  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e009      	b.n	800101c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffc1 	bl	8000f98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf1      	blt.n	8001008 <_write+0x12>
  }
  return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_close>:

int _close(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001056:	605a      	str	r2, [r3, #4]
  return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_isatty>:

int _isatty(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f003 fa36 	bl	8004538 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20018000 	.word	0x20018000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	20000130 	.word	0x20000130
 8001100:	200002d0 	.word	0x200002d0

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_USART2_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001134:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_USART2_UART_Init+0x4c>)
 8001160:	f002 fab4 	bl	80036cc <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f7ff fe31 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000134 	.word	0x20000134
 8001178:	40004400 	.word	0x40004400

0800117c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_UART_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12b      	bne.n	80011f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_UART_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_UART_MspInit+0x88>)
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_UART_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_UART_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <HAL_UART_MspInit+0x88>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011d6:	230c      	movs	r3, #12
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e6:	2307      	movs	r3, #7
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <HAL_UART_MspInit+0x8c>)
 80011f2:	f000 f9dd 	bl	80015b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001210:	f7ff ff78 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800123a:	f003 f983 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff faeb 	bl	8000818 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001244:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001250:	080052e0 	.word	0x080052e0
  ldr r2, =_sbss
 8001254:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001258:	200002cc 	.word	0x200002cc

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f94f 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	200f      	movs	r0, #15
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe20 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f967 	bl	8001596 <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f000 f92f 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	2000017c 	.word	0x2000017c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000017c 	.word	0x2000017c

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	e159      	b.n	8001880 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8148 	bne.w	800187a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d005      	beq.n	8001602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d130      	bne.n	8001664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 0201 	and.w	r2, r3, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b03      	cmp	r3, #3
 800166e:	d017      	beq.n	80016a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d123      	bne.n	80016f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3208      	adds	r2, #8
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a2 	beq.w	800187a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <HAL_GPIO_Init+0x2e8>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a56      	ldr	r2, [pc, #344]	@ (8001898 <HAL_GPIO_Init+0x2e8>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b54      	ldr	r3, [pc, #336]	@ (8001898 <HAL_GPIO_Init+0x2e8>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001752:	4a52      	ldr	r2, [pc, #328]	@ (800189c <HAL_GPIO_Init+0x2ec>)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a49      	ldr	r2, [pc, #292]	@ (80018a0 <HAL_GPIO_Init+0x2f0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x202>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a48      	ldr	r2, [pc, #288]	@ (80018a4 <HAL_GPIO_Init+0x2f4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x1fe>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a47      	ldr	r2, [pc, #284]	@ (80018a8 <HAL_GPIO_Init+0x2f8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x1fa>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a46      	ldr	r2, [pc, #280]	@ (80018ac <HAL_GPIO_Init+0x2fc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x1f6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <HAL_GPIO_Init+0x300>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x1f2>
 800179e:	2304      	movs	r3, #4
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x204>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x204>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x204>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x204>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x204>
 80017b2:	2300      	movs	r3, #0
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c4:	4935      	ldr	r1, [pc, #212]	@ (800189c <HAL_GPIO_Init+0x2ec>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b38      	ldr	r3, [pc, #224]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a2f      	ldr	r2, [pc, #188]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a24      	ldr	r2, [pc, #144]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184a:	4a1a      	ldr	r2, [pc, #104]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001874:	4a0f      	ldr	r2, [pc, #60]	@ (80018b4 <HAL_GPIO_Init+0x304>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3301      	adds	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	f67f aea2 	bls.w	80015cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa06 	bl	8000d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e12b      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe feb8 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	@ 0x24
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800197e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001980:	f001 f8aa 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a81      	ldr	r2, [pc, #516]	@ (8001b90 <HAL_I2C_Init+0x274>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d807      	bhi.n	80019a0 <HAL_I2C_Init+0x84>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a80      	ldr	r2, [pc, #512]	@ (8001b94 <HAL_I2C_Init+0x278>)
 8001994:	4293      	cmp	r3, r2
 8001996:	bf94      	ite	ls
 8001998:	2301      	movls	r3, #1
 800199a:	2300      	movhi	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e006      	b.n	80019ae <HAL_I2C_Init+0x92>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001b98 <HAL_I2C_Init+0x27c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0e7      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a78      	ldr	r2, [pc, #480]	@ (8001b9c <HAL_I2C_Init+0x280>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9b      	lsrs	r3, r3, #18
 80019c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b90 <HAL_I2C_Init+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d802      	bhi.n	80019f0 <HAL_I2C_Init+0xd4>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3301      	adds	r3, #1
 80019ee:	e009      	b.n	8001a04 <HAL_I2C_Init+0xe8>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a69      	ldr	r2, [pc, #420]	@ (8001ba0 <HAL_I2C_Init+0x284>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	3301      	adds	r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	495c      	ldr	r1, [pc, #368]	@ (8001b90 <HAL_I2C_Init+0x274>)
 8001a20:	428b      	cmp	r3, r1
 8001a22:	d819      	bhi.n	8001a58 <HAL_I2C_Init+0x13c>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e59      	subs	r1, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a38:	400b      	ands	r3, r1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_I2C_Init+0x138>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e59      	subs	r1, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a52:	e051      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e04f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_I2C_Init+0x168>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e012      	b.n	8001aaa <HAL_I2C_Init+0x18e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x196>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e022      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_I2C_Init+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1e58      	subs	r0, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad6:	e00f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	0099      	lsls	r1, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6911      	ldr	r1, [r2, #16]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68d2      	ldr	r2, [r2, #12]
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	000186a0 	.word	0x000186a0
 8001b94:	001e847f 	.word	0x001e847f
 8001b98:	003d08ff 	.word	0x003d08ff
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	817b      	strh	r3, [r7, #10]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	813b      	strh	r3, [r7, #8]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bbe:	f7ff fbb5 	bl	800132c <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	f040 80d9 	bne.w	8001d84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2319      	movs	r3, #25
 8001bd8:	2201      	movs	r2, #1
 8001bda:	496d      	ldr	r1, [pc, #436]	@ (8001d90 <HAL_I2C_Mem_Write+0x1ec>)
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f971 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
 8001bea:	e0cc      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Mem_Write+0x56>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e0c5      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d007      	beq.n	8001c20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2221      	movs	r2, #33	@ 0x21
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2240      	movs	r2, #64	@ 0x40
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a3a      	ldr	r2, [r7, #32]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <HAL_I2C_Mem_Write+0x1f0>)
 8001c60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c62:	88f8      	ldrh	r0, [r7, #6]
 8001c64:	893a      	ldrh	r2, [r7, #8]
 8001c66:	8979      	ldrh	r1, [r7, #10]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4603      	mov	r3, r0
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f890 	bl	8001d98 <I2C_RequestMemoryWrite>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d052      	beq.n	8001d24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e081      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa36 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06b      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d11b      	bne.n	8001d24 <HAL_I2C_Mem_Write+0x180>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d017      	beq.n	8001d24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1aa      	bne.n	8001c82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fa29 	bl	8002188 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e016      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000

08001d98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f878 	bl	8001ec4 <I2C_WaitOnFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00d      	beq.n	8001df6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de8:	d103      	bne.n	8001df2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e05f      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	492d      	ldr	r1, [pc, #180]	@ (8001ec0 <I2C_RequestMemoryWrite+0x128>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f8d3 	bl	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04c      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e34:	6a39      	ldr	r1, [r7, #32]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f95e 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d107      	bne.n	8001e5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e02b      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	e021      	b.n	8001eb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e70:	893b      	ldrh	r3, [r7, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f938 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d107      	bne.n	8001ea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e005      	b.n	8001eb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eaa:	893b      	ldrh	r3, [r7, #8]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	00010002 	.word	0x00010002

08001ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed4:	e048      	b.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001edc:	d044      	beq.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ede:	f7ff fa25 	bl	800132c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d302      	bcc.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d139      	bne.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10d      	bne.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	e00c      	b.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	43da      	mvns	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d116      	bne.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e023      	b.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10d      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	e00c      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d093      	beq.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc6:	e071      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d123      	bne.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e067      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002026:	d041      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002028:	f7ff f980 	bl	800132c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d302      	bcc.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d136      	bne.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10c      	bne.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e00b      	b.n	800207a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e021      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10c      	bne.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e00b      	b.n	80020e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4013      	ands	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f af6d 	bne.w	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002104:	e034      	b.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f886 	bl	8002218 <I2C_IsAcknowledgeFailed>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e034      	b.n	8002180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800211c:	d028      	beq.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7ff f905 	bl	800132c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11d      	bne.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213e:	2b80      	cmp	r3, #128	@ 0x80
 8002140:	d016      	beq.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b80      	cmp	r3, #128	@ 0x80
 800217c:	d1c3      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002194:	e034      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f83e 	bl	8002218 <I2C_IsAcknowledgeFailed>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e034      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ac:	d028      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7ff f8bd 	bl	800132c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11d      	bne.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d016      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e007      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d1c3      	bne.n	8002196 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222e:	d11b      	bne.n	8002268 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002238:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	f043 0204 	orr.w	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e267      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d075      	beq.n	8002382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002296:	4b88      	ldr	r3, [pc, #544]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d00c      	beq.n	80022bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a2:	4b85      	ldr	r3, [pc, #532]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b82      	ldr	r3, [pc, #520]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b7e      	ldr	r3, [pc, #504]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d05b      	beq.n	8002380 <HAL_RCC_OscConfig+0x108>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d157      	bne.n	8002380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e242      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x74>
 80022de:	4b76      	ldr	r3, [pc, #472]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a75      	ldr	r2, [pc, #468]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x98>
 80022f6:	4b70      	ldr	r3, [pc, #448]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6f      	ldr	r2, [pc, #444]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6d      	ldr	r3, [pc, #436]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6c      	ldr	r2, [pc, #432]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xb0>
 8002310:	4b69      	ldr	r3, [pc, #420]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a68      	ldr	r2, [pc, #416]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b66      	ldr	r3, [pc, #408]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a65      	ldr	r2, [pc, #404]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fffc 	bl	800132c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fff8 	bl	800132c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	@ 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e207      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b5b      	ldr	r3, [pc, #364]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xc0>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe ffe8 	bl	800132c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe ffe4 	bl	800132c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1f3      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b51      	ldr	r3, [pc, #324]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0xe8>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800238e:	4b4a      	ldr	r3, [pc, #296]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023a6:	4b44      	ldr	r3, [pc, #272]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1c7      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4937      	ldr	r1, [pc, #220]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCC_OscConfig+0x244>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff9d 	bl	800132c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe ff99 	bl	800132c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1a8      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4925      	ldr	r1, [pc, #148]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCC_OscConfig+0x244>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe ff7c 	bl	800132c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002438:	f7fe ff78 	bl	800132c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e187      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d036      	beq.n	80024d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_RCC_OscConfig+0x248>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe ff5c 	bl	800132c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe ff58 	bl	800132c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e167      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_OscConfig+0x240>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x200>
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_RCC_OscConfig+0x248>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe ff45 	bl	800132c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e00e      	b.n	80024c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe ff41 	bl	800132c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d907      	bls.n	80024c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e150      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b88      	ldr	r3, [pc, #544]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8097 	beq.w	800260c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b81      	ldr	r3, [pc, #516]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b7d      	ldr	r3, [pc, #500]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	4a7c      	ldr	r2, [pc, #496]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fe:	4b7a      	ldr	r3, [pc, #488]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b77      	ldr	r3, [pc, #476]	@ (80026ec <HAL_RCC_OscConfig+0x474>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b74      	ldr	r3, [pc, #464]	@ (80026ec <HAL_RCC_OscConfig+0x474>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a73      	ldr	r2, [pc, #460]	@ (80026ec <HAL_RCC_OscConfig+0x474>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7fe ff01 	bl	800132c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7fe fefd 	bl	800132c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e10c      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <HAL_RCC_OscConfig+0x474>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x2ea>
 8002554:	4b64      	ldr	r3, [pc, #400]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002558:	4a63      	ldr	r2, [pc, #396]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x324>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x30c>
 800256a:	4b5f      	ldr	r3, [pc, #380]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256e:	4a5e      	ldr	r2, [pc, #376]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6713      	str	r3, [r2, #112]	@ 0x70
 8002576:	4b5c      	ldr	r3, [pc, #368]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	4a5b      	ldr	r2, [pc, #364]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6713      	str	r3, [r2, #112]	@ 0x70
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x324>
 8002584:	4b58      	ldr	r3, [pc, #352]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	4a57      	ldr	r2, [pc, #348]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002590:	4b55      	ldr	r3, [pc, #340]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	4a54      	ldr	r2, [pc, #336]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fec2 	bl	800132c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe febe 	bl	800132c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0cb      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b49      	ldr	r3, [pc, #292]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCC_OscConfig+0x334>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7fe feac 	bl	800132c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe fea8 	bl	800132c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0b5      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ee:	4b3e      	ldr	r3, [pc, #248]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ee      	bne.n	80025d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b39      	ldr	r3, [pc, #228]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	4a38      	ldr	r2, [pc, #224]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a1 	beq.w	8002758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002616:	4b34      	ldr	r3, [pc, #208]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d05c      	beq.n	80026dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d141      	bne.n	80026ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b31      	ldr	r3, [pc, #196]	@ (80026f0 <HAL_RCC_OscConfig+0x478>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fe7c 	bl	800132c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fe78 	bl	800132c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e087      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	3b01      	subs	r3, #1
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	491b      	ldr	r1, [pc, #108]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x478>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fe51 	bl	800132c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fe4d 	bl	800132c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e05c      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x416>
 80026ac:	e054      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fe3a 	bl	800132c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fe36 	bl	800132c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e045      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x444>
 80026da:	e03d      	b.n	8002758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e038      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x4ec>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d028      	beq.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d121      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800272a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0cc      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b68      	ldr	r3, [pc, #416]	@ (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d90c      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b65      	ldr	r3, [pc, #404]	@ (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b63      	ldr	r3, [pc, #396]	@ (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0b8      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027bc:	4b59      	ldr	r3, [pc, #356]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a58      	ldr	r2, [pc, #352]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a52      	ldr	r2, [pc, #328]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	494d      	ldr	r1, [pc, #308]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d044      	beq.n	8002888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d119      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d003      	beq.n	8002826 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	2b03      	cmp	r3, #3
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b3f      	ldr	r3, [pc, #252]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e067      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4934      	ldr	r1, [pc, #208]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002858:	f7fe fd68 	bl	800132c <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fd64 	bl	800132c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e04f      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b25      	ldr	r3, [pc, #148]	@ (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d20c      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b22      	ldr	r3, [pc, #136]	@ (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e032      	b.n	8002916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4916      	ldr	r1, [pc, #88]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	490e      	ldr	r1, [pc, #56]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ee:	f000 f821 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	490a      	ldr	r1, [pc, #40]	@ (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	5ccb      	ldrb	r3, [r1, r3]
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	4a09      	ldr	r2, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fcc8 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	08005284 	.word	0x08005284
 800292c:	20000000 	.word	0x20000000
 8002930:	20000004 	.word	0x20000004

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b090      	sub	sp, #64	@ 0x40
 800293a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294c:	4b59      	ldr	r3, [pc, #356]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d00d      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x40>
 8002958:	2b08      	cmp	r3, #8
 800295a:	f200 80a1 	bhi.w	8002aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x34>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x3a>
 8002966:	e09b      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800296a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800296c:	e09b      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800296e:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x188>)
 8002970:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002972:	e098      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002974:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800297c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d028      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	2200      	movs	r2, #0
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	627a      	str	r2, [r7, #36]	@ 0x24
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800299c:	2100      	movs	r1, #0
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x188>)
 80029a0:	fb03 f201 	mul.w	r2, r3, r1
 80029a4:	2300      	movs	r3, #0
 80029a6:	fb00 f303 	mul.w	r3, r0, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	4a43      	ldr	r2, [pc, #268]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x188>)
 80029ae:	fba0 1202 	umull	r1, r2, r0, r2
 80029b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b4:	460a      	mov	r2, r1
 80029b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ba:	4413      	add	r3, r2
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	2200      	movs	r2, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	61fa      	str	r2, [r7, #28]
 80029c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ce:	f7fd fc57 	bl	8000280 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029da:	e053      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029dc:	4b35      	ldr	r3, [pc, #212]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	2200      	movs	r2, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	617a      	str	r2, [r7, #20]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ee:	f04f 0b00 	mov.w	fp, #0
 80029f2:	4652      	mov	r2, sl
 80029f4:	465b      	mov	r3, fp
 80029f6:	f04f 0000 	mov.w	r0, #0
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a04:	0150      	lsls	r0, r2, #5
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a26:	ebb2 0408 	subs.w	r4, r2, r8
 8002a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	00eb      	lsls	r3, r5, #3
 8002a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3c:	00e2      	lsls	r2, r4, #3
 8002a3e:	4614      	mov	r4, r2
 8002a40:	461d      	mov	r5, r3
 8002a42:	eb14 030a 	adds.w	r3, r4, sl
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	eb45 030b 	adc.w	r3, r5, fp
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	028b      	lsls	r3, r1, #10
 8002a5e:	4621      	mov	r1, r4
 8002a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a64:	4621      	mov	r1, r4
 8002a66:	028a      	lsls	r2, r1, #10
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a78:	f7fd fc02 	bl	8000280 <__aeabi_uldivmod>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4613      	mov	r3, r2
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3740      	adds	r7, #64	@ 0x40
 8002aac:	46bd      	mov	sp, r7
 8002aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	00f42400 	.word	0x00f42400
 8002abc:	017d7840 	.word	0x017d7840

08002ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	@ (8002ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000

08002ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002adc:	f7ff fff0 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0a9b      	lsrs	r3, r3, #10
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4903      	ldr	r1, [pc, #12]	@ (8002afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08005294 	.word	0x08005294

08002b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b04:	f7ff ffdc 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0b5b      	lsrs	r3, r3, #13
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4903      	ldr	r1, [pc, #12]	@ (8002b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08005294 	.word	0x08005294

08002b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07b      	b.n	8002c32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d108      	bne.n	8002b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b4a:	d009      	beq.n	8002b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
 8002b52:	e005      	b.n	8002b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f964 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be4:	ea42 0103 	orr.w	r1, r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	f003 0104 	and.w	r1, r3, #4
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	f003 0210 	and.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b088      	sub	sp, #32
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c4a:	f7fe fb6f 	bl	800132c <HAL_GetTick>
 8002c4e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d001      	beq.n	8002c64 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
 8002c62:	e12a      	b.n	8002eba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Transmit+0x36>
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e122      	b.n	8002eba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_SPI_Transmit+0x48>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e11b      	b.n	8002eba <HAL_SPI_Transmit+0x280>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b40      	cmp	r3, #64	@ 0x40
 8002cfe:	d007      	beq.n	8002d10 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d18:	d152      	bne.n	8002dc0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_SPI_Transmit+0xee>
 8002d22:	8b7b      	ldrh	r3, [r7, #26]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d145      	bne.n	8002db4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	881a      	ldrh	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	1c9a      	adds	r2, r3, #2
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d4c:	e032      	b.n	8002db4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d112      	bne.n	8002d82 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	1c9a      	adds	r2, r3, #2
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d80:	e018      	b.n	8002db4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d82:	f7fe fad3 	bl	800132c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d803      	bhi.n	8002d9a <HAL_SPI_Transmit+0x160>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d98:	d102      	bne.n	8002da0 <HAL_SPI_Transmit+0x166>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e082      	b.n	8002eba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1c7      	bne.n	8002d4e <HAL_SPI_Transmit+0x114>
 8002dbe:	e053      	b.n	8002e68 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0x194>
 8002dc8:	8b7b      	ldrh	r3, [r7, #26]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d147      	bne.n	8002e5e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002df4:	e033      	b.n	8002e5e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d113      	bne.n	8002e2c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e2a:	e018      	b.n	8002e5e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2c:	f7fe fa7e 	bl	800132c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d803      	bhi.n	8002e44 <HAL_SPI_Transmit+0x20a>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e42:	d102      	bne.n	8002e4a <HAL_SPI_Transmit+0x210>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e02d      	b.n	8002eba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1c6      	bne.n	8002df6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fbd9 	bl	8003624 <SPI_EndRxTxTransaction>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b088      	sub	sp, #32
 8002ec6:	af02      	add	r7, sp, #8
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e104      	b.n	80030ec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eea:	d112      	bne.n	8002f12 <HAL_SPI_Receive+0x50>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10e      	bne.n	8002f12 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f8f3 	bl	80030f4 <HAL_SPI_TransmitReceive>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	e0ec      	b.n	80030ec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f12:	f7fe fa0b 	bl	800132c <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Receive+0x62>
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0e1      	b.n	80030ec <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_SPI_Receive+0x74>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0da      	b.n	80030ec <HAL_SPI_Receive+0x22a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2204      	movs	r2, #4
 8002f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f84:	d10f      	bne.n	8002fa6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d007      	beq.n	8002fc4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d170      	bne.n	80030ae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fcc:	e035      	b.n	800303a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d115      	bne.n	8003008 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f103 020c 	add.w	r2, r3, #12
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003006:	e018      	b.n	800303a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003008:	f7fe f990 	bl	800132c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d803      	bhi.n	8003020 <HAL_SPI_Receive+0x15e>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Receive+0x164>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e058      	b.n	80030ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1c4      	bne.n	8002fce <HAL_SPI_Receive+0x10c>
 8003044:	e038      	b.n	80030b8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d113      	bne.n	800307c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	b292      	uxth	r2, r2
 8003060:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800307a:	e018      	b.n	80030ae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307c:	f7fe f956 	bl	800132c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d803      	bhi.n	8003094 <HAL_SPI_Receive+0x1d2>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003092:	d102      	bne.n	800309a <HAL_SPI_Receive+0x1d8>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e01e      	b.n	80030ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1c6      	bne.n	8003046 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa4b 	bl	8003558 <SPI_EndRxTransaction>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80030ea:	2300      	movs	r3, #0
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	@ 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003102:	2301      	movs	r3, #1
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003106:	f7fe f911 	bl	800132c <HAL_GetTick>
 800310a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003112:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d00c      	beq.n	800313e <HAL_SPI_TransmitReceive+0x4a>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800312a:	d106      	bne.n	800313a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_TransmitReceive+0x46>
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d001      	beq.n	800313e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e17f      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x5c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x5c>
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e174      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x6e>
 800315e:	2302      	movs	r3, #2
 8003160:	e16d      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b04      	cmp	r3, #4
 8003174:	d003      	beq.n	800317e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2205      	movs	r2, #5
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	887a      	ldrh	r2, [r7, #2]
 800318e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b40      	cmp	r3, #64	@ 0x40
 80031c0:	d007      	beq.n	80031d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031da:	d17e      	bne.n	80032da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_TransmitReceive+0xf6>
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d16c      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	1c9a      	adds	r2, r3, #2
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320e:	e059      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d11b      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x162>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d016      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x162>
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	2b01      	cmp	r3, #1
 800322c:	d113      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	881a      	ldrh	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d119      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1a4>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d014      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	b292      	uxth	r2, r2
 800327a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003294:	2301      	movs	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003298:	f7fe f848 	bl	800132c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d80d      	bhi.n	80032c4 <HAL_SPI_TransmitReceive+0x1d0>
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ae:	d009      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0bc      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1a0      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x11c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d19b      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x11c>
 80032d8:	e082      	b.n	80033e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x1f4>
 80032e2:	8afb      	ldrh	r3, [r7, #22]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d171      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	7812      	ldrb	r2, [r2, #0]
 80032f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800330e:	e05d      	b.n	80033cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d11c      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x264>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x264>
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	2b01      	cmp	r3, #1
 800332c:	d114      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d119      	bne.n	800339a <HAL_SPI_TransmitReceive+0x2a6>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d014      	beq.n	800339a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003396:	2301      	movs	r3, #1
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800339a:	f7fd ffc7 	bl	800132c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d803      	bhi.n	80033b2 <HAL_SPI_TransmitReceive+0x2be>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x2c4>
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e038      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d19c      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x21c>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d197      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f91d 	bl	8003624 <SPI_EndRxTxTransaction>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e01d      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800343c:	2300      	movs	r3, #0
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3728      	adds	r7, #40	@ 0x28
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003458:	f7fd ff68 	bl	800132c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	4413      	add	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003468:	f7fd ff60 	bl	800132c <HAL_GetTick>
 800346c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800346e:	4b39      	ldr	r3, [pc, #228]	@ (8003554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	0d1b      	lsrs	r3, r3, #20
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	e054      	b.n	800352a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003486:	d050      	beq.n	800352a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003488:	f7fd ff50 	bl	800132c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d902      	bls.n	800349e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d13d      	bne.n	800351a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b6:	d111      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c0:	d004      	beq.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d107      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e4:	d10f      	bne.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e017      	b.n	800354a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3b01      	subs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	bf0c      	ite	eq
 800353a:	2301      	moveq	r3, #1
 800353c:	2300      	movne	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	429a      	cmp	r2, r3
 8003546:	d19b      	bne.n	8003480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000

08003558 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800356c:	d111      	bne.n	8003592 <SPI_EndRxTransaction+0x3a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003576:	d004      	beq.n	8003582 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d107      	bne.n	8003592 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800359a:	d12a      	bne.n	80035f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a4:	d012      	beq.n	80035cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	@ 0x80
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff ff49 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02d      	beq.n	8003618 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e026      	b.n	800361a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2101      	movs	r1, #1
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ff36 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e013      	b.n	800361a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2101      	movs	r1, #1
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff ff23 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e000      	b.n	800361a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2201      	movs	r2, #1
 8003638:	2102      	movs	r1, #2
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff04 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e032      	b.n	80036bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003656:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <SPI_EndRxTxTransaction+0xa0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1b      	ldr	r2, [pc, #108]	@ (80036c8 <SPI_EndRxTxTransaction+0xa4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003674:	d112      	bne.n	800369c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	@ 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff fee1 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d016      	beq.n	80036ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e00f      	b.n	80036bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b80      	cmp	r3, #128	@ 0x80
 80036b4:	d0f2      	beq.n	800369c <SPI_EndRxTxTransaction+0x78>
 80036b6:	e000      	b.n	80036ba <SPI_EndRxTxTransaction+0x96>
        break;
 80036b8:	bf00      	nop
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000000 	.word	0x20000000
 80036c8:	165e9f81 	.word	0x165e9f81

080036cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e042      	b.n	8003764 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fd42 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	@ 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800370e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f973 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	@ 0x28
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	d175      	bne.n	8003878 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Transmit+0x2c>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e06e      	b.n	800387a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2221      	movs	r2, #33	@ 0x21
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037aa:	f7fd fdbf 	bl	800132c <HAL_GetTick>
 80037ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	88fa      	ldrh	r2, [r7, #6]
 80037b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c4:	d108      	bne.n	80037d8 <HAL_UART_Transmit+0x6c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	e003      	b.n	80037e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037e0:	e02e      	b.n	8003840 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	@ 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f848 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e03a      	b.n	800387a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003818:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	3302      	adds	r3, #2
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	e007      	b.n	8003832 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	3301      	adds	r3, #1
 8003830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1cb      	bne.n	80037e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	2140      	movs	r1, #64	@ 0x40
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f814 	bl	8003882 <UART_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e006      	b.n	800387a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003892:	e03b      	b.n	800390c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800389a:	d037      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fd fd46 	bl	800132c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	6a3a      	ldr	r2, [r7, #32]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e03a      	b.n	800392c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d023      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0x8a>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b80      	cmp	r3, #128	@ 0x80
 80038c8:	d020      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0x8a>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d01d      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d116      	bne.n	800390c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f81d 	bl	8003934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2208      	movs	r2, #8
 80038fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e00f      	b.n	800392c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	429a      	cmp	r2, r3
 8003928:	d0b4      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b095      	sub	sp, #84	@ 0x54
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800395c:	643a      	str	r2, [r7, #64]	@ 0x40
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d119      	bne.n	80039e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039cc:	61ba      	str	r2, [r7, #24]
 80039ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6979      	ldr	r1, [r7, #20]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	613b      	str	r3, [r7, #16]
   return(result);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039ee:	bf00      	nop
 80039f0:	3754      	adds	r7, #84	@ 0x54
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b0c0      	sub	sp, #256	@ 0x100
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	68d9      	ldr	r1, [r3, #12]
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	ea40 0301 	orr.w	r3, r0, r1
 8003a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a54:	f021 010c 	bic.w	r1, r1, #12
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a62:	430b      	orrs	r3, r1
 8003a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	6999      	ldr	r1, [r3, #24]
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	ea40 0301 	orr.w	r3, r0, r1
 8003a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc8 <UART_SetConfig+0x2cc>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d005      	beq.n	8003a9c <UART_SetConfig+0xa0>
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b8d      	ldr	r3, [pc, #564]	@ (8003ccc <UART_SetConfig+0x2d0>)
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d104      	bne.n	8003aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7ff f830 	bl	8002b00 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003aa4:	e003      	b.n	8003aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7ff f817 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab8:	f040 810c 	bne.w	8003cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	1891      	adds	r1, r2, r2
 8003ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ade:	4621      	mov	r1, r4
 8003ae0:	eb12 0801 	adds.w	r8, r2, r1
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	eb43 0901 	adc.w	r9, r3, r1
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afe:	4690      	mov	r8, r2
 8003b00:	4699      	mov	r9, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	eb18 0303 	adds.w	r3, r8, r3
 8003b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	eb49 0303 	adc.w	r3, r9, r3
 8003b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	18db      	adds	r3, r3, r3
 8003b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b30:	4613      	mov	r3, r2
 8003b32:	eb42 0303 	adc.w	r3, r2, r3
 8003b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b40:	f7fc fb9e 	bl	8000280 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4b61      	ldr	r3, [pc, #388]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	011c      	lsls	r4, r3, #4
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b74:	4641      	mov	r1, r8
 8003b76:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	4692      	mov	sl, r2
 8003b96:	469b      	mov	fp, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	18db      	adds	r3, r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bd6:	f7fc fb53 	bl	8000280 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c04:	441c      	add	r4, r3
 8003c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c20:	415b      	adcs	r3, r3
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c28:	4641      	mov	r1, r8
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c2e:	4649      	mov	r1, r9
 8003c30:	414b      	adcs	r3, r1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c40:	4659      	mov	r1, fp
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4642      	mov	r2, r8
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	460a      	mov	r2, r1
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c92:	f7fc faf5 	bl	8000280 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	@ 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	3332      	adds	r3, #50	@ 0x32
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 0207 	and.w	r2, r3, #7
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4422      	add	r2, r4
 8003cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc4:	e106      	b.n	8003ed4 <UART_SetConfig+0x4d8>
 8003cc6:	bf00      	nop
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ce6:	4642      	mov	r2, r8
 8003ce8:	464b      	mov	r3, r9
 8003cea:	1891      	adds	r1, r2, r2
 8003cec:	6239      	str	r1, [r7, #32]
 8003cee:	415b      	adcs	r3, r3
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	1854      	adds	r4, r2, r1
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	eb43 0501 	adc.w	r5, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	eb45 0303 	adc.w	r3, r5, r3
 8003d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d42:	4629      	mov	r1, r5
 8003d44:	008b      	lsls	r3, r1, #2
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	008a      	lsls	r2, r1, #2
 8003d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d54:	f7fc fa94 	bl	8000280 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b60      	ldr	r3, [pc, #384]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	61b9      	str	r1, [r7, #24]
 8003d80:	415b      	adcs	r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6139      	str	r1, [r7, #16]
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003de0:	4649      	mov	r1, r9
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dea:	4641      	mov	r1, r8
 8003dec:	008a      	lsls	r2, r1, #2
 8003dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003df2:	f7fc fa45 	bl	8000280 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2264      	movs	r2, #100	@ 0x64
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	1acb      	subs	r3, r1, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	@ 0x32
 8003e10:	4a33      	ldr	r2, [pc, #204]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1c:	441c      	add	r4, r3
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	415b      	adcs	r3, r3
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	1851      	adds	r1, r2, r1
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	4649      	mov	r1, r9
 8003e44:	414b      	adcs	r3, r1
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e54:	4659      	mov	r1, fp
 8003e56:	00cb      	lsls	r3, r1, #3
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5e:	4651      	mov	r1, sl
 8003e60:	00ca      	lsls	r2, r1, #3
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e6e:	464b      	mov	r3, r9
 8003e70:	460a      	mov	r2, r1
 8003e72:	eb42 0303 	adc.w	r3, r2, r3
 8003e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e90:	4649      	mov	r1, r9
 8003e92:	008b      	lsls	r3, r1, #2
 8003e94:	4641      	mov	r1, r8
 8003e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	008a      	lsls	r2, r1, #2
 8003e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ea2:	f7fc f9ed 	bl	8000280 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	@ 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	3332      	adds	r3, #50	@ 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 020f 	and.w	r2, r3, #15
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4422      	add	r2, r4
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <_ZN11TimeManager11getTimeSpanEv>:

	/*
	 * Returns an instance of a TimeSpan
	 * return value: TimeSpan struct instance
	 */
	TimeSpan getTimeSpan() { return passage_of_time_;}
 8003ee4:	b4b0      	push	{r4, r5, r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	6811      	ldr	r1, [r2, #0]
 8003ef4:	6855      	ldr	r5, [r2, #4]
 8003ef6:	6894      	ldr	r4, [r2, #8]
 8003ef8:	68d0      	ldr	r0, [r2, #12]
 8003efa:	6019      	str	r1, [r3, #0]
 8003efc:	605d      	str	r5, [r3, #4]
 8003efe:	609c      	str	r4, [r3, #8]
 8003f00:	60d8      	str	r0, [r3, #12]
 8003f02:	6911      	ldr	r1, [r2, #16]
 8003f04:	6119      	str	r1, [r3, #16]
 8003f06:	7d12      	ldrb	r2, [r2, #20]
 8003f08:	751a      	strb	r2, [r3, #20]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bcb0      	pop	{r4, r5, r7}
 8003f12:	4770      	bx	lr

08003f14 <_ZN8Time_RTCC1EP17I2C_HandleTypeDefbhhhhhhh>:
 *      Author: Fola Fatola
 */

#include "rtc.hpp"

Time_RTC::Time_RTC(I2C_HandleTypeDef *i2c_handle, bool use_twenty_four_hour_time,
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b08b      	sub	sp, #44	@ 0x2c
 8003f18:	af06      	add	r7, sp, #24
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	460b      	mov	r3, r1
 8003f24:	71fb      	strb	r3, [r7, #7]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71bb      	strb	r3, [r7, #6]
		uint8_t seconds, uint8_t minutes,
		uint8_t hours, uint8_t week_day,
		uint8_t date_day, uint8_t month, uint8_t year) :
	i2c_handle_{i2c_handle}, twenty_four_hour_time{use_twenty_four_hour_time},
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	79fa      	ldrb	r2, [r7, #7]
 8003f34:	711a      	strb	r2, [r3, #4]
	tim_manager_{TimeManager(seconds, minutes, hours, week_day, date_day, month, year, use_twenty_four_hour_time)}{}
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1d58      	adds	r0, r3, #5
 8003f3a:	f897 4024 	ldrb.w	r4, [r7, #36]	@ 0x24
 8003f3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f42:	79b9      	ldrb	r1, [r7, #6]
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	9304      	str	r3, [sp, #16]
 8003f48:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	4623      	mov	r3, r4
 8003f62:	f000 f8b1 	bl	80040c8 <_ZN11TimeManagerC1Ehhhhhhhb>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd90      	pop	{r4, r7, pc}

08003f70 <_ZN8Time_RTC13rtc_write_regEhPh>:

RTC_Status_E Time_RTC::rtc_write_reg(uint8_t register_address, uint8_t *transmit_data) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af04      	add	r7, sp, #16
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	72fb      	strb	r3, [r7, #11]
	if (i2c_handle_ == nullptr) {
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <_ZN8Time_RTC13rtc_write_regEhPh+0x1a>
		return RTC_NULL_I2C_HANDLE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e018      	b.n	8003fbc <_ZN8Time_RTC13rtc_write_regEhPh+0x4c>
	}

	if (HAL_I2C_Mem_Write(i2c_handle_, DEVICE_ADDR, register_address, MEM_ADDR_SIZE, transmit_data, 1, TIMEOUT) != HAL_OK) {
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	2364      	movs	r3, #100	@ 0x64
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	2301      	movs	r3, #1
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	21d0      	movs	r1, #208	@ 0xd0
 8003fa2:	f7fd fdff 	bl	8001ba4 <HAL_I2C_Mem_Write>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <_ZN8Time_RTC13rtc_write_regEhPh+0x4a>
		return RTC_INIT_FAIL;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e000      	b.n	8003fbc <_ZN8Time_RTC13rtc_write_regEhPh+0x4c>
	}

	return RTC_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_ZN8Time_RTC8rtc_initEv>:

	return RTC_OK;
}


RTC_Status_E Time_RTC::rtc_init() {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b090      	sub	sp, #64	@ 0x40
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	RTC_Status_E status = RTC_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	//rtc register stores data in bcd format.
	status = tim_manager_.convert_decimal_time_to_bcd();
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3305      	adds	r3, #5
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f8f2 	bl	80041c0 <_ZN11TimeManager27convert_decimal_time_to_bcdEv>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (status != RTC_OK) {
 8003fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <_ZN8Time_RTC8rtc_initEv+0x2c>
		return status;
 8003fea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fee:	e064      	b.n	80040ba <_ZN8Time_RTC8rtc_initEv+0xf6>
	}

	TimeSpan time_span = tim_manager_.getTimeSpan();
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	1d5a      	adds	r2, r3, #5
 8003ff4:	f107 031c 	add.w	r3, r7, #28
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff72 	bl	8003ee4 <_ZN11TimeManager11getTimeSpanEv>

	//fetch the initial values for each of the units of time.
	//Each value of time will be written to a register corresponding to its unit.
	uint8_t seconds = time_span.seconds_.time_value;
 8004000:	7f7b      	ldrb	r3, [r7, #29]
 8004002:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t minutes = time_span.minutes_.time_value;
 8004006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800400a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t hours = time_span.hours_.time_value;
 800400e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004012:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t date_day = time_span.date_day_.time_value;
 8004016:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800401a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t week_day = time_span.week_day_.time_value;
 800401e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004022:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t month = time_span.month_.time_value;
 8004026:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800402a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t year = time_span.year_.time_value;
 800402e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004032:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	uint8_t bcd_time[7] = {seconds, minutes, hours,
			date_day, week_day, month, year};
 8004036:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800403a:	753b      	strb	r3, [r7, #20]
 800403c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004040:	757b      	strb	r3, [r7, #21]
 8004042:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004046:	75bb      	strb	r3, [r7, #22]
 8004048:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800404c:	75fb      	strb	r3, [r7, #23]
 800404e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004052:	763b      	strb	r3, [r7, #24]
 8004054:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004058:	767b      	strb	r3, [r7, #25]
 800405a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800405e:	76bb      	strb	r3, [r7, #26]

	uint8_t time_registers[7] = {SECONDS_REG, MINUTES_REG, HOURS_REG,
 8004060:	4a18      	ldr	r2, [pc, #96]	@ (80040c4 <_ZN8Time_RTC8rtc_initEv+0x100>)
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406a:	6018      	str	r0, [r3, #0]
 800406c:	3304      	adds	r3, #4
 800406e:	8019      	strh	r1, [r3, #0]
 8004070:	3302      	adds	r3, #2
 8004072:	0c0a      	lsrs	r2, r1, #16
 8004074:	701a      	strb	r2, [r3, #0]
			WEEK_DAY_REG, DATE_DAY_REG, MONTH_REG, YEAR_REG};

	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 8004076:	2300      	movs	r3, #0
 8004078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800407a:	e019      	b.n	80040b0 <_ZN8Time_RTC8rtc_initEv+0xec>
		//write the time values to the time registers.
		status = rtc_write_reg(time_registers[time_unit_idx], &(bcd_time[time_unit_idx]));
 800407c:	f107 020c 	add.w	r2, r7, #12
 8004080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004082:	4413      	add	r3, r2
 8004084:	7819      	ldrb	r1, [r3, #0]
 8004086:	f107 0214 	add.w	r2, r7, #20
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	4413      	add	r3, r2
 800408e:	461a      	mov	r2, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff6d 	bl	8003f70 <_ZN8Time_RTC13rtc_write_regEhPh>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (status != RTC_OK) {			//if the write fails, return error code.
 800409c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <_ZN8Time_RTC8rtc_initEv+0xe6>
			return status;
 80040a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040a8:	e007      	b.n	80040ba <_ZN8Time_RTC8rtc_initEv+0xf6>
	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	3301      	adds	r3, #1
 80040ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	dde2      	ble.n	800407c <_ZN8Time_RTC8rtc_initEv+0xb8>
		}
	}

	return status;
 80040b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3740      	adds	r7, #64	@ 0x40
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	0800527c 	.word	0x0800527c

080040c8 <_ZN11TimeManagerC1Ehhhhhhhb>:

#include "timeunit.hpp"
#include <climits>


TimeManager::TimeManager(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t week_day, uint8_t date_day, uint8_t month, uint8_t year, bool use_twenty_four_hour_time) {
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	70fb      	strb	r3, [r7, #3]
 80040da:	460b      	mov	r3, r1
 80040dc:	70bb      	strb	r3, [r7, #2]
 80040de:	4613      	mov	r3, r2
 80040e0:	707b      	strb	r3, [r7, #1]
	passage_of_time_.seconds_.time_type = SECONDS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
	passage_of_time_.seconds_.time_value = seconds;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	705a      	strb	r2, [r3, #1]
	passage_of_time_.seconds_.max_time = 60;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223c      	movs	r2, #60	@ 0x3c
 80040f2:	709a      	strb	r2, [r3, #2]

	passage_of_time_.minutes_.time_type = MINUTES;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	70da      	strb	r2, [r3, #3]
	passage_of_time_.minutes_.time_value = minutes;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	78ba      	ldrb	r2, [r7, #2]
 80040fe:	711a      	strb	r2, [r3, #4]
	passage_of_time_.minutes_.max_time = 60;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	223c      	movs	r2, #60	@ 0x3c
 8004104:	715a      	strb	r2, [r3, #5]

	passage_of_time_.hours_.time_type = HOURS;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	719a      	strb	r2, [r3, #6]
	passage_of_time_.hours_.time_value = hours;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	787a      	ldrb	r2, [r7, #1]
 8004110:	71da      	strb	r2, [r3, #7]

	if (use_twenty_four_hour_time) {
 8004112:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <_ZN11TimeManagerC1Ehhhhhhhb+0x5a>
		passage_of_time_.hours_.max_time = 24;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2218      	movs	r2, #24
 800411e:	721a      	strb	r2, [r3, #8]
 8004120:	e002      	b.n	8004128 <_ZN11TimeManagerC1Ehhhhhhhb+0x60>
	} else {
		passage_of_time_.hours_.max_time = 12;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	220c      	movs	r2, #12
 8004126:	721a      	strb	r2, [r3, #8]
	}

	passage_of_time_.week_day_.time_type = WEEK_DAY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2203      	movs	r2, #3
 800412c:	725a      	strb	r2, [r3, #9]
	passage_of_time_.week_day_.time_value = week_day;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7c3a      	ldrb	r2, [r7, #16]
 8004132:	729a      	strb	r2, [r3, #10]
	passage_of_time_.week_day_.max_time = 7;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2207      	movs	r2, #7
 8004138:	72da      	strb	r2, [r3, #11]

	passage_of_time_.month_.time_type = MONTH;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2205      	movs	r2, #5
 800413e:	73da      	strb	r2, [r3, #15]
	passage_of_time_.month_.time_value = month;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7e3a      	ldrb	r2, [r7, #24]
 8004144:	741a      	strb	r2, [r3, #16]
	passage_of_time_.month_.max_time = 12;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	220c      	movs	r2, #12
 800414a:	745a      	strb	r2, [r3, #17]


	passage_of_time_.date_day_.time_type = DATE_DAY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	731a      	strb	r2, [r3, #12]
	passage_of_time_.date_day_.time_value = date_day;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7d3a      	ldrb	r2, [r7, #20]
 8004156:	735a      	strb	r2, [r3, #13]

	if (month == JANUARY || month == MARCH
 8004158:	7e3b      	ldrb	r3, [r7, #24]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d011      	beq.n	8004182 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 800415e:	7e3b      	ldrb	r3, [r7, #24]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d00e      	beq.n	8004182 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
	 || month == MAY || month == JULY || month == AUGUST
 8004164:	7e3b      	ldrb	r3, [r7, #24]
 8004166:	2b05      	cmp	r3, #5
 8004168:	d00b      	beq.n	8004182 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 800416a:	7e3b      	ldrb	r3, [r7, #24]
 800416c:	2b07      	cmp	r3, #7
 800416e:	d008      	beq.n	8004182 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 8004170:	7e3b      	ldrb	r3, [r7, #24]
 8004172:	2b08      	cmp	r3, #8
 8004174:	d005      	beq.n	8004182 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
	 || month == OCTOBER || month == DECEMBER){
 8004176:	7e3b      	ldrb	r3, [r7, #24]
 8004178:	2b0a      	cmp	r3, #10
 800417a:	d002      	beq.n	8004182 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 800417c:	7e3b      	ldrb	r3, [r7, #24]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d103      	bne.n	800418a <_ZN11TimeManagerC1Ehhhhhhhb+0xc2>
		passage_of_time_.date_day_.max_time = 31;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	221f      	movs	r2, #31
 8004186:	739a      	strb	r2, [r3, #14]
 8004188:	e009      	b.n	800419e <_ZN11TimeManagerC1Ehhhhhhhb+0xd6>
	} else if (month == FEBRUARY) {							//We are NOT, doing leap year
 800418a:	7e3b      	ldrb	r3, [r7, #24]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d103      	bne.n	8004198 <_ZN11TimeManagerC1Ehhhhhhhb+0xd0>
		passage_of_time_.date_day_.max_time = 28;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	221c      	movs	r2, #28
 8004194:	739a      	strb	r2, [r3, #14]
 8004196:	e002      	b.n	800419e <_ZN11TimeManagerC1Ehhhhhhhb+0xd6>
	} else {
		passage_of_time_.date_day_.max_time = 30;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	221e      	movs	r2, #30
 800419c:	739a      	strb	r2, [r3, #14]
	}

	passage_of_time_.year_.time_type = YEAR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2206      	movs	r2, #6
 80041a2:	749a      	strb	r2, [r3, #18]
	passage_of_time_.year_.time_value = year;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7f3a      	ldrb	r2, [r7, #28]
 80041a8:	74da      	strb	r2, [r3, #19]
	passage_of_time_.year_.max_time = 99;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2263      	movs	r2, #99	@ 0x63
 80041ae:	751a      	strb	r2, [r3, #20]
}
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <_ZN11TimeManager27convert_decimal_time_to_bcdEv>:
	passage_of_time_.date_day_.time_value = date_day;
	passage_of_time_.month_.time_value = month;
	passage_of_time_.year_.time_value = year;
}

RTC_Status_E TimeManager::convert_decimal_time_to_bcd() {
 80041c0:	b480      	push	{r7}
 80041c2:	b08d      	sub	sp, #52	@ 0x34
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 80041c8:	687b      	ldr	r3, [r7, #4]
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 80041ca:	60fb      	str	r3, [r7, #12]
	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3303      	adds	r3, #3
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 80041d0:	613b      	str	r3, [r7, #16]
	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3306      	adds	r3, #6
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3309      	adds	r3, #9
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	330c      	adds	r3, #12
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	330f      	adds	r3, #15
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3312      	adds	r3, #18
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f4:	e05a      	b.n	80042ac <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0xec>
    	if (decimal_time[tim_unit_idx]->time_value > decimal_time[tim_unit_idx]->max_time) {
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	3330      	adds	r3, #48	@ 0x30
 80041fc:	443b      	add	r3, r7
 80041fe:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004202:	785a      	ldrb	r2, [r3, #1]
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3330      	adds	r3, #48	@ 0x30
 800420a:	443b      	add	r3, r7
 800420c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004210:	789b      	ldrb	r3, [r3, #2]
 8004212:	429a      	cmp	r2, r3
 8004214:	d901      	bls.n	800421a <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x5a>
    		return RTC_DATA_TOO_LARGE;
 8004216:	2304      	movs	r3, #4
 8004218:	e04c      	b.n	80042b4 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0xf4>
    	}

    	//TODO: add century and millenia calculations.
    	uint8_t ones = decimal_time[tim_unit_idx]->time_value % 10;
 800421a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	3330      	adds	r3, #48	@ 0x30
 8004220:	443b      	add	r3, r7
 8004222:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004226:	785a      	ldrb	r2, [r3, #1]
 8004228:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 800422a:	fba3 1302 	umull	r1, r3, r3, r2
 800422e:	08d9      	lsrs	r1, r3, #3
 8004230:	460b      	mov	r3, r1
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		decimal_time[tim_unit_idx]->time_value /= 10;
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	3330      	adds	r3, #48	@ 0x30
 8004244:	443b      	add	r3, r7
 8004246:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800424a:	785a      	ldrb	r2, [r3, #1]
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	3330      	adds	r3, #48	@ 0x30
 8004252:	443b      	add	r3, r7
 8004254:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004258:	4919      	ldr	r1, [pc, #100]	@ (80042c0 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 800425a:	fba1 1202 	umull	r1, r2, r1, r2
 800425e:	08d2      	lsrs	r2, r2, #3
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	705a      	strb	r2, [r3, #1]
		uint8_t tens = decimal_time[tim_unit_idx]->time_value % 10;
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	3330      	adds	r3, #48	@ 0x30
 800426a:	443b      	add	r3, r7
 800426c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004270:	785a      	ldrb	r2, [r3, #1]
 8004272:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 8004274:	fba3 1302 	umull	r1, r3, r3, r2
 8004278:	08d9      	lsrs	r1, r3, #3
 800427a:	460b      	mov	r3, r1
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		decimal_time[tim_unit_idx]->time_value = ones + (tens << 4);
 8004288:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	b2d9      	uxtb	r1, r3
 8004290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3330      	adds	r3, #48	@ 0x30
 8004296:	443b      	add	r3, r7
 8004298:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800429c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80042a0:	440a      	add	r2, r1
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	705a      	strb	r2, [r3, #1]
    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	3301      	adds	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	dda1      	ble.n	80041f6 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x36>
    }

    return RTC_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3734      	adds	r7, #52	@ 0x34
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	cccccccd 	.word	0xcccccccd

080042c4 <std>:
 80042c4:	2300      	movs	r3, #0
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	e9c0 3300 	strd	r3, r3, [r0]
 80042ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042d2:	6083      	str	r3, [r0, #8]
 80042d4:	8181      	strh	r1, [r0, #12]
 80042d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d8:	81c2      	strh	r2, [r0, #14]
 80042da:	6183      	str	r3, [r0, #24]
 80042dc:	4619      	mov	r1, r3
 80042de:	2208      	movs	r2, #8
 80042e0:	305c      	adds	r0, #92	@ 0x5c
 80042e2:	f000 f921 	bl	8004528 <memset>
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x58>)
 80042e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x5c>)
 80042ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x60>)
 80042f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x64>)
 80042f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x68>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d006      	beq.n	800430c <std+0x48>
 80042fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004302:	4294      	cmp	r4, r2
 8004304:	d002      	beq.n	800430c <std+0x48>
 8004306:	33d0      	adds	r3, #208	@ 0xd0
 8004308:	429c      	cmp	r4, r3
 800430a:	d105      	bne.n	8004318 <std+0x54>
 800430c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004314:	f000 b93a 	b.w	800458c <__retarget_lock_init_recursive>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	08004de5 	.word	0x08004de5
 8004320:	08004e07 	.word	0x08004e07
 8004324:	08004e3f 	.word	0x08004e3f
 8004328:	08004e63 	.word	0x08004e63
 800432c:	20000180 	.word	0x20000180

08004330 <stdio_exit_handler>:
 8004330:	4a02      	ldr	r2, [pc, #8]	@ (800433c <stdio_exit_handler+0xc>)
 8004332:	4903      	ldr	r1, [pc, #12]	@ (8004340 <stdio_exit_handler+0x10>)
 8004334:	4803      	ldr	r0, [pc, #12]	@ (8004344 <stdio_exit_handler+0x14>)
 8004336:	f000 b869 	b.w	800440c <_fwalk_sglue>
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c
 8004340:	08004d7d 	.word	0x08004d7d
 8004344:	2000001c 	.word	0x2000001c

08004348 <cleanup_stdio>:
 8004348:	6841      	ldr	r1, [r0, #4]
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <cleanup_stdio+0x34>)
 800434c:	4299      	cmp	r1, r3
 800434e:	b510      	push	{r4, lr}
 8004350:	4604      	mov	r4, r0
 8004352:	d001      	beq.n	8004358 <cleanup_stdio+0x10>
 8004354:	f000 fd12 	bl	8004d7c <_fflush_r>
 8004358:	68a1      	ldr	r1, [r4, #8]
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <cleanup_stdio+0x38>)
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <cleanup_stdio+0x1e>
 8004360:	4620      	mov	r0, r4
 8004362:	f000 fd0b 	bl	8004d7c <_fflush_r>
 8004366:	68e1      	ldr	r1, [r4, #12]
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <cleanup_stdio+0x3c>)
 800436a:	4299      	cmp	r1, r3
 800436c:	d004      	beq.n	8004378 <cleanup_stdio+0x30>
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004374:	f000 bd02 	b.w	8004d7c <_fflush_r>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	20000180 	.word	0x20000180
 8004380:	200001e8 	.word	0x200001e8
 8004384:	20000250 	.word	0x20000250

08004388 <global_stdio_init.part.0>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <global_stdio_init.part.0+0x30>)
 800438c:	4c0b      	ldr	r4, [pc, #44]	@ (80043bc <global_stdio_init.part.0+0x34>)
 800438e:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <global_stdio_init.part.0+0x38>)
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	4620      	mov	r0, r4
 8004394:	2200      	movs	r2, #0
 8004396:	2104      	movs	r1, #4
 8004398:	f7ff ff94 	bl	80042c4 <std>
 800439c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043a0:	2201      	movs	r2, #1
 80043a2:	2109      	movs	r1, #9
 80043a4:	f7ff ff8e 	bl	80042c4 <std>
 80043a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043ac:	2202      	movs	r2, #2
 80043ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b2:	2112      	movs	r1, #18
 80043b4:	f7ff bf86 	b.w	80042c4 <std>
 80043b8:	200002b8 	.word	0x200002b8
 80043bc:	20000180 	.word	0x20000180
 80043c0:	08004331 	.word	0x08004331

080043c4 <__sfp_lock_acquire>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__sfp_lock_acquire+0x8>)
 80043c6:	f000 b8e2 	b.w	800458e <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	200002bd 	.word	0x200002bd

080043d0 <__sfp_lock_release>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__sfp_lock_release+0x8>)
 80043d2:	f000 b8dd 	b.w	8004590 <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	200002bd 	.word	0x200002bd

080043dc <__sinit>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4604      	mov	r4, r0
 80043e0:	f7ff fff0 	bl	80043c4 <__sfp_lock_acquire>
 80043e4:	6a23      	ldr	r3, [r4, #32]
 80043e6:	b11b      	cbz	r3, 80043f0 <__sinit+0x14>
 80043e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ec:	f7ff bff0 	b.w	80043d0 <__sfp_lock_release>
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <__sinit+0x28>)
 80043f2:	6223      	str	r3, [r4, #32]
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__sinit+0x2c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f5      	bne.n	80043e8 <__sinit+0xc>
 80043fc:	f7ff ffc4 	bl	8004388 <global_stdio_init.part.0>
 8004400:	e7f2      	b.n	80043e8 <__sinit+0xc>
 8004402:	bf00      	nop
 8004404:	08004349 	.word	0x08004349
 8004408:	200002b8 	.word	0x200002b8

0800440c <_fwalk_sglue>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	4607      	mov	r7, r0
 8004412:	4688      	mov	r8, r1
 8004414:	4614      	mov	r4, r2
 8004416:	2600      	movs	r6, #0
 8004418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800441c:	f1b9 0901 	subs.w	r9, r9, #1
 8004420:	d505      	bpl.n	800442e <_fwalk_sglue+0x22>
 8004422:	6824      	ldr	r4, [r4, #0]
 8004424:	2c00      	cmp	r4, #0
 8004426:	d1f7      	bne.n	8004418 <_fwalk_sglue+0xc>
 8004428:	4630      	mov	r0, r6
 800442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442e:	89ab      	ldrh	r3, [r5, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d907      	bls.n	8004444 <_fwalk_sglue+0x38>
 8004434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004438:	3301      	adds	r3, #1
 800443a:	d003      	beq.n	8004444 <_fwalk_sglue+0x38>
 800443c:	4629      	mov	r1, r5
 800443e:	4638      	mov	r0, r7
 8004440:	47c0      	blx	r8
 8004442:	4306      	orrs	r6, r0
 8004444:	3568      	adds	r5, #104	@ 0x68
 8004446:	e7e9      	b.n	800441c <_fwalk_sglue+0x10>

08004448 <iprintf>:
 8004448:	b40f      	push	{r0, r1, r2, r3}
 800444a:	b507      	push	{r0, r1, r2, lr}
 800444c:	4906      	ldr	r1, [pc, #24]	@ (8004468 <iprintf+0x20>)
 800444e:	ab04      	add	r3, sp, #16
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	f853 2b04 	ldr.w	r2, [r3], #4
 8004456:	6881      	ldr	r1, [r0, #8]
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	f000 f8c3 	bl	80045e4 <_vfiprintf_r>
 800445e:	b003      	add	sp, #12
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr
 8004468:	20000018 	.word	0x20000018

0800446c <_puts_r>:
 800446c:	6a03      	ldr	r3, [r0, #32]
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	6884      	ldr	r4, [r0, #8]
 8004472:	4605      	mov	r5, r0
 8004474:	460e      	mov	r6, r1
 8004476:	b90b      	cbnz	r3, 800447c <_puts_r+0x10>
 8004478:	f7ff ffb0 	bl	80043dc <__sinit>
 800447c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800447e:	07db      	lsls	r3, r3, #31
 8004480:	d405      	bmi.n	800448e <_puts_r+0x22>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	0598      	lsls	r0, r3, #22
 8004486:	d402      	bmi.n	800448e <_puts_r+0x22>
 8004488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800448a:	f000 f880 	bl	800458e <__retarget_lock_acquire_recursive>
 800448e:	89a3      	ldrh	r3, [r4, #12]
 8004490:	0719      	lsls	r1, r3, #28
 8004492:	d502      	bpl.n	800449a <_puts_r+0x2e>
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d135      	bne.n	8004506 <_puts_r+0x9a>
 800449a:	4621      	mov	r1, r4
 800449c:	4628      	mov	r0, r5
 800449e:	f000 fd23 	bl	8004ee8 <__swsetup_r>
 80044a2:	b380      	cbz	r0, 8004506 <_puts_r+0x9a>
 80044a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80044a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044aa:	07da      	lsls	r2, r3, #31
 80044ac:	d405      	bmi.n	80044ba <_puts_r+0x4e>
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	059b      	lsls	r3, r3, #22
 80044b2:	d402      	bmi.n	80044ba <_puts_r+0x4e>
 80044b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044b6:	f000 f86b 	bl	8004590 <__retarget_lock_release_recursive>
 80044ba:	4628      	mov	r0, r5
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da04      	bge.n	80044cc <_puts_r+0x60>
 80044c2:	69a2      	ldr	r2, [r4, #24]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	dc17      	bgt.n	80044f8 <_puts_r+0x8c>
 80044c8:	290a      	cmp	r1, #10
 80044ca:	d015      	beq.n	80044f8 <_puts_r+0x8c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	7019      	strb	r1, [r3, #0]
 80044d4:	68a3      	ldr	r3, [r4, #8]
 80044d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044da:	3b01      	subs	r3, #1
 80044dc:	60a3      	str	r3, [r4, #8]
 80044de:	2900      	cmp	r1, #0
 80044e0:	d1ed      	bne.n	80044be <_puts_r+0x52>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da11      	bge.n	800450a <_puts_r+0x9e>
 80044e6:	4622      	mov	r2, r4
 80044e8:	210a      	movs	r1, #10
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 fcbd 	bl	8004e6a <__swbuf_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d0d7      	beq.n	80044a4 <_puts_r+0x38>
 80044f4:	250a      	movs	r5, #10
 80044f6:	e7d7      	b.n	80044a8 <_puts_r+0x3c>
 80044f8:	4622      	mov	r2, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 fcb5 	bl	8004e6a <__swbuf_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d1e7      	bne.n	80044d4 <_puts_r+0x68>
 8004504:	e7ce      	b.n	80044a4 <_puts_r+0x38>
 8004506:	3e01      	subs	r6, #1
 8004508:	e7e4      	b.n	80044d4 <_puts_r+0x68>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	220a      	movs	r2, #10
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e7ee      	b.n	80044f4 <_puts_r+0x88>
	...

08004518 <puts>:
 8004518:	4b02      	ldr	r3, [pc, #8]	@ (8004524 <puts+0xc>)
 800451a:	4601      	mov	r1, r0
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f7ff bfa5 	b.w	800446c <_puts_r>
 8004522:	bf00      	nop
 8004524:	20000018 	.word	0x20000018

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	@ (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000018 	.word	0x20000018

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	@ (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	@ (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	@ (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	@ (8004588 <__libc_init_array+0x44>)
 8004558:	f000 fe40 	bl	80051dc <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	080052d8 	.word	0x080052d8
 8004580:	080052d8 	.word	0x080052d8
 8004584:	080052d8 	.word	0x080052d8
 8004588:	080052dc 	.word	0x080052dc

0800458c <__retarget_lock_init_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_acquire_recursive>:
 800458e:	4770      	bx	lr

08004590 <__retarget_lock_release_recursive>:
 8004590:	4770      	bx	lr

08004592 <__sfputc_r>:
 8004592:	6893      	ldr	r3, [r2, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	b410      	push	{r4}
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	da08      	bge.n	80045b0 <__sfputc_r+0x1e>
 800459e:	6994      	ldr	r4, [r2, #24]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	db01      	blt.n	80045a8 <__sfputc_r+0x16>
 80045a4:	290a      	cmp	r1, #10
 80045a6:	d103      	bne.n	80045b0 <__sfputc_r+0x1e>
 80045a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ac:	f000 bc5d 	b.w	8004e6a <__swbuf_r>
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	1c58      	adds	r0, r3, #1
 80045b4:	6010      	str	r0, [r2, #0]
 80045b6:	7019      	strb	r1, [r3, #0]
 80045b8:	4608      	mov	r0, r1
 80045ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <__sfputs_r>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	4606      	mov	r6, r0
 80045c4:	460f      	mov	r7, r1
 80045c6:	4614      	mov	r4, r2
 80045c8:	18d5      	adds	r5, r2, r3
 80045ca:	42ac      	cmp	r4, r5
 80045cc:	d101      	bne.n	80045d2 <__sfputs_r+0x12>
 80045ce:	2000      	movs	r0, #0
 80045d0:	e007      	b.n	80045e2 <__sfputs_r+0x22>
 80045d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d6:	463a      	mov	r2, r7
 80045d8:	4630      	mov	r0, r6
 80045da:	f7ff ffda 	bl	8004592 <__sfputc_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d1f3      	bne.n	80045ca <__sfputs_r+0xa>
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080045e4 <_vfiprintf_r>:
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	460d      	mov	r5, r1
 80045ea:	b09d      	sub	sp, #116	@ 0x74
 80045ec:	4614      	mov	r4, r2
 80045ee:	4698      	mov	r8, r3
 80045f0:	4606      	mov	r6, r0
 80045f2:	b118      	cbz	r0, 80045fc <_vfiprintf_r+0x18>
 80045f4:	6a03      	ldr	r3, [r0, #32]
 80045f6:	b90b      	cbnz	r3, 80045fc <_vfiprintf_r+0x18>
 80045f8:	f7ff fef0 	bl	80043dc <__sinit>
 80045fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045fe:	07d9      	lsls	r1, r3, #31
 8004600:	d405      	bmi.n	800460e <_vfiprintf_r+0x2a>
 8004602:	89ab      	ldrh	r3, [r5, #12]
 8004604:	059a      	lsls	r2, r3, #22
 8004606:	d402      	bmi.n	800460e <_vfiprintf_r+0x2a>
 8004608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800460a:	f7ff ffc0 	bl	800458e <__retarget_lock_acquire_recursive>
 800460e:	89ab      	ldrh	r3, [r5, #12]
 8004610:	071b      	lsls	r3, r3, #28
 8004612:	d501      	bpl.n	8004618 <_vfiprintf_r+0x34>
 8004614:	692b      	ldr	r3, [r5, #16]
 8004616:	b99b      	cbnz	r3, 8004640 <_vfiprintf_r+0x5c>
 8004618:	4629      	mov	r1, r5
 800461a:	4630      	mov	r0, r6
 800461c:	f000 fc64 	bl	8004ee8 <__swsetup_r>
 8004620:	b170      	cbz	r0, 8004640 <_vfiprintf_r+0x5c>
 8004622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004624:	07dc      	lsls	r4, r3, #31
 8004626:	d504      	bpl.n	8004632 <_vfiprintf_r+0x4e>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800462c:	b01d      	add	sp, #116	@ 0x74
 800462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	0598      	lsls	r0, r3, #22
 8004636:	d4f7      	bmi.n	8004628 <_vfiprintf_r+0x44>
 8004638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800463a:	f7ff ffa9 	bl	8004590 <__retarget_lock_release_recursive>
 800463e:	e7f3      	b.n	8004628 <_vfiprintf_r+0x44>
 8004640:	2300      	movs	r3, #0
 8004642:	9309      	str	r3, [sp, #36]	@ 0x24
 8004644:	2320      	movs	r3, #32
 8004646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800464a:	f8cd 800c 	str.w	r8, [sp, #12]
 800464e:	2330      	movs	r3, #48	@ 0x30
 8004650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004800 <_vfiprintf_r+0x21c>
 8004654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004658:	f04f 0901 	mov.w	r9, #1
 800465c:	4623      	mov	r3, r4
 800465e:	469a      	mov	sl, r3
 8004660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004664:	b10a      	cbz	r2, 800466a <_vfiprintf_r+0x86>
 8004666:	2a25      	cmp	r2, #37	@ 0x25
 8004668:	d1f9      	bne.n	800465e <_vfiprintf_r+0x7a>
 800466a:	ebba 0b04 	subs.w	fp, sl, r4
 800466e:	d00b      	beq.n	8004688 <_vfiprintf_r+0xa4>
 8004670:	465b      	mov	r3, fp
 8004672:	4622      	mov	r2, r4
 8004674:	4629      	mov	r1, r5
 8004676:	4630      	mov	r0, r6
 8004678:	f7ff ffa2 	bl	80045c0 <__sfputs_r>
 800467c:	3001      	adds	r0, #1
 800467e:	f000 80a7 	beq.w	80047d0 <_vfiprintf_r+0x1ec>
 8004682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004684:	445a      	add	r2, fp
 8004686:	9209      	str	r2, [sp, #36]	@ 0x24
 8004688:	f89a 3000 	ldrb.w	r3, [sl]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 809f 	beq.w	80047d0 <_vfiprintf_r+0x1ec>
 8004692:	2300      	movs	r3, #0
 8004694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800469c:	f10a 0a01 	add.w	sl, sl, #1
 80046a0:	9304      	str	r3, [sp, #16]
 80046a2:	9307      	str	r3, [sp, #28]
 80046a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80046aa:	4654      	mov	r4, sl
 80046ac:	2205      	movs	r2, #5
 80046ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b2:	4853      	ldr	r0, [pc, #332]	@ (8004800 <_vfiprintf_r+0x21c>)
 80046b4:	f7fb fd94 	bl	80001e0 <memchr>
 80046b8:	9a04      	ldr	r2, [sp, #16]
 80046ba:	b9d8      	cbnz	r0, 80046f4 <_vfiprintf_r+0x110>
 80046bc:	06d1      	lsls	r1, r2, #27
 80046be:	bf44      	itt	mi
 80046c0:	2320      	movmi	r3, #32
 80046c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046c6:	0713      	lsls	r3, r2, #28
 80046c8:	bf44      	itt	mi
 80046ca:	232b      	movmi	r3, #43	@ 0x2b
 80046cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046d0:	f89a 3000 	ldrb.w	r3, [sl]
 80046d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d6:	d015      	beq.n	8004704 <_vfiprintf_r+0x120>
 80046d8:	9a07      	ldr	r2, [sp, #28]
 80046da:	4654      	mov	r4, sl
 80046dc:	2000      	movs	r0, #0
 80046de:	f04f 0c0a 	mov.w	ip, #10
 80046e2:	4621      	mov	r1, r4
 80046e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e8:	3b30      	subs	r3, #48	@ 0x30
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	d94b      	bls.n	8004786 <_vfiprintf_r+0x1a2>
 80046ee:	b1b0      	cbz	r0, 800471e <_vfiprintf_r+0x13a>
 80046f0:	9207      	str	r2, [sp, #28]
 80046f2:	e014      	b.n	800471e <_vfiprintf_r+0x13a>
 80046f4:	eba0 0308 	sub.w	r3, r0, r8
 80046f8:	fa09 f303 	lsl.w	r3, r9, r3
 80046fc:	4313      	orrs	r3, r2
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	46a2      	mov	sl, r4
 8004702:	e7d2      	b.n	80046aa <_vfiprintf_r+0xc6>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	1d19      	adds	r1, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	9103      	str	r1, [sp, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	bfbb      	ittet	lt
 8004710:	425b      	neglt	r3, r3
 8004712:	f042 0202 	orrlt.w	r2, r2, #2
 8004716:	9307      	strge	r3, [sp, #28]
 8004718:	9307      	strlt	r3, [sp, #28]
 800471a:	bfb8      	it	lt
 800471c:	9204      	strlt	r2, [sp, #16]
 800471e:	7823      	ldrb	r3, [r4, #0]
 8004720:	2b2e      	cmp	r3, #46	@ 0x2e
 8004722:	d10a      	bne.n	800473a <_vfiprintf_r+0x156>
 8004724:	7863      	ldrb	r3, [r4, #1]
 8004726:	2b2a      	cmp	r3, #42	@ 0x2a
 8004728:	d132      	bne.n	8004790 <_vfiprintf_r+0x1ac>
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9203      	str	r2, [sp, #12]
 8004732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004736:	3402      	adds	r4, #2
 8004738:	9305      	str	r3, [sp, #20]
 800473a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004810 <_vfiprintf_r+0x22c>
 800473e:	7821      	ldrb	r1, [r4, #0]
 8004740:	2203      	movs	r2, #3
 8004742:	4650      	mov	r0, sl
 8004744:	f7fb fd4c 	bl	80001e0 <memchr>
 8004748:	b138      	cbz	r0, 800475a <_vfiprintf_r+0x176>
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	eba0 000a 	sub.w	r0, r0, sl
 8004750:	2240      	movs	r2, #64	@ 0x40
 8004752:	4082      	lsls	r2, r0
 8004754:	4313      	orrs	r3, r2
 8004756:	3401      	adds	r4, #1
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475e:	4829      	ldr	r0, [pc, #164]	@ (8004804 <_vfiprintf_r+0x220>)
 8004760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004764:	2206      	movs	r2, #6
 8004766:	f7fb fd3b 	bl	80001e0 <memchr>
 800476a:	2800      	cmp	r0, #0
 800476c:	d03f      	beq.n	80047ee <_vfiprintf_r+0x20a>
 800476e:	4b26      	ldr	r3, [pc, #152]	@ (8004808 <_vfiprintf_r+0x224>)
 8004770:	bb1b      	cbnz	r3, 80047ba <_vfiprintf_r+0x1d6>
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	3307      	adds	r3, #7
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	3308      	adds	r3, #8
 800477c:	9303      	str	r3, [sp, #12]
 800477e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004780:	443b      	add	r3, r7
 8004782:	9309      	str	r3, [sp, #36]	@ 0x24
 8004784:	e76a      	b.n	800465c <_vfiprintf_r+0x78>
 8004786:	fb0c 3202 	mla	r2, ip, r2, r3
 800478a:	460c      	mov	r4, r1
 800478c:	2001      	movs	r0, #1
 800478e:	e7a8      	b.n	80046e2 <_vfiprintf_r+0xfe>
 8004790:	2300      	movs	r3, #0
 8004792:	3401      	adds	r4, #1
 8004794:	9305      	str	r3, [sp, #20]
 8004796:	4619      	mov	r1, r3
 8004798:	f04f 0c0a 	mov.w	ip, #10
 800479c:	4620      	mov	r0, r4
 800479e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047a2:	3a30      	subs	r2, #48	@ 0x30
 80047a4:	2a09      	cmp	r2, #9
 80047a6:	d903      	bls.n	80047b0 <_vfiprintf_r+0x1cc>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0c6      	beq.n	800473a <_vfiprintf_r+0x156>
 80047ac:	9105      	str	r1, [sp, #20]
 80047ae:	e7c4      	b.n	800473a <_vfiprintf_r+0x156>
 80047b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80047b4:	4604      	mov	r4, r0
 80047b6:	2301      	movs	r3, #1
 80047b8:	e7f0      	b.n	800479c <_vfiprintf_r+0x1b8>
 80047ba:	ab03      	add	r3, sp, #12
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	462a      	mov	r2, r5
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <_vfiprintf_r+0x228>)
 80047c2:	a904      	add	r1, sp, #16
 80047c4:	4630      	mov	r0, r6
 80047c6:	f3af 8000 	nop.w
 80047ca:	4607      	mov	r7, r0
 80047cc:	1c78      	adds	r0, r7, #1
 80047ce:	d1d6      	bne.n	800477e <_vfiprintf_r+0x19a>
 80047d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047d2:	07d9      	lsls	r1, r3, #31
 80047d4:	d405      	bmi.n	80047e2 <_vfiprintf_r+0x1fe>
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	059a      	lsls	r2, r3, #22
 80047da:	d402      	bmi.n	80047e2 <_vfiprintf_r+0x1fe>
 80047dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047de:	f7ff fed7 	bl	8004590 <__retarget_lock_release_recursive>
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	065b      	lsls	r3, r3, #25
 80047e6:	f53f af1f 	bmi.w	8004628 <_vfiprintf_r+0x44>
 80047ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047ec:	e71e      	b.n	800462c <_vfiprintf_r+0x48>
 80047ee:	ab03      	add	r3, sp, #12
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	462a      	mov	r2, r5
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <_vfiprintf_r+0x228>)
 80047f6:	a904      	add	r1, sp, #16
 80047f8:	4630      	mov	r0, r6
 80047fa:	f000 f91b 	bl	8004a34 <_printf_i>
 80047fe:	e7e4      	b.n	80047ca <_vfiprintf_r+0x1e6>
 8004800:	0800529c 	.word	0x0800529c
 8004804:	080052a6 	.word	0x080052a6
 8004808:	00000000 	.word	0x00000000
 800480c:	080045c1 	.word	0x080045c1
 8004810:	080052a2 	.word	0x080052a2

08004814 <sbrk_aligned>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4e0f      	ldr	r6, [pc, #60]	@ (8004854 <sbrk_aligned+0x40>)
 8004818:	460c      	mov	r4, r1
 800481a:	6831      	ldr	r1, [r6, #0]
 800481c:	4605      	mov	r5, r0
 800481e:	b911      	cbnz	r1, 8004826 <sbrk_aligned+0x12>
 8004820:	f000 fc70 	bl	8005104 <_sbrk_r>
 8004824:	6030      	str	r0, [r6, #0]
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fc6b 	bl	8005104 <_sbrk_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d103      	bne.n	800483a <sbrk_aligned+0x26>
 8004832:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004836:	4620      	mov	r0, r4
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	1cc4      	adds	r4, r0, #3
 800483c:	f024 0403 	bic.w	r4, r4, #3
 8004840:	42a0      	cmp	r0, r4
 8004842:	d0f8      	beq.n	8004836 <sbrk_aligned+0x22>
 8004844:	1a21      	subs	r1, r4, r0
 8004846:	4628      	mov	r0, r5
 8004848:	f000 fc5c 	bl	8005104 <_sbrk_r>
 800484c:	3001      	adds	r0, #1
 800484e:	d1f2      	bne.n	8004836 <sbrk_aligned+0x22>
 8004850:	e7ef      	b.n	8004832 <sbrk_aligned+0x1e>
 8004852:	bf00      	nop
 8004854:	200002c0 	.word	0x200002c0

08004858 <_malloc_r>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	1ccd      	adds	r5, r1, #3
 800485e:	f025 0503 	bic.w	r5, r5, #3
 8004862:	3508      	adds	r5, #8
 8004864:	2d0c      	cmp	r5, #12
 8004866:	bf38      	it	cc
 8004868:	250c      	movcc	r5, #12
 800486a:	2d00      	cmp	r5, #0
 800486c:	4606      	mov	r6, r0
 800486e:	db01      	blt.n	8004874 <_malloc_r+0x1c>
 8004870:	42a9      	cmp	r1, r5
 8004872:	d904      	bls.n	800487e <_malloc_r+0x26>
 8004874:	230c      	movs	r3, #12
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	2000      	movs	r0, #0
 800487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004954 <_malloc_r+0xfc>
 8004882:	f000 faa3 	bl	8004dcc <__malloc_lock>
 8004886:	f8d8 3000 	ldr.w	r3, [r8]
 800488a:	461c      	mov	r4, r3
 800488c:	bb44      	cbnz	r4, 80048e0 <_malloc_r+0x88>
 800488e:	4629      	mov	r1, r5
 8004890:	4630      	mov	r0, r6
 8004892:	f7ff ffbf 	bl	8004814 <sbrk_aligned>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	4604      	mov	r4, r0
 800489a:	d158      	bne.n	800494e <_malloc_r+0xf6>
 800489c:	f8d8 4000 	ldr.w	r4, [r8]
 80048a0:	4627      	mov	r7, r4
 80048a2:	2f00      	cmp	r7, #0
 80048a4:	d143      	bne.n	800492e <_malloc_r+0xd6>
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	d04b      	beq.n	8004942 <_malloc_r+0xea>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	4639      	mov	r1, r7
 80048ae:	4630      	mov	r0, r6
 80048b0:	eb04 0903 	add.w	r9, r4, r3
 80048b4:	f000 fc26 	bl	8005104 <_sbrk_r>
 80048b8:	4581      	cmp	r9, r0
 80048ba:	d142      	bne.n	8004942 <_malloc_r+0xea>
 80048bc:	6821      	ldr	r1, [r4, #0]
 80048be:	1a6d      	subs	r5, r5, r1
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ffa6 	bl	8004814 <sbrk_aligned>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d03a      	beq.n	8004942 <_malloc_r+0xea>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	442b      	add	r3, r5
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	f8d8 3000 	ldr.w	r3, [r8]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	bb62      	cbnz	r2, 8004934 <_malloc_r+0xdc>
 80048da:	f8c8 7000 	str.w	r7, [r8]
 80048de:	e00f      	b.n	8004900 <_malloc_r+0xa8>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	1b52      	subs	r2, r2, r5
 80048e4:	d420      	bmi.n	8004928 <_malloc_r+0xd0>
 80048e6:	2a0b      	cmp	r2, #11
 80048e8:	d917      	bls.n	800491a <_malloc_r+0xc2>
 80048ea:	1961      	adds	r1, r4, r5
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	bf18      	it	ne
 80048f2:	6059      	strne	r1, [r3, #4]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	bf08      	it	eq
 80048f8:	f8c8 1000 	streq.w	r1, [r8]
 80048fc:	5162      	str	r2, [r4, r5]
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	4630      	mov	r0, r6
 8004902:	f000 fa69 	bl	8004dd8 <__malloc_unlock>
 8004906:	f104 000b 	add.w	r0, r4, #11
 800490a:	1d23      	adds	r3, r4, #4
 800490c:	f020 0007 	bic.w	r0, r0, #7
 8004910:	1ac2      	subs	r2, r0, r3
 8004912:	bf1c      	itt	ne
 8004914:	1a1b      	subne	r3, r3, r0
 8004916:	50a3      	strne	r3, [r4, r2]
 8004918:	e7af      	b.n	800487a <_malloc_r+0x22>
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	42a3      	cmp	r3, r4
 800491e:	bf0c      	ite	eq
 8004920:	f8c8 2000 	streq.w	r2, [r8]
 8004924:	605a      	strne	r2, [r3, #4]
 8004926:	e7eb      	b.n	8004900 <_malloc_r+0xa8>
 8004928:	4623      	mov	r3, r4
 800492a:	6864      	ldr	r4, [r4, #4]
 800492c:	e7ae      	b.n	800488c <_malloc_r+0x34>
 800492e:	463c      	mov	r4, r7
 8004930:	687f      	ldr	r7, [r7, #4]
 8004932:	e7b6      	b.n	80048a2 <_malloc_r+0x4a>
 8004934:	461a      	mov	r2, r3
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	42a3      	cmp	r3, r4
 800493a:	d1fb      	bne.n	8004934 <_malloc_r+0xdc>
 800493c:	2300      	movs	r3, #0
 800493e:	6053      	str	r3, [r2, #4]
 8004940:	e7de      	b.n	8004900 <_malloc_r+0xa8>
 8004942:	230c      	movs	r3, #12
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	4630      	mov	r0, r6
 8004948:	f000 fa46 	bl	8004dd8 <__malloc_unlock>
 800494c:	e794      	b.n	8004878 <_malloc_r+0x20>
 800494e:	6005      	str	r5, [r0, #0]
 8004950:	e7d6      	b.n	8004900 <_malloc_r+0xa8>
 8004952:	bf00      	nop
 8004954:	200002c4 	.word	0x200002c4

08004958 <_printf_common>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	4616      	mov	r6, r2
 800495e:	4698      	mov	r8, r3
 8004960:	688a      	ldr	r2, [r1, #8]
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004968:	4293      	cmp	r3, r2
 800496a:	bfb8      	it	lt
 800496c:	4613      	movlt	r3, r2
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004974:	4607      	mov	r7, r0
 8004976:	460c      	mov	r4, r1
 8004978:	b10a      	cbz	r2, 800497e <_printf_common+0x26>
 800497a:	3301      	adds	r3, #1
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	0699      	lsls	r1, r3, #26
 8004982:	bf42      	ittt	mi
 8004984:	6833      	ldrmi	r3, [r6, #0]
 8004986:	3302      	addmi	r3, #2
 8004988:	6033      	strmi	r3, [r6, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	f015 0506 	ands.w	r5, r5, #6
 8004990:	d106      	bne.n	80049a0 <_printf_common+0x48>
 8004992:	f104 0a19 	add.w	sl, r4, #25
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	6832      	ldr	r2, [r6, #0]
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	42ab      	cmp	r3, r5
 800499e:	dc26      	bgt.n	80049ee <_printf_common+0x96>
 80049a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	3b00      	subs	r3, #0
 80049a8:	bf18      	it	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	0692      	lsls	r2, r2, #26
 80049ae:	d42b      	bmi.n	8004a08 <_printf_common+0xb0>
 80049b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049b4:	4641      	mov	r1, r8
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c8      	blx	r9
 80049ba:	3001      	adds	r0, #1
 80049bc:	d01e      	beq.n	80049fc <_printf_common+0xa4>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	6922      	ldr	r2, [r4, #16]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	bf02      	ittt	eq
 80049ca:	68e5      	ldreq	r5, [r4, #12]
 80049cc:	6833      	ldreq	r3, [r6, #0]
 80049ce:	1aed      	subeq	r5, r5, r3
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	bf0c      	ite	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	2500      	movne	r5, #0
 80049da:	4293      	cmp	r3, r2
 80049dc:	bfc4      	itt	gt
 80049de:	1a9b      	subgt	r3, r3, r2
 80049e0:	18ed      	addgt	r5, r5, r3
 80049e2:	2600      	movs	r6, #0
 80049e4:	341a      	adds	r4, #26
 80049e6:	42b5      	cmp	r5, r6
 80049e8:	d11a      	bne.n	8004a20 <_printf_common+0xc8>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e008      	b.n	8004a00 <_printf_common+0xa8>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4652      	mov	r2, sl
 80049f2:	4641      	mov	r1, r8
 80049f4:	4638      	mov	r0, r7
 80049f6:	47c8      	blx	r9
 80049f8:	3001      	adds	r0, #1
 80049fa:	d103      	bne.n	8004a04 <_printf_common+0xac>
 80049fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a04:	3501      	adds	r5, #1
 8004a06:	e7c6      	b.n	8004996 <_printf_common+0x3e>
 8004a08:	18e1      	adds	r1, r4, r3
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	2030      	movs	r0, #48	@ 0x30
 8004a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a12:	4422      	add	r2, r4
 8004a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	e7c7      	b.n	80049b0 <_printf_common+0x58>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4622      	mov	r2, r4
 8004a24:	4641      	mov	r1, r8
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c8      	blx	r9
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d0e6      	beq.n	80049fc <_printf_common+0xa4>
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7d9      	b.n	80049e6 <_printf_common+0x8e>
	...

08004a34 <_printf_i>:
 8004a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a38:	7e0f      	ldrb	r7, [r1, #24]
 8004a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a3c:	2f78      	cmp	r7, #120	@ 0x78
 8004a3e:	4691      	mov	r9, r2
 8004a40:	4680      	mov	r8, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	469a      	mov	sl, r3
 8004a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a4a:	d807      	bhi.n	8004a5c <_printf_i+0x28>
 8004a4c:	2f62      	cmp	r7, #98	@ 0x62
 8004a4e:	d80a      	bhi.n	8004a66 <_printf_i+0x32>
 8004a50:	2f00      	cmp	r7, #0
 8004a52:	f000 80d2 	beq.w	8004bfa <_printf_i+0x1c6>
 8004a56:	2f58      	cmp	r7, #88	@ 0x58
 8004a58:	f000 80b9 	beq.w	8004bce <_printf_i+0x19a>
 8004a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a64:	e03a      	b.n	8004adc <_printf_i+0xa8>
 8004a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a6a:	2b15      	cmp	r3, #21
 8004a6c:	d8f6      	bhi.n	8004a5c <_printf_i+0x28>
 8004a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a74 <_printf_i+0x40>)
 8004a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004ae1 	.word	0x08004ae1
 8004a7c:	08004a5d 	.word	0x08004a5d
 8004a80:	08004a5d 	.word	0x08004a5d
 8004a84:	08004a5d 	.word	0x08004a5d
 8004a88:	08004a5d 	.word	0x08004a5d
 8004a8c:	08004ae1 	.word	0x08004ae1
 8004a90:	08004a5d 	.word	0x08004a5d
 8004a94:	08004a5d 	.word	0x08004a5d
 8004a98:	08004a5d 	.word	0x08004a5d
 8004a9c:	08004a5d 	.word	0x08004a5d
 8004aa0:	08004be1 	.word	0x08004be1
 8004aa4:	08004b0b 	.word	0x08004b0b
 8004aa8:	08004b9b 	.word	0x08004b9b
 8004aac:	08004a5d 	.word	0x08004a5d
 8004ab0:	08004a5d 	.word	0x08004a5d
 8004ab4:	08004c03 	.word	0x08004c03
 8004ab8:	08004a5d 	.word	0x08004a5d
 8004abc:	08004b0b 	.word	0x08004b0b
 8004ac0:	08004a5d 	.word	0x08004a5d
 8004ac4:	08004a5d 	.word	0x08004a5d
 8004ac8:	08004ba3 	.word	0x08004ba3
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6032      	str	r2, [r6, #0]
 8004ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09d      	b.n	8004c1c <_printf_i+0x1e8>
 8004ae0:	6833      	ldr	r3, [r6, #0]
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	1d19      	adds	r1, r3, #4
 8004ae6:	6031      	str	r1, [r6, #0]
 8004ae8:	0606      	lsls	r6, r0, #24
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0xbc>
 8004aec:	681d      	ldr	r5, [r3, #0]
 8004aee:	e003      	b.n	8004af8 <_printf_i+0xc4>
 8004af0:	0645      	lsls	r5, r0, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0xb8>
 8004af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	da03      	bge.n	8004b04 <_printf_i+0xd0>
 8004afc:	232d      	movs	r3, #45	@ 0x2d
 8004afe:	426d      	negs	r5, r5
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b04:	4859      	ldr	r0, [pc, #356]	@ (8004c6c <_printf_i+0x238>)
 8004b06:	230a      	movs	r3, #10
 8004b08:	e011      	b.n	8004b2e <_printf_i+0xfa>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	0608      	lsls	r0, r1, #24
 8004b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0xe8>
 8004b16:	0649      	lsls	r1, r1, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b1e:	4853      	ldr	r0, [pc, #332]	@ (8004c6c <_printf_i+0x238>)
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	bf14      	ite	ne
 8004b24:	230a      	movne	r3, #10
 8004b26:	2308      	moveq	r3, #8
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b2e:	6866      	ldr	r6, [r4, #4]
 8004b30:	60a6      	str	r6, [r4, #8]
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	bfa2      	ittt	ge
 8004b36:	6821      	ldrge	r1, [r4, #0]
 8004b38:	f021 0104 	bicge.w	r1, r1, #4
 8004b3c:	6021      	strge	r1, [r4, #0]
 8004b3e:	b90d      	cbnz	r5, 8004b44 <_printf_i+0x110>
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	d04b      	beq.n	8004bdc <_printf_i+0x1a8>
 8004b44:	4616      	mov	r6, r2
 8004b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b4e:	5dc7      	ldrb	r7, [r0, r7]
 8004b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b54:	462f      	mov	r7, r5
 8004b56:	42bb      	cmp	r3, r7
 8004b58:	460d      	mov	r5, r1
 8004b5a:	d9f4      	bls.n	8004b46 <_printf_i+0x112>
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d10b      	bne.n	8004b78 <_printf_i+0x144>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	07df      	lsls	r7, r3, #31
 8004b64:	d508      	bpl.n	8004b78 <_printf_i+0x144>
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	6861      	ldr	r1, [r4, #4]
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	bfde      	ittt	le
 8004b6e:	2330      	movle	r3, #48	@ 0x30
 8004b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b74:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b78:	1b92      	subs	r2, r2, r6
 8004b7a:	6122      	str	r2, [r4, #16]
 8004b7c:	f8cd a000 	str.w	sl, [sp]
 8004b80:	464b      	mov	r3, r9
 8004b82:	aa03      	add	r2, sp, #12
 8004b84:	4621      	mov	r1, r4
 8004b86:	4640      	mov	r0, r8
 8004b88:	f7ff fee6 	bl	8004958 <_printf_common>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d14a      	bne.n	8004c26 <_printf_i+0x1f2>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b94:	b004      	add	sp, #16
 8004b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	f043 0320 	orr.w	r3, r3, #32
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	4833      	ldr	r0, [pc, #204]	@ (8004c70 <_printf_i+0x23c>)
 8004ba4:	2778      	movs	r7, #120	@ 0x78
 8004ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	6831      	ldr	r1, [r6, #0]
 8004bae:	061f      	lsls	r7, r3, #24
 8004bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bb4:	d402      	bmi.n	8004bbc <_printf_i+0x188>
 8004bb6:	065f      	lsls	r7, r3, #25
 8004bb8:	bf48      	it	mi
 8004bba:	b2ad      	uxthmi	r5, r5
 8004bbc:	6031      	str	r1, [r6, #0]
 8004bbe:	07d9      	lsls	r1, r3, #31
 8004bc0:	bf44      	itt	mi
 8004bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc6:	6023      	strmi	r3, [r4, #0]
 8004bc8:	b11d      	cbz	r5, 8004bd2 <_printf_i+0x19e>
 8004bca:	2310      	movs	r3, #16
 8004bcc:	e7ac      	b.n	8004b28 <_printf_i+0xf4>
 8004bce:	4827      	ldr	r0, [pc, #156]	@ (8004c6c <_printf_i+0x238>)
 8004bd0:	e7e9      	b.n	8004ba6 <_printf_i+0x172>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f023 0320 	bic.w	r3, r3, #32
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	e7f6      	b.n	8004bca <_printf_i+0x196>
 8004bdc:	4616      	mov	r6, r2
 8004bde:	e7bd      	b.n	8004b5c <_printf_i+0x128>
 8004be0:	6833      	ldr	r3, [r6, #0]
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	6961      	ldr	r1, [r4, #20]
 8004be6:	1d18      	adds	r0, r3, #4
 8004be8:	6030      	str	r0, [r6, #0]
 8004bea:	062e      	lsls	r6, r5, #24
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0x1c0>
 8004bf0:	6019      	str	r1, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <_printf_i+0x1c6>
 8004bf4:	0668      	lsls	r0, r5, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0x1bc>
 8004bf8:	8019      	strh	r1, [r3, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	4616      	mov	r6, r2
 8004c00:	e7bc      	b.n	8004b7c <_printf_i+0x148>
 8004c02:	6833      	ldr	r3, [r6, #0]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	6032      	str	r2, [r6, #0]
 8004c08:	681e      	ldr	r6, [r3, #0]
 8004c0a:	6862      	ldr	r2, [r4, #4]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7fb fae6 	bl	80001e0 <memchr>
 8004c14:	b108      	cbz	r0, 8004c1a <_printf_i+0x1e6>
 8004c16:	1b80      	subs	r0, r0, r6
 8004c18:	6060      	str	r0, [r4, #4]
 8004c1a:	6863      	ldr	r3, [r4, #4]
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c24:	e7aa      	b.n	8004b7c <_printf_i+0x148>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	4632      	mov	r2, r6
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	47d0      	blx	sl
 8004c30:	3001      	adds	r0, #1
 8004c32:	d0ad      	beq.n	8004b90 <_printf_i+0x15c>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	079b      	lsls	r3, r3, #30
 8004c38:	d413      	bmi.n	8004c62 <_printf_i+0x22e>
 8004c3a:	68e0      	ldr	r0, [r4, #12]
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	4298      	cmp	r0, r3
 8004c40:	bfb8      	it	lt
 8004c42:	4618      	movlt	r0, r3
 8004c44:	e7a6      	b.n	8004b94 <_printf_i+0x160>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4632      	mov	r2, r6
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d09d      	beq.n	8004b90 <_printf_i+0x15c>
 8004c54:	3501      	adds	r5, #1
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	9903      	ldr	r1, [sp, #12]
 8004c5a:	1a5b      	subs	r3, r3, r1
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dcf2      	bgt.n	8004c46 <_printf_i+0x212>
 8004c60:	e7eb      	b.n	8004c3a <_printf_i+0x206>
 8004c62:	2500      	movs	r5, #0
 8004c64:	f104 0619 	add.w	r6, r4, #25
 8004c68:	e7f5      	b.n	8004c56 <_printf_i+0x222>
 8004c6a:	bf00      	nop
 8004c6c:	080052ad 	.word	0x080052ad
 8004c70:	080052be 	.word	0x080052be

08004c74 <__sflush_r>:
 8004c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7c:	0716      	lsls	r6, r2, #28
 8004c7e:	4605      	mov	r5, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	d454      	bmi.n	8004d2e <__sflush_r+0xba>
 8004c84:	684b      	ldr	r3, [r1, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dc02      	bgt.n	8004c90 <__sflush_r+0x1c>
 8004c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dd48      	ble.n	8004d22 <__sflush_r+0xae>
 8004c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d045      	beq.n	8004d22 <__sflush_r+0xae>
 8004c96:	2300      	movs	r3, #0
 8004c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c9c:	682f      	ldr	r7, [r5, #0]
 8004c9e:	6a21      	ldr	r1, [r4, #32]
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	d030      	beq.n	8004d06 <__sflush_r+0x92>
 8004ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	0759      	lsls	r1, r3, #29
 8004caa:	d505      	bpl.n	8004cb8 <__sflush_r+0x44>
 8004cac:	6863      	ldr	r3, [r4, #4]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004cb2:	b10b      	cbz	r3, 8004cb8 <__sflush_r+0x44>
 8004cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cbc:	6a21      	ldr	r1, [r4, #32]
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b0      	blx	r6
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	d106      	bne.n	8004cd6 <__sflush_r+0x62>
 8004cc8:	6829      	ldr	r1, [r5, #0]
 8004cca:	291d      	cmp	r1, #29
 8004ccc:	d82b      	bhi.n	8004d26 <__sflush_r+0xb2>
 8004cce:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <__sflush_r+0x104>)
 8004cd0:	410a      	asrs	r2, r1
 8004cd2:	07d6      	lsls	r6, r2, #31
 8004cd4:	d427      	bmi.n	8004d26 <__sflush_r+0xb2>
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	6062      	str	r2, [r4, #4]
 8004cda:	04d9      	lsls	r1, r3, #19
 8004cdc:	6922      	ldr	r2, [r4, #16]
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	d504      	bpl.n	8004cec <__sflush_r+0x78>
 8004ce2:	1c42      	adds	r2, r0, #1
 8004ce4:	d101      	bne.n	8004cea <__sflush_r+0x76>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	b903      	cbnz	r3, 8004cec <__sflush_r+0x78>
 8004cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cee:	602f      	str	r7, [r5, #0]
 8004cf0:	b1b9      	cbz	r1, 8004d22 <__sflush_r+0xae>
 8004cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	d002      	beq.n	8004d00 <__sflush_r+0x8c>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fa24 	bl	8005148 <_free_r>
 8004d00:	2300      	movs	r3, #0
 8004d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d04:	e00d      	b.n	8004d22 <__sflush_r+0xae>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b0      	blx	r6
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	1c50      	adds	r0, r2, #1
 8004d10:	d1c9      	bne.n	8004ca6 <__sflush_r+0x32>
 8004d12:	682b      	ldr	r3, [r5, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0c6      	beq.n	8004ca6 <__sflush_r+0x32>
 8004d18:	2b1d      	cmp	r3, #29
 8004d1a:	d001      	beq.n	8004d20 <__sflush_r+0xac>
 8004d1c:	2b16      	cmp	r3, #22
 8004d1e:	d11e      	bne.n	8004d5e <__sflush_r+0xea>
 8004d20:	602f      	str	r7, [r5, #0]
 8004d22:	2000      	movs	r0, #0
 8004d24:	e022      	b.n	8004d6c <__sflush_r+0xf8>
 8004d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2a:	b21b      	sxth	r3, r3
 8004d2c:	e01b      	b.n	8004d66 <__sflush_r+0xf2>
 8004d2e:	690f      	ldr	r7, [r1, #16]
 8004d30:	2f00      	cmp	r7, #0
 8004d32:	d0f6      	beq.n	8004d22 <__sflush_r+0xae>
 8004d34:	0793      	lsls	r3, r2, #30
 8004d36:	680e      	ldr	r6, [r1, #0]
 8004d38:	bf08      	it	eq
 8004d3a:	694b      	ldreq	r3, [r1, #20]
 8004d3c:	600f      	str	r7, [r1, #0]
 8004d3e:	bf18      	it	ne
 8004d40:	2300      	movne	r3, #0
 8004d42:	eba6 0807 	sub.w	r8, r6, r7
 8004d46:	608b      	str	r3, [r1, #8]
 8004d48:	f1b8 0f00 	cmp.w	r8, #0
 8004d4c:	dde9      	ble.n	8004d22 <__sflush_r+0xae>
 8004d4e:	6a21      	ldr	r1, [r4, #32]
 8004d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d52:	4643      	mov	r3, r8
 8004d54:	463a      	mov	r2, r7
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b0      	blx	r6
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	dc08      	bgt.n	8004d70 <__sflush_r+0xfc>
 8004d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d66:	81a3      	strh	r3, [r4, #12]
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d70:	4407      	add	r7, r0
 8004d72:	eba8 0800 	sub.w	r8, r8, r0
 8004d76:	e7e7      	b.n	8004d48 <__sflush_r+0xd4>
 8004d78:	dfbffffe 	.word	0xdfbffffe

08004d7c <_fflush_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	4605      	mov	r5, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	b913      	cbnz	r3, 8004d8c <_fflush_r+0x10>
 8004d86:	2500      	movs	r5, #0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	b118      	cbz	r0, 8004d96 <_fflush_r+0x1a>
 8004d8e:	6a03      	ldr	r3, [r0, #32]
 8004d90:	b90b      	cbnz	r3, 8004d96 <_fflush_r+0x1a>
 8004d92:	f7ff fb23 	bl	80043dc <__sinit>
 8004d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f3      	beq.n	8004d86 <_fflush_r+0xa>
 8004d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004da0:	07d0      	lsls	r0, r2, #31
 8004da2:	d404      	bmi.n	8004dae <_fflush_r+0x32>
 8004da4:	0599      	lsls	r1, r3, #22
 8004da6:	d402      	bmi.n	8004dae <_fflush_r+0x32>
 8004da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004daa:	f7ff fbf0 	bl	800458e <__retarget_lock_acquire_recursive>
 8004dae:	4628      	mov	r0, r5
 8004db0:	4621      	mov	r1, r4
 8004db2:	f7ff ff5f 	bl	8004c74 <__sflush_r>
 8004db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004db8:	07da      	lsls	r2, r3, #31
 8004dba:	4605      	mov	r5, r0
 8004dbc:	d4e4      	bmi.n	8004d88 <_fflush_r+0xc>
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	059b      	lsls	r3, r3, #22
 8004dc2:	d4e1      	bmi.n	8004d88 <_fflush_r+0xc>
 8004dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dc6:	f7ff fbe3 	bl	8004590 <__retarget_lock_release_recursive>
 8004dca:	e7dd      	b.n	8004d88 <_fflush_r+0xc>

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	@ (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f7ff bbde 	b.w	800458e <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200002bc 	.word	0x200002bc

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	@ (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f7ff bbd9 	b.w	8004590 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	200002bc 	.word	0x200002bc

08004de4 <__sread>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	460c      	mov	r4, r1
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	f000 f978 	bl	80050e0 <_read_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	bfab      	itete	ge
 8004df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004df6:	89a3      	ldrhlt	r3, [r4, #12]
 8004df8:	181b      	addge	r3, r3, r0
 8004dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dfe:	bfac      	ite	ge
 8004e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e02:	81a3      	strhlt	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__swrite>:
 8004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	461f      	mov	r7, r3
 8004e0c:	898b      	ldrh	r3, [r1, #12]
 8004e0e:	05db      	lsls	r3, r3, #23
 8004e10:	4605      	mov	r5, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	4616      	mov	r6, r2
 8004e16:	d505      	bpl.n	8004e24 <__swrite+0x1e>
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f000 f94c 	bl	80050bc <_lseek_r>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	4632      	mov	r2, r6
 8004e32:	463b      	mov	r3, r7
 8004e34:	4628      	mov	r0, r5
 8004e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	f000 b973 	b.w	8005124 <_write_r>

08004e3e <__sseek>:
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	460c      	mov	r4, r1
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 f939 	bl	80050bc <_lseek_r>
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	bf15      	itete	ne
 8004e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e5a:	81a3      	strheq	r3, [r4, #12]
 8004e5c:	bf18      	it	ne
 8004e5e:	81a3      	strhne	r3, [r4, #12]
 8004e60:	bd10      	pop	{r4, pc}

08004e62 <__sclose>:
 8004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e66:	f000 b8f7 	b.w	8005058 <_close_r>

08004e6a <__swbuf_r>:
 8004e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6c:	460e      	mov	r6, r1
 8004e6e:	4614      	mov	r4, r2
 8004e70:	4605      	mov	r5, r0
 8004e72:	b118      	cbz	r0, 8004e7c <__swbuf_r+0x12>
 8004e74:	6a03      	ldr	r3, [r0, #32]
 8004e76:	b90b      	cbnz	r3, 8004e7c <__swbuf_r+0x12>
 8004e78:	f7ff fab0 	bl	80043dc <__sinit>
 8004e7c:	69a3      	ldr	r3, [r4, #24]
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	071a      	lsls	r2, r3, #28
 8004e84:	d501      	bpl.n	8004e8a <__swbuf_r+0x20>
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	b943      	cbnz	r3, 8004e9c <__swbuf_r+0x32>
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 f82b 	bl	8004ee8 <__swsetup_r>
 8004e92:	b118      	cbz	r0, 8004e9c <__swbuf_r+0x32>
 8004e94:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004e98:	4638      	mov	r0, r7
 8004e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	6922      	ldr	r2, [r4, #16]
 8004ea0:	1a98      	subs	r0, r3, r2
 8004ea2:	6963      	ldr	r3, [r4, #20]
 8004ea4:	b2f6      	uxtb	r6, r6
 8004ea6:	4283      	cmp	r3, r0
 8004ea8:	4637      	mov	r7, r6
 8004eaa:	dc05      	bgt.n	8004eb8 <__swbuf_r+0x4e>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f7ff ff64 	bl	8004d7c <_fflush_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1ed      	bne.n	8004e94 <__swbuf_r+0x2a>
 8004eb8:	68a3      	ldr	r3, [r4, #8]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	701e      	strb	r6, [r3, #0]
 8004ec6:	6962      	ldr	r2, [r4, #20]
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d004      	beq.n	8004ed8 <__swbuf_r+0x6e>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	07db      	lsls	r3, r3, #31
 8004ed2:	d5e1      	bpl.n	8004e98 <__swbuf_r+0x2e>
 8004ed4:	2e0a      	cmp	r6, #10
 8004ed6:	d1df      	bne.n	8004e98 <__swbuf_r+0x2e>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f7ff ff4e 	bl	8004d7c <_fflush_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d0d9      	beq.n	8004e98 <__swbuf_r+0x2e>
 8004ee4:	e7d6      	b.n	8004e94 <__swbuf_r+0x2a>
	...

08004ee8 <__swsetup_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4b29      	ldr	r3, [pc, #164]	@ (8004f90 <__swsetup_r+0xa8>)
 8004eec:	4605      	mov	r5, r0
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	b118      	cbz	r0, 8004efc <__swsetup_r+0x14>
 8004ef4:	6a03      	ldr	r3, [r0, #32]
 8004ef6:	b90b      	cbnz	r3, 8004efc <__swsetup_r+0x14>
 8004ef8:	f7ff fa70 	bl	80043dc <__sinit>
 8004efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f00:	0719      	lsls	r1, r3, #28
 8004f02:	d422      	bmi.n	8004f4a <__swsetup_r+0x62>
 8004f04:	06da      	lsls	r2, r3, #27
 8004f06:	d407      	bmi.n	8004f18 <__swsetup_r+0x30>
 8004f08:	2209      	movs	r2, #9
 8004f0a:	602a      	str	r2, [r5, #0]
 8004f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f16:	e033      	b.n	8004f80 <__swsetup_r+0x98>
 8004f18:	0758      	lsls	r0, r3, #29
 8004f1a:	d512      	bpl.n	8004f42 <__swsetup_r+0x5a>
 8004f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f1e:	b141      	cbz	r1, 8004f32 <__swsetup_r+0x4a>
 8004f20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f24:	4299      	cmp	r1, r3
 8004f26:	d002      	beq.n	8004f2e <__swsetup_r+0x46>
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 f90d 	bl	8005148 <_free_r>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	b94b      	cbnz	r3, 8004f62 <__swsetup_r+0x7a>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f58:	d003      	beq.n	8004f62 <__swsetup_r+0x7a>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 f83f 	bl	8004fe0 <__smakebuf_r>
 8004f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f66:	f013 0201 	ands.w	r2, r3, #1
 8004f6a:	d00a      	beq.n	8004f82 <__swsetup_r+0x9a>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60a2      	str	r2, [r4, #8]
 8004f70:	6962      	ldr	r2, [r4, #20]
 8004f72:	4252      	negs	r2, r2
 8004f74:	61a2      	str	r2, [r4, #24]
 8004f76:	6922      	ldr	r2, [r4, #16]
 8004f78:	b942      	cbnz	r2, 8004f8c <__swsetup_r+0xa4>
 8004f7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f7e:	d1c5      	bne.n	8004f0c <__swsetup_r+0x24>
 8004f80:	bd38      	pop	{r3, r4, r5, pc}
 8004f82:	0799      	lsls	r1, r3, #30
 8004f84:	bf58      	it	pl
 8004f86:	6962      	ldrpl	r2, [r4, #20]
 8004f88:	60a2      	str	r2, [r4, #8]
 8004f8a:	e7f4      	b.n	8004f76 <__swsetup_r+0x8e>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e7f7      	b.n	8004f80 <__swsetup_r+0x98>
 8004f90:	20000018 	.word	0x20000018

08004f94 <__swhatbuf_r>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	460c      	mov	r4, r1
 8004f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	b096      	sub	sp, #88	@ 0x58
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	461e      	mov	r6, r3
 8004fa4:	da0d      	bge.n	8004fc2 <__swhatbuf_r+0x2e>
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	bf14      	ite	ne
 8004fb2:	2340      	movne	r3, #64	@ 0x40
 8004fb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fb8:	2000      	movs	r0, #0
 8004fba:	6031      	str	r1, [r6, #0]
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	b016      	add	sp, #88	@ 0x58
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	466a      	mov	r2, sp
 8004fc4:	f000 f858 	bl	8005078 <_fstat_r>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	dbec      	blt.n	8004fa6 <__swhatbuf_r+0x12>
 8004fcc:	9901      	ldr	r1, [sp, #4]
 8004fce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fd6:	4259      	negs	r1, r3
 8004fd8:	4159      	adcs	r1, r3
 8004fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fde:	e7eb      	b.n	8004fb8 <__swhatbuf_r+0x24>

08004fe0 <__smakebuf_r>:
 8004fe0:	898b      	ldrh	r3, [r1, #12]
 8004fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe4:	079d      	lsls	r5, r3, #30
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	d507      	bpl.n	8004ffc <__smakebuf_r+0x1c>
 8004fec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	6163      	str	r3, [r4, #20]
 8004ff8:	b003      	add	sp, #12
 8004ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ffc:	ab01      	add	r3, sp, #4
 8004ffe:	466a      	mov	r2, sp
 8005000:	f7ff ffc8 	bl	8004f94 <__swhatbuf_r>
 8005004:	9f00      	ldr	r7, [sp, #0]
 8005006:	4605      	mov	r5, r0
 8005008:	4639      	mov	r1, r7
 800500a:	4630      	mov	r0, r6
 800500c:	f7ff fc24 	bl	8004858 <_malloc_r>
 8005010:	b948      	cbnz	r0, 8005026 <__smakebuf_r+0x46>
 8005012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005016:	059a      	lsls	r2, r3, #22
 8005018:	d4ee      	bmi.n	8004ff8 <__smakebuf_r+0x18>
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	e7e2      	b.n	8004fec <__smakebuf_r+0xc>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	6020      	str	r0, [r4, #0]
 800502a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	9b01      	ldr	r3, [sp, #4]
 8005032:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005036:	b15b      	cbz	r3, 8005050 <__smakebuf_r+0x70>
 8005038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f82d 	bl	800509c <_isatty_r>
 8005042:	b128      	cbz	r0, 8005050 <__smakebuf_r+0x70>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	431d      	orrs	r5, r3
 8005054:	81a5      	strh	r5, [r4, #12]
 8005056:	e7cf      	b.n	8004ff8 <__smakebuf_r+0x18>

08005058 <_close_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d06      	ldr	r5, [pc, #24]	@ (8005074 <_close_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fb ffe3 	bl	800102e <_close>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_close_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_close_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	200002c8 	.word	0x200002c8

08005078 <_fstat_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d07      	ldr	r5, [pc, #28]	@ (8005098 <_fstat_r+0x20>)
 800507c:	2300      	movs	r3, #0
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	f7fb ffde 	bl	8001046 <_fstat>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	d102      	bne.n	8005094 <_fstat_r+0x1c>
 800508e:	682b      	ldr	r3, [r5, #0]
 8005090:	b103      	cbz	r3, 8005094 <_fstat_r+0x1c>
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	200002c8 	.word	0x200002c8

0800509c <_isatty_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d06      	ldr	r5, [pc, #24]	@ (80050b8 <_isatty_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	f7fb ffdd 	bl	8001066 <_isatty>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_isatty_r+0x1a>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_isatty_r+0x1a>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	200002c8 	.word	0x200002c8

080050bc <_lseek_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d07      	ldr	r5, [pc, #28]	@ (80050dc <_lseek_r+0x20>)
 80050c0:	4604      	mov	r4, r0
 80050c2:	4608      	mov	r0, r1
 80050c4:	4611      	mov	r1, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	602a      	str	r2, [r5, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f7fb ffd6 	bl	800107c <_lseek>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_lseek_r+0x1e>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_lseek_r+0x1e>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	200002c8 	.word	0x200002c8

080050e0 <_read_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	@ (8005100 <_read_r+0x20>)
 80050e4:	4604      	mov	r4, r0
 80050e6:	4608      	mov	r0, r1
 80050e8:	4611      	mov	r1, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	602a      	str	r2, [r5, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f7fb ff64 	bl	8000fbc <_read>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_read_r+0x1e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_read_r+0x1e>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	200002c8 	.word	0x200002c8

08005104 <_sbrk_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	@ (8005120 <_sbrk_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fb ffc2 	bl	8001098 <_sbrk>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_sbrk_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_sbrk_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	200002c8 	.word	0x200002c8

08005124 <_write_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	@ (8005144 <_write_r+0x20>)
 8005128:	4604      	mov	r4, r0
 800512a:	4608      	mov	r0, r1
 800512c:	4611      	mov	r1, r2
 800512e:	2200      	movs	r2, #0
 8005130:	602a      	str	r2, [r5, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f7fb ff5f 	bl	8000ff6 <_write>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_write_r+0x1e>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_write_r+0x1e>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	200002c8 	.word	0x200002c8

08005148 <_free_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4605      	mov	r5, r0
 800514c:	2900      	cmp	r1, #0
 800514e:	d041      	beq.n	80051d4 <_free_r+0x8c>
 8005150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005154:	1f0c      	subs	r4, r1, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	bfb8      	it	lt
 800515a:	18e4      	addlt	r4, r4, r3
 800515c:	f7ff fe36 	bl	8004dcc <__malloc_lock>
 8005160:	4a1d      	ldr	r2, [pc, #116]	@ (80051d8 <_free_r+0x90>)
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	b933      	cbnz	r3, 8005174 <_free_r+0x2c>
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	6014      	str	r4, [r2, #0]
 800516a:	4628      	mov	r0, r5
 800516c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005170:	f7ff be32 	b.w	8004dd8 <__malloc_unlock>
 8005174:	42a3      	cmp	r3, r4
 8005176:	d908      	bls.n	800518a <_free_r+0x42>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	1821      	adds	r1, r4, r0
 800517c:	428b      	cmp	r3, r1
 800517e:	bf01      	itttt	eq
 8005180:	6819      	ldreq	r1, [r3, #0]
 8005182:	685b      	ldreq	r3, [r3, #4]
 8005184:	1809      	addeq	r1, r1, r0
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	e7ed      	b.n	8005166 <_free_r+0x1e>
 800518a:	461a      	mov	r2, r3
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b10b      	cbz	r3, 8005194 <_free_r+0x4c>
 8005190:	42a3      	cmp	r3, r4
 8005192:	d9fa      	bls.n	800518a <_free_r+0x42>
 8005194:	6811      	ldr	r1, [r2, #0]
 8005196:	1850      	adds	r0, r2, r1
 8005198:	42a0      	cmp	r0, r4
 800519a:	d10b      	bne.n	80051b4 <_free_r+0x6c>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	4401      	add	r1, r0
 80051a0:	1850      	adds	r0, r2, r1
 80051a2:	4283      	cmp	r3, r0
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	d1e0      	bne.n	800516a <_free_r+0x22>
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	6053      	str	r3, [r2, #4]
 80051ae:	4408      	add	r0, r1
 80051b0:	6010      	str	r0, [r2, #0]
 80051b2:	e7da      	b.n	800516a <_free_r+0x22>
 80051b4:	d902      	bls.n	80051bc <_free_r+0x74>
 80051b6:	230c      	movs	r3, #12
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	e7d6      	b.n	800516a <_free_r+0x22>
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	1821      	adds	r1, r4, r0
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf04      	itt	eq
 80051c4:	6819      	ldreq	r1, [r3, #0]
 80051c6:	685b      	ldreq	r3, [r3, #4]
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	bf04      	itt	eq
 80051cc:	1809      	addeq	r1, r1, r0
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	6054      	str	r4, [r2, #4]
 80051d2:	e7ca      	b.n	800516a <_free_r+0x22>
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
 80051d6:	bf00      	nop
 80051d8:	200002c4 	.word	0x200002c4

080051dc <_init>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr

080051e8 <_fini>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr
