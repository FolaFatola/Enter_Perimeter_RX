
F401RE_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004640  08004640  00005640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b4  080046b4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080046b4  080046b4  000056b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046bc  080046bc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000005c  08004720  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004720  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da62  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef6  00000000  00000000  00013aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  000159e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fa  00000000  00000000  00016560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188ba  00000000  00000000  00016e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebe3  00000000  00000000  0002f714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1ee  00000000  00000000  0003e2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca4e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000ca528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000cda1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004628 	.word	0x08004628

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004628 	.word	0x08004628

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b0aa      	sub	sp, #168	@ 0xa8
 8000574:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fbc9 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f899 	bl	80006b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f99f 	bl	80008c0 <_ZL12MX_GPIO_Initv>
  MX_I2C2_Init();
 8000582:	f000 f8ff 	bl	8000784 <_ZL12MX_I2C2_Initv>
  MX_USART2_UART_Init();
 8000586:	f000 f96d 	bl	8000864 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 800058a:	f000 f92f 	bl	80007ec <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  bool use_tfh_time = true;
 800058e:	2301      	movs	r3, #1
 8000590:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint8_t seconds = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  uint8_t minutes = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  uint8_t hours = 6;
 80005a0:	2306      	movs	r3, #6
 80005a2:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  uint8_t weekday = SATURDAY;
 80005a6:	2307      	movs	r3, #7
 80005a8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  uint8_t date_day = 12;
 80005ac:	230c      	movs	r3, #12
 80005ae:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  uint8_t month = APRIL;
 80005b2:	2304      	movs	r3, #4
 80005b4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
  uint8_t year = 25;
 80005b8:	2319      	movs	r3, #25
 80005ba:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

  Time_RTC rtc_sensor_time{&hi2c2, use_tfh_time, seconds, minutes, hours, weekday, date_day, month, year};
 80005be:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 80005c2:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80005c6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80005ca:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80005ce:	9305      	str	r3, [sp, #20]
 80005d0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80005d4:	9304      	str	r3, [sp, #16]
 80005d6:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80005da:	9303      	str	r3, [sp, #12]
 80005dc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	460b      	mov	r3, r1
 80005f0:	492a      	ldr	r1, [pc, #168]	@ (800069c <main+0x12c>)
 80005f2:	f003 f9a1 	bl	8003938 <_ZN8Time_RTCC1EP17I2C_HandleTypeDefbhhhhhhh>
  rtc_sensor_time.rtc_init();
 80005f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f9f4 	bl	80039e8 <_ZN8Time_RTC8rtc_initEv>
  char message[100];

  //when due to voltage being above 1.9V, we are currently in power down mode.

  //PB6 is the CS PIN. PC7 is CE pin, and PA9 is for the external interrupt.
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	4826      	ldr	r0, [pc, #152]	@ (80006a0 <main+0x130>)
 8000606:	f000 fe81 	bl	800130c <HAL_GPIO_WritePin>
  uint8_t command = WRITE_CONFIG_REG;
 800060a:	2320      	movs	r3, #32
 800060c:	71fb      	strb	r3, [r7, #7]
  uint8_t config_reg_bits = PWR_UP_BIT;
 800060e:	2302      	movs	r3, #2
 8000610:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 8000612:	1df9      	adds	r1, r7, #7
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	2201      	movs	r2, #1
 8000618:	4822      	ldr	r0, [pc, #136]	@ (80006a4 <main+0x134>)
 800061a:	f002 f820 	bl	800265e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &config_reg_bits, 1, 100);
 800061e:	1db9      	adds	r1, r7, #6
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	2201      	movs	r2, #1
 8000624:	481f      	ldr	r0, [pc, #124]	@ (80006a4 <main+0x134>)
 8000626:	f002 f81a 	bl	800265e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	481c      	ldr	r0, [pc, #112]	@ (80006a0 <main+0x130>)
 8000630:	f000 fe6c 	bl	800130c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	4819      	ldr	r0, [pc, #100]	@ (80006a0 <main+0x130>)
 800063a:	f000 fe67 	bl	800130c <HAL_GPIO_WritePin>
  command = READ_CONFIG_REG;
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
  uint8_t read_config_bits = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	717b      	strb	r3, [r7, #5]
  HAL_SPI_Transmit(&hspi1, &command, 1, 100);
 8000646:	1df9      	adds	r1, r7, #7
 8000648:	2364      	movs	r3, #100	@ 0x64
 800064a:	2201      	movs	r2, #1
 800064c:	4815      	ldr	r0, [pc, #84]	@ (80006a4 <main+0x134>)
 800064e:	f002 f806 	bl	800265e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &read_config_bits, 1, 100);
 8000652:	1d79      	adds	r1, r7, #5
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	2201      	movs	r2, #1
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <main+0x134>)
 800065a:	f002 f944 	bl	80028e6 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	@ 0x40
 8000662:	480f      	ldr	r0, [pc, #60]	@ (80006a0 <main+0x130>)
 8000664:	f000 fe52 	bl	800130c <HAL_GPIO_WritePin>
  HAL_Delay(3);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 fbc1 	bl	8000df0 <HAL_Delay>
//
//	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sprintf(message, "Seconds: %d, Minutes: %d, Hours: %d, "
//			  "Week_Day: %d, Date_Day %d, Month %d, Year %d\r\n",
//			  seconds, minutes, hours, weekday, date_day, month, year+millennium), 100);

	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sprintf(message, "The config bit status is %d\r\n",
 800066e:	797b      	ldrb	r3, [r7, #5]
 8000670:	461a      	mov	r2, r3
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <main+0x138>)
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fb35 	bl	8003ce8 <siprintf>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 0108 	add.w	r1, r7, #8
 8000686:	2364      	movs	r3, #100	@ 0x64
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <main+0x13c>)
 800068a:	f002 fd81 	bl	8003190 <HAL_UART_Transmit>
			  read_config_bits), 100);

	  HAL_Delay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000692:	f000 fbad 	bl	8000df0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sprintf(message, "The config bit status is %d\r\n",
 8000696:	bf00      	nop
 8000698:	e7e9      	b.n	800066e <main+0xfe>
 800069a:	bf00      	nop
 800069c:	20000078 	.word	0x20000078
 80006a0:	40020400 	.word	0x40020400
 80006a4:	200000cc 	.word	0x200000cc
 80006a8:	08004640 	.word	0x08004640
 80006ac:	20000124 	.word	0x20000124

080006b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fb32 	bl	8003d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b28      	ldr	r3, [pc, #160]	@ (800077c <_Z18SystemClock_Configv+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a27      	ldr	r2, [pc, #156]	@ (800077c <_Z18SystemClock_Configv+0xcc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <_Z18SystemClock_Configv+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <_Z18SystemClock_Configv+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006fc:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <_Z18SystemClock_Configv+0xd0>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <_Z18SystemClock_Configv+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fab9 	bl	8001c9c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800073a:	f000 f92f 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fd17 	bl	800218c <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800076e:	f000 f915 	bl	800099c <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 800078a:	4a16      	ldr	r2, [pc, #88]	@ (80007e4 <_ZL12MX_I2C2_Initv+0x60>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000790:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <_ZL12MX_I2C2_Initv+0x64>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007c0:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <_ZL12MX_I2C2_Initv+0x5c>)
 80007c2:	f000 fdbd 	bl	8001340 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80007d6:	f000 f8e1 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000078 	.word	0x20000078
 80007e4:	40005800 	.word	0x40005800
 80007e8:	000186a0 	.word	0x000186a0

080007ec <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 80007f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000860 <_ZL12MX_SPI1_Initv+0x74>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 80007f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800081c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 8000838:	220a      	movs	r2, #10
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <_ZL12MX_SPI1_Initv+0x70>)
 800083e:	f001 fe85 	bl	800254c <HAL_SPI_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000852:	f000 f8a3 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000cc 	.word	0x200000cc
 8000860:	40013000 	.word	0x40013000

08000864 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000870:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800089c:	f002 fc28 	bl	80030f0 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80008b0:	f000 f874 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000124 	.word	0x20000124
 80008bc:	40004400 	.word	0x40004400

080008c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a24      	ldr	r2, [pc, #144]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a1d      	ldr	r2, [pc, #116]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <_ZL12MX_GPIO_Initv+0xcc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	@ 0x40
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <_ZL12MX_GPIO_Initv+0xd0>)
 8000930:	f000 fcec 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4813      	ldr	r0, [pc, #76]	@ (8000994 <_ZL12MX_GPIO_Initv+0xd4>)
 8000948:	f000 fb5c 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800094c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <_ZL12MX_GPIO_Initv+0xd8>)
 8000964:	f000 fb4e 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000968:	2340      	movs	r3, #64	@ 0x40
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <_ZL12MX_GPIO_Initv+0xd0>)
 8000980:	f000 fb40 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800
 8000998:	40020000 	.word	0x40020000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_I2C_MspInit+0xa4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d13c      	bne.n	8000a94 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <HAL_I2C_MspInit+0xa8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa0 <HAL_I2C_MspInit+0xa8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <HAL_I2C_MspInit+0xa8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3c:	2312      	movs	r3, #18
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4814      	ldr	r0, [pc, #80]	@ (8000aa4 <HAL_I2C_MspInit+0xac>)
 8000a54:	f000 fad6 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000a68:	2309      	movs	r3, #9
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <HAL_I2C_MspInit+0xac>)
 8000a74:	f000 fac6 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <HAL_I2C_MspInit+0xa8>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <HAL_I2C_MspInit+0xa8>)
 8000a82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_I2C_MspInit+0xa8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <HAL_SPI_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
 8000ad4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b02:	23e0      	movs	r3, #224	@ 0xe0
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b12:	2305      	movs	r3, #5
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_SPI_MspInit+0x8c>)
 8000b1e:	f000 fa71 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_UART_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b92:	230c      	movs	r3, #12
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_UART_MspInit+0x8c>)
 8000bae:	f000 fa29 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f8c7 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f003 f86e 	bl	8003d38 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20018000 	.word	0x20018000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000016c 	.word	0x2000016c
 8000c90:	200002c0 	.word	0x200002c0

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 f82d 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc41 	bl	8000570 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cfc:	080046c4 	.word	0x080046c4
  ldr r2, =_sbss
 8000d00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d04:	200002bc 	.word	0x200002bc

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f931 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe32 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f93b 	bl	8000fea <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d8c:	f000 f911 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	@ (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000170 	.word	0x20000170

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000170 	.word	0x20000170

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	@ (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	@ (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	@ 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e159      	b.n	80012d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8148 	bne.w	80012ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a2 	beq.w	80012ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b57      	ldr	r3, [pc, #348]	@ (80012ec <HAL_GPIO_Init+0x2e8>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a56      	ldr	r2, [pc, #344]	@ (80012ec <HAL_GPIO_Init+0x2e8>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b54      	ldr	r3, [pc, #336]	@ (80012ec <HAL_GPIO_Init+0x2e8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a52      	ldr	r2, [pc, #328]	@ (80012f0 <HAL_GPIO_Init+0x2ec>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a49      	ldr	r2, [pc, #292]	@ (80012f4 <HAL_GPIO_Init+0x2f0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x202>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a48      	ldr	r2, [pc, #288]	@ (80012f8 <HAL_GPIO_Init+0x2f4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x1fe>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a47      	ldr	r2, [pc, #284]	@ (80012fc <HAL_GPIO_Init+0x2f8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x1fa>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a46      	ldr	r2, [pc, #280]	@ (8001300 <HAL_GPIO_Init+0x2fc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	@ (8001304 <HAL_GPIO_Init+0x300>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x1f2>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x204>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x204>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	@ (80012f0 <HAL_GPIO_Init+0x2ec>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_GPIO_Init+0x304>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a2f      	ldr	r2, [pc, #188]	@ (8001308 <HAL_GPIO_Init+0x304>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <HAL_GPIO_Init+0x304>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a24      	ldr	r2, [pc, #144]	@ (8001308 <HAL_GPIO_Init+0x304>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <HAL_GPIO_Init+0x304>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1a      	ldr	r2, [pc, #104]	@ (8001308 <HAL_GPIO_Init+0x304>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_GPIO_Init+0x304>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_GPIO_Init+0x304>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f aea2 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e12b      	b.n	80015aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fb46 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	@ 0x24
 8001370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013a4:	f001 f8aa 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 80013a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a81      	ldr	r2, [pc, #516]	@ (80015b4 <HAL_I2C_Init+0x274>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d807      	bhi.n	80013c4 <HAL_I2C_Init+0x84>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a80      	ldr	r2, [pc, #512]	@ (80015b8 <HAL_I2C_Init+0x278>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	e006      	b.n	80013d2 <HAL_I2C_Init+0x92>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a7d      	ldr	r2, [pc, #500]	@ (80015bc <HAL_I2C_Init+0x27c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf94      	ite	ls
 80013cc:	2301      	movls	r3, #1
 80013ce:	2300      	movhi	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0e7      	b.n	80015aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a78      	ldr	r2, [pc, #480]	@ (80015c0 <HAL_I2C_Init+0x280>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a6a      	ldr	r2, [pc, #424]	@ (80015b4 <HAL_I2C_Init+0x274>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d802      	bhi.n	8001414 <HAL_I2C_Init+0xd4>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3301      	adds	r3, #1
 8001412:	e009      	b.n	8001428 <HAL_I2C_Init+0xe8>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	4a69      	ldr	r2, [pc, #420]	@ (80015c4 <HAL_I2C_Init+0x284>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	3301      	adds	r3, #1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	430b      	orrs	r3, r1
 800142e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800143a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	495c      	ldr	r1, [pc, #368]	@ (80015b4 <HAL_I2C_Init+0x274>)
 8001444:	428b      	cmp	r3, r1
 8001446:	d819      	bhi.n	800147c <HAL_I2C_Init+0x13c>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e59      	subs	r1, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fbb1 f3f3 	udiv	r3, r1, r3
 8001456:	1c59      	adds	r1, r3, #1
 8001458:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800145c:	400b      	ands	r3, r1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <HAL_I2C_Init+0x138>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e59      	subs	r1, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001476:	e051      	b.n	800151c <HAL_I2C_Init+0x1dc>
 8001478:	2304      	movs	r3, #4
 800147a:	e04f      	b.n	800151c <HAL_I2C_Init+0x1dc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d111      	bne.n	80014a8 <HAL_I2C_Init+0x168>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	e012      	b.n	80014ce <HAL_I2C_Init+0x18e>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	0099      	lsls	r1, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x196>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e022      	b.n	800151c <HAL_I2C_Init+0x1dc>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10e      	bne.n	80014fc <HAL_I2C_Init+0x1bc>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1e58      	subs	r0, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	440b      	add	r3, r1
 80014ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014fa:	e00f      	b.n	800151c <HAL_I2C_Init+0x1dc>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e58      	subs	r0, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	0099      	lsls	r1, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	6809      	ldr	r1, [r1, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800154a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6911      	ldr	r1, [r2, #16]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68d2      	ldr	r2, [r2, #12]
 8001556:	4311      	orrs	r1, r2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	000186a0 	.word	0x000186a0
 80015b8:	001e847f 	.word	0x001e847f
 80015bc:	003d08ff 	.word	0x003d08ff
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	10624dd3 	.word	0x10624dd3

080015c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	817b      	strh	r3, [r7, #10]
 80015da:	460b      	mov	r3, r1
 80015dc:	813b      	strh	r3, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015e2:	f7ff fbf9 	bl	8000dd8 <HAL_GetTick>
 80015e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	f040 80d9 	bne.w	80017a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2319      	movs	r3, #25
 80015fc:	2201      	movs	r2, #1
 80015fe:	496d      	ldr	r1, [pc, #436]	@ (80017b4 <HAL_I2C_Mem_Write+0x1ec>)
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f971 	bl	80018e8 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800160c:	2302      	movs	r3, #2
 800160e:	e0cc      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_I2C_Mem_Write+0x56>
 800161a:	2302      	movs	r3, #2
 800161c:	e0c5      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d007      	beq.n	8001644 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2221      	movs	r2, #33	@ 0x21
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2240      	movs	r2, #64	@ 0x40
 8001660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001674:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a4d      	ldr	r2, [pc, #308]	@ (80017b8 <HAL_I2C_Mem_Write+0x1f0>)
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001686:	88f8      	ldrh	r0, [r7, #6]
 8001688:	893a      	ldrh	r2, [r7, #8]
 800168a:	8979      	ldrh	r1, [r7, #10]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4603      	mov	r3, r0
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f890 	bl	80017bc <I2C_RequestMemoryWrite>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d052      	beq.n	8001748 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e081      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fa36 	bl	8001b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00d      	beq.n	80016d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d107      	bne.n	80016ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06b      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d11b      	bne.n	8001748 <HAL_I2C_Mem_Write+0x180>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1aa      	bne.n	80016a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 fa29 	bl	8001bac <I2C_WaitOnBTFFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00d      	beq.n	800177c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	2b04      	cmp	r3, #4
 8001766:	d107      	bne.n	8001778 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001776:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e016      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800178a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	00100002 	.word	0x00100002
 80017b8:	ffff0000 	.word	0xffff0000

080017bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	817b      	strh	r3, [r7, #10]
 80017ce:	460b      	mov	r3, r1
 80017d0:	813b      	strh	r3, [r7, #8]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f878 	bl	80018e8 <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800180c:	d103      	bne.n	8001816 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e05f      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	492d      	ldr	r1, [pc, #180]	@ (80018e4 <I2C_RequestMemoryWrite+0x128>)
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f8d3 	bl	80019dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e04c      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f95e 	bl	8001b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b04      	cmp	r3, #4
 800186c:	d107      	bne.n	800187e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e02b      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	e021      	b.n	80018d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001894:	893b      	ldrh	r3, [r7, #8]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f938 	bl	8001b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d107      	bne.n	80018ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e005      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018ce:	893b      	ldrh	r3, [r7, #8]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	00010002 	.word	0x00010002

080018e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	e048      	b.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001900:	d044      	beq.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001902:	f7ff fa69 	bl	8000dd8 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d139      	bne.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d10d      	bne.n	800193e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	43da      	mvns	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	4013      	ands	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	e00c      	b.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x70>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	43da      	mvns	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4013      	ands	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	429a      	cmp	r2, r3
 800195c:	d116      	bne.n	800198c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e023      	b.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	43da      	mvns	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	e00c      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4013      	ands	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d093      	beq.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019ea:	e071      	b.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fa:	d123      	bne.n	8001a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e067      	b.n	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a4a:	d041      	beq.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4c:	f7ff f9c4 	bl	8000dd8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d302      	bcc.n	8001a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d136      	bne.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10c      	bne.n	8001a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4013      	ands	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	e00b      	b.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4013      	ands	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d016      	beq.n	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e021      	b.n	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10c      	bne.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e00b      	b.n	8001b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4013      	ands	r3, r2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf14      	ite	ne
 8001b06:	2301      	movne	r3, #1
 8001b08:	2300      	moveq	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f47f af6d 	bne.w	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b28:	e034      	b.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f886 	bl	8001c3c <I2C_IsAcknowledgeFailed>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e034      	b.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b40:	d028      	beq.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff f949 	bl	8000dd8 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11d      	bne.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	2b80      	cmp	r3, #128	@ 0x80
 8001b64:	d016      	beq.n	8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e007      	b.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9e:	2b80      	cmp	r3, #128	@ 0x80
 8001ba0:	d1c3      	bne.n	8001b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bb8:	e034      	b.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f83e 	bl	8001c3c <I2C_IsAcknowledgeFailed>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e034      	b.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bd0:	d028      	beq.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff f901 	bl	8000dd8 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11d      	bne.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d016      	beq.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e007      	b.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d1c3      	bne.n	8001bba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c52:	d11b      	bne.n	8001c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f043 0204 	orr.w	r2, r3, #4
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e267      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e242      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a75      	ldr	r2, [pc, #468]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b70      	ldr	r3, [pc, #448]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a65      	ldr	r2, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f840 	bl	8000dd8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f83c 	bl	8000dd8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e207      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f82c 	bl	8000dd8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f828 	bl	8000dd8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1f3      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b44      	ldr	r3, [pc, #272]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c7      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4937      	ldr	r1, [pc, #220]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ffe1 	bl	8000dd8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe ffdd 	bl	8000dd8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a8      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4925      	ldr	r1, [pc, #148]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe ffc0 	bl	8000dd8 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ffbc 	bl	8000dd8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e187      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d036      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ffa0 	bl	8000dd8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe ff9c 	bl	8000dd8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e167      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ff89 	bl	8000dd8 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e00e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe ff85 	bl	8000dd8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d907      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e150      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ea      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8097 	beq.w	8002030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b81      	ldr	r3, [pc, #516]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b7a      	ldr	r3, [pc, #488]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b74      	ldr	r3, [pc, #464]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a73      	ldr	r2, [pc, #460]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ff45 	bl	8000dd8 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7fe ff41 	bl	8000dd8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
 8001f78:	4b64      	ldr	r3, [pc, #400]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	4a63      	ldr	r2, [pc, #396]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x30c>
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a5e      	ldr	r2, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001fa8:	4b58      	ldr	r3, [pc, #352]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	4b55      	ldr	r3, [pc, #340]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a54      	ldr	r2, [pc, #336]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff06 	bl	8000dd8 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff02 	bl	8000dd8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0cb      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4b49      	ldr	r3, [pc, #292]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ee      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fef0 	bl	8000dd8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe feec 	bl	8000dd8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0b5      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	4a38      	ldr	r2, [pc, #224]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a1 	beq.w	800217c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203a:	4b34      	ldr	r3, [pc, #208]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d05c      	beq.n	8002100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d141      	bne.n	80020d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fec0 	bl	8000dd8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe febc 	bl	8000dd8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e087      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fe95 	bl	8000dd8 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fe91 	bl	8000dd8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e05c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x416>
 80020d0:	e054      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe7e 	bl	8000dd8 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe fe7a 	bl	8000dd8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e045      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e038      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d028      	beq.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d121      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0cc      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d90c      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d044      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	2b03      	cmp	r3, #3
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4934      	ldr	r1, [pc, #208]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7fe fdac 	bl	8000dd8 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fda8 	bl	8000dd8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d20c      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fd0c 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	08004668 	.word	0x08004668
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b090      	sub	sp, #64	@ 0x40
 800235e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002370:	4b59      	ldr	r3, [pc, #356]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d00d      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 800237c:	2b08      	cmp	r3, #8
 800237e:	f200 80a1 	bhi.w	80024c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002386:	2b04      	cmp	r3, #4
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x3a>
 800238a:	e09b      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x184>)
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002390:	e09b      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002392:	4b53      	ldr	r3, [pc, #332]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002396:	e098      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002398:	4b4f      	ldr	r3, [pc, #316]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a2:	4b4d      	ldr	r3, [pc, #308]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d028      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	2200      	movs	r2, #0
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023c0:	2100      	movs	r1, #0
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023c4:	fb03 f201 	mul.w	r2, r3, r1
 80023c8:	2300      	movs	r3, #0
 80023ca:	fb00 f303 	mul.w	r3, r0, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	4a43      	ldr	r2, [pc, #268]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023d2:	fba0 1202 	umull	r1, r2, r0, r2
 80023d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023d8:	460a      	mov	r2, r1
 80023da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023de:	4413      	add	r3, r2
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e4:	2200      	movs	r2, #0
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	61fa      	str	r2, [r7, #28]
 80023ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023f2:	f7fd ff45 	bl	8000280 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4613      	mov	r3, r2
 80023fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023fe:	e053      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002400:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	2200      	movs	r2, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	617a      	str	r2, [r7, #20]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002412:	f04f 0b00 	mov.w	fp, #0
 8002416:	4652      	mov	r2, sl
 8002418:	465b      	mov	r3, fp
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	0159      	lsls	r1, r3, #5
 8002424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002428:	0150      	lsls	r0, r2, #5
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ebb2 080a 	subs.w	r8, r2, sl
 8002432:	eb63 090b 	sbc.w	r9, r3, fp
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800244a:	ebb2 0408 	subs.w	r4, r2, r8
 800244e:	eb63 0509 	sbc.w	r5, r3, r9
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	00eb      	lsls	r3, r5, #3
 800245c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002460:	00e2      	lsls	r2, r4, #3
 8002462:	4614      	mov	r4, r2
 8002464:	461d      	mov	r5, r3
 8002466:	eb14 030a 	adds.w	r3, r4, sl
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	eb45 030b 	adc.w	r3, r5, fp
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247e:	4629      	mov	r1, r5
 8002480:	028b      	lsls	r3, r1, #10
 8002482:	4621      	mov	r1, r4
 8002484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002488:	4621      	mov	r1, r4
 800248a:	028a      	lsls	r2, r1, #10
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002492:	2200      	movs	r2, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	60fa      	str	r2, [r7, #12]
 8002498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800249c:	f7fd fef0 	bl	8000280 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c2:	e002      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x184>)
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3740      	adds	r7, #64	@ 0x40
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	017d7840 	.word	0x017d7840

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002500:	f7ff fff0 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a9b      	lsrs	r3, r3, #10
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	@ (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	08004678 	.word	0x08004678

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002528:	f7ff ffdc 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0b5b      	lsrs	r3, r3, #13
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	@ (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	08004678 	.word	0x08004678

0800254c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07b      	b.n	8002656 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800256e:	d009      	beq.n	8002584 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
 8002576:	e005      	b.n	8002584 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fa82 	bl	8000aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002608:	ea42 0103 	orr.w	r1, r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0104 	and.w	r1, r3, #4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	f003 0210 	and.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002644:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b088      	sub	sp, #32
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266e:	f7fe fbb3 	bl	8000dd8 <HAL_GetTick>
 8002672:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d001      	beq.n	8002688 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
 8002686:	e12a      	b.n	80028de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_SPI_Transmit+0x36>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e122      	b.n	80028de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_SPI_Transmit+0x48>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e11b      	b.n	80028de <HAL_SPI_Transmit+0x280>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f4:	d10f      	bne.n	8002716 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002704:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002714:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b40      	cmp	r3, #64	@ 0x40
 8002722:	d007      	beq.n	8002734 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800273c:	d152      	bne.n	80027e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Transmit+0xee>
 8002746:	8b7b      	ldrh	r3, [r7, #26]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d145      	bne.n	80027d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	881a      	ldrh	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275c:	1c9a      	adds	r2, r3, #2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002770:	e032      	b.n	80027d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d112      	bne.n	80027a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80027a4:	e018      	b.n	80027d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027a6:	f7fe fb17 	bl	8000dd8 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d803      	bhi.n	80027be <HAL_SPI_Transmit+0x160>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027bc:	d102      	bne.n	80027c4 <HAL_SPI_Transmit+0x166>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e082      	b.n	80028de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1c7      	bne.n	8002772 <HAL_SPI_Transmit+0x114>
 80027e2:	e053      	b.n	800288c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_Transmit+0x194>
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d147      	bne.n	8002882 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002818:	e033      	b.n	8002882 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	d113      	bne.n	8002850 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800284e:	e018      	b.n	8002882 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002850:	f7fe fac2 	bl	8000dd8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d803      	bhi.n	8002868 <HAL_SPI_Transmit+0x20a>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002866:	d102      	bne.n	800286e <HAL_SPI_Transmit+0x210>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e02d      	b.n	80028de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1c6      	bne.n	800281a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fbd9 	bl	8003048 <SPI_EndRxTxTransaction>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b088      	sub	sp, #32
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	e104      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290e:	d112      	bne.n	8002936 <HAL_SPI_Receive+0x50>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2204      	movs	r2, #4
 800291c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f8f3 	bl	8002b18 <HAL_SPI_TransmitReceive>
 8002932:	4603      	mov	r3, r0
 8002934:	e0ec      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002936:	f7fe fa4f 	bl	8000dd8 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Receive+0x62>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0e1      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_SPI_Receive+0x74>
 8002956:	2302      	movs	r3, #2
 8002958:	e0da      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2204      	movs	r2, #4
 8002966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a8:	d10f      	bne.n	80029ca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d007      	beq.n	80029e8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d170      	bne.n	8002ad2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029f0:	e035      	b.n	8002a5e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d115      	bne.n	8002a2c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f103 020c 	add.w	r2, r3, #12
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a2a:	e018      	b.n	8002a5e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a2c:	f7fe f9d4 	bl	8000dd8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d803      	bhi.n	8002a44 <HAL_SPI_Receive+0x15e>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a42:	d102      	bne.n	8002a4a <HAL_SPI_Receive+0x164>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e058      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1c4      	bne.n	80029f2 <HAL_SPI_Receive+0x10c>
 8002a68:	e038      	b.n	8002adc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d113      	bne.n	8002aa0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	b292      	uxth	r2, r2
 8002a84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	1c9a      	adds	r2, r3, #2
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a9e:	e018      	b.n	8002ad2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa0:	f7fe f99a 	bl	8000dd8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d803      	bhi.n	8002ab8 <HAL_SPI_Receive+0x1d2>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ab6:	d102      	bne.n	8002abe <HAL_SPI_Receive+0x1d8>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e01e      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1c6      	bne.n	8002a6a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fa4b 	bl	8002f7c <SPI_EndRxTransaction>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	@ 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b26:	2301      	movs	r3, #1
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b2a:	f7fe f955 	bl	8000dd8 <HAL_GetTick>
 8002b2e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b36:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d00c      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x4a>
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b4e:	d106      	bne.n	8002b5e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_TransmitReceive+0x46>
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d001      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e17f      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x5c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x5c>
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e174      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x6e>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e16d      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d003      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	887a      	ldrh	r2, [r7, #2]
 8002bca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be2:	2b40      	cmp	r3, #64	@ 0x40
 8002be4:	d007      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bfe:	d17e      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0xf6>
 8002c08:	8afb      	ldrh	r3, [r7, #22]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d16c      	bne.n	8002ce8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c32:	e059      	b.n	8002ce8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d11b      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x162>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d016      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x162>
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d113      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	881a      	ldrh	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	1c9a      	adds	r2, r3, #2
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x1a4>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	1c9a      	adds	r2, r3, #2
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cbc:	f7fe f88c 	bl	8000dd8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d80d      	bhi.n	8002ce8 <HAL_SPI_TransmitReceive+0x1d0>
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cd2:	d009      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0bc      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1a0      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x11c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d19b      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x11c>
 8002cfc:	e082      	b.n	8002e04 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x1f4>
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d171      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d32:	e05d      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d11c      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x264>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <HAL_SPI_TransmitReceive+0x264>
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d114      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d119      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x2a6>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d014      	beq.n	8002dbe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dbe:	f7fe f80b 	bl	8000dd8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d803      	bhi.n	8002dd6 <HAL_SPI_TransmitReceive+0x2be>
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd4:	d102      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x2c4>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e038      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d19c      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x21c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d197      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f91d 	bl	8003048 <SPI_EndRxTxTransaction>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e01d      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e7c:	f7fd ffac 	bl	8000dd8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e8c:	f7fd ffa4 	bl	8000dd8 <HAL_GetTick>
 8002e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e92:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	0d1b      	lsrs	r3, r3, #20
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea2:	e054      	b.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eaa:	d050      	beq.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eac:	f7fd ff94 	bl	8000dd8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d902      	bls.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d13d      	bne.n	8002f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eda:	d111      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee4:	d004      	beq.n	8002ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d107      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f08:	d10f      	bne.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e017      	b.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d19b      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000

08002f7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f90:	d111      	bne.n	8002fb6 <SPI_EndRxTransaction+0x3a>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9a:	d004      	beq.n	8002fa6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa4:	d107      	bne.n	8002fb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fbe:	d12a      	bne.n	8003016 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc8:	d012      	beq.n	8002ff0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2180      	movs	r1, #128	@ 0x80
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff ff49 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02d      	beq.n	800303c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e026      	b.n	800303e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff36 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e013      	b.n	800303e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2200      	movs	r2, #0
 800301e:	2101      	movs	r1, #1
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ff23 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e000      	b.n	800303e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2201      	movs	r2, #1
 800305c:	2102      	movs	r1, #2
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff ff04 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e032      	b.n	80030e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <SPI_EndRxTxTransaction+0xa0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ec <SPI_EndRxTxTransaction+0xa4>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	0d5b      	lsrs	r3, r3, #21
 8003086:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003098:	d112      	bne.n	80030c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	@ 0x80
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff fee1 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e00f      	b.n	80030e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	2b80      	cmp	r3, #128	@ 0x80
 80030d8:	d0f2      	beq.n	80030c0 <SPI_EndRxTxTransaction+0x78>
 80030da:	e000      	b.n	80030de <SPI_EndRxTxTransaction+0x96>
        break;
 80030dc:	bf00      	nop
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000000 	.word	0x20000000
 80030ec:	165e9f81 	.word	0x165e9f81

080030f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e042      	b.n	8003188 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fd0e 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	@ 0x24
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f973 	bl	8003420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	@ 0x28
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d175      	bne.n	800329c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_UART_Transmit+0x2c>
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e06e      	b.n	800329e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2221      	movs	r2, #33	@ 0x21
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ce:	f7fd fe03 	bl	8000dd8 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e8:	d108      	bne.n	80031fc <HAL_UART_Transmit+0x6c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	e003      	b.n	8003204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003204:	e02e      	b.n	8003264 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f848 	bl	80032a6 <UART_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e03a      	b.n	800329e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800323c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3302      	adds	r3, #2
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e007      	b.n	8003256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3301      	adds	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cb      	bne.n	8003206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2140      	movs	r1, #64	@ 0x40
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f814 	bl	80032a6 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e006      	b.n	800329e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b6:	e03b      	b.n	8003330 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032be:	d037      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fd fd8a 	bl	8000dd8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e03a      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d023      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b80      	cmp	r3, #128	@ 0x80
 80032ec:	d020      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	d01d      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d116      	bne.n	8003330 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f81d 	bl	8003358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2208      	movs	r2, #8
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00f      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	429a      	cmp	r2, r3
 800334c:	d0b4      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b095      	sub	sp, #84	@ 0x54
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003380:	643a      	str	r2, [r7, #64]	@ 0x40
 8003382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3314      	adds	r3, #20
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d119      	bne.n	8003404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0310 	bic.w	r3, r3, #16
 80033e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033f0:	61ba      	str	r2, [r7, #24]
 80033f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003412:	bf00      	nop
 8003414:	3754      	adds	r7, #84	@ 0x54
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b0c0      	sub	sp, #256	@ 0x100
 8003426:	af00      	add	r7, sp, #0
 8003428:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	ea40 0301 	orr.w	r3, r0, r1
 8003448:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	431a      	orrs	r2, r3
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003478:	f021 010c 	bic.w	r1, r1, #12
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003486:	430b      	orrs	r3, r1
 8003488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349a:	6999      	ldr	r1, [r3, #24]
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	ea40 0301 	orr.w	r3, r0, r1
 80034a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b8f      	ldr	r3, [pc, #572]	@ (80036ec <UART_SetConfig+0x2cc>)
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <UART_SetConfig+0xa0>
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b8d      	ldr	r3, [pc, #564]	@ (80036f0 <UART_SetConfig+0x2d0>)
 80034bc:	429a      	cmp	r2, r3
 80034be:	d104      	bne.n	80034ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c0:	f7ff f830 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 80034c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034c8:	e003      	b.n	80034d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ca:	f7ff f817 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 80034ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034dc:	f040 810c 	bne.w	80036f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	1891      	adds	r1, r2, r2
 80034f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034fa:	415b      	adcs	r3, r3
 80034fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003502:	4621      	mov	r1, r4
 8003504:	eb12 0801 	adds.w	r8, r2, r1
 8003508:	4629      	mov	r1, r5
 800350a:	eb43 0901 	adc.w	r9, r3, r1
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003522:	4690      	mov	r8, r2
 8003524:	4699      	mov	r9, r3
 8003526:	4623      	mov	r3, r4
 8003528:	eb18 0303 	adds.w	r3, r8, r3
 800352c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003530:	462b      	mov	r3, r5
 8003532:	eb49 0303 	adc.w	r3, r9, r3
 8003536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003546:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800354a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800354e:	460b      	mov	r3, r1
 8003550:	18db      	adds	r3, r3, r3
 8003552:	653b      	str	r3, [r7, #80]	@ 0x50
 8003554:	4613      	mov	r3, r2
 8003556:	eb42 0303 	adc.w	r3, r2, r3
 800355a:	657b      	str	r3, [r7, #84]	@ 0x54
 800355c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003560:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003564:	f7fc fe8c 	bl	8000280 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4b61      	ldr	r3, [pc, #388]	@ (80036f4 <UART_SetConfig+0x2d4>)
 800356e:	fba3 2302 	umull	r2, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	011c      	lsls	r4, r3, #4
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003580:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003584:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	1891      	adds	r1, r2, r2
 800358e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003590:	415b      	adcs	r3, r3
 8003592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003594:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003598:	4641      	mov	r1, r8
 800359a:	eb12 0a01 	adds.w	sl, r2, r1
 800359e:	4649      	mov	r1, r9
 80035a0:	eb43 0b01 	adc.w	fp, r3, r1
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b8:	4692      	mov	sl, r2
 80035ba:	469b      	mov	fp, r3
 80035bc:	4643      	mov	r3, r8
 80035be:	eb1a 0303 	adds.w	r3, sl, r3
 80035c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c6:	464b      	mov	r3, r9
 80035c8:	eb4b 0303 	adc.w	r3, fp, r3
 80035cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035e4:	460b      	mov	r3, r1
 80035e6:	18db      	adds	r3, r3, r3
 80035e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ea:	4613      	mov	r3, r2
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035fa:	f7fc fe41 	bl	8000280 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4611      	mov	r1, r2
 8003604:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <UART_SetConfig+0x2d4>)
 8003606:	fba3 2301 	umull	r2, r3, r3, r1
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2264      	movs	r2, #100	@ 0x64
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	1acb      	subs	r3, r1, r3
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800361a:	4b36      	ldr	r3, [pc, #216]	@ (80036f4 <UART_SetConfig+0x2d4>)
 800361c:	fba3 2302 	umull	r2, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003628:	441c      	add	r4, r3
 800362a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003634:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003638:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	1891      	adds	r1, r2, r2
 8003642:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003644:	415b      	adcs	r3, r3
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800364c:	4641      	mov	r1, r8
 800364e:	1851      	adds	r1, r2, r1
 8003650:	6339      	str	r1, [r7, #48]	@ 0x30
 8003652:	4649      	mov	r1, r9
 8003654:	414b      	adcs	r3, r1
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003664:	4659      	mov	r1, fp
 8003666:	00cb      	lsls	r3, r1, #3
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366e:	4651      	mov	r1, sl
 8003670:	00ca      	lsls	r2, r1, #3
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	4603      	mov	r3, r0
 8003678:	4642      	mov	r2, r8
 800367a:	189b      	adds	r3, r3, r2
 800367c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003680:	464b      	mov	r3, r9
 8003682:	460a      	mov	r2, r1
 8003684:	eb42 0303 	adc.w	r3, r2, r3
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003698:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800369c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036a0:	460b      	mov	r3, r1
 80036a2:	18db      	adds	r3, r3, r3
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036a6:	4613      	mov	r3, r2
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036b6:	f7fc fde3 	bl	8000280 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <UART_SetConfig+0x2d4>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	2164      	movs	r1, #100	@ 0x64
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	3332      	adds	r3, #50	@ 0x32
 80036d2:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <UART_SetConfig+0x2d4>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f003 0207 	and.w	r2, r3, #7
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4422      	add	r2, r4
 80036e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e8:	e106      	b.n	80038f8 <UART_SetConfig+0x4d8>
 80036ea:	bf00      	nop
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40011400 	.word	0x40011400
 80036f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003702:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003706:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800370a:	4642      	mov	r2, r8
 800370c:	464b      	mov	r3, r9
 800370e:	1891      	adds	r1, r2, r2
 8003710:	6239      	str	r1, [r7, #32]
 8003712:	415b      	adcs	r3, r3
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
 8003716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800371a:	4641      	mov	r1, r8
 800371c:	1854      	adds	r4, r2, r1
 800371e:	4649      	mov	r1, r9
 8003720:	eb43 0501 	adc.w	r5, r3, r1
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	00eb      	lsls	r3, r5, #3
 800372e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003732:	00e2      	lsls	r2, r4, #3
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	4643      	mov	r3, r8
 800373a:	18e3      	adds	r3, r4, r3
 800373c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003740:	464b      	mov	r3, r9
 8003742:	eb45 0303 	adc.w	r3, r5, r3
 8003746:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003756:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003766:	4629      	mov	r1, r5
 8003768:	008b      	lsls	r3, r1, #2
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003770:	4621      	mov	r1, r4
 8003772:	008a      	lsls	r2, r1, #2
 8003774:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003778:	f7fc fd82 	bl	8000280 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b60      	ldr	r3, [pc, #384]	@ (8003904 <UART_SetConfig+0x4e4>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011c      	lsls	r4, r3, #4
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003794:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003798:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	61b9      	str	r1, [r7, #24]
 80037a4:	415b      	adcs	r3, r3
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	4641      	mov	r1, r8
 80037ae:	1851      	adds	r1, r2, r1
 80037b0:	6139      	str	r1, [r7, #16]
 80037b2:	4649      	mov	r1, r9
 80037b4:	414b      	adcs	r3, r1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c4:	4659      	mov	r1, fp
 80037c6:	00cb      	lsls	r3, r1, #3
 80037c8:	4651      	mov	r1, sl
 80037ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ce:	4651      	mov	r1, sl
 80037d0:	00ca      	lsls	r2, r1, #3
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	4642      	mov	r2, r8
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037e0:	464b      	mov	r3, r9
 80037e2:	460a      	mov	r2, r1
 80037e4:	eb42 0303 	adc.w	r3, r2, r3
 80037e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003816:	f7fc fd33 	bl	8000280 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4611      	mov	r1, r2
 8003820:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <UART_SetConfig+0x4e4>)
 8003822:	fba3 2301 	umull	r2, r3, r3, r1
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2264      	movs	r2, #100	@ 0x64
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	1acb      	subs	r3, r1, r3
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	3332      	adds	r3, #50	@ 0x32
 8003834:	4a33      	ldr	r2, [pc, #204]	@ (8003904 <UART_SetConfig+0x4e4>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003840:	441c      	add	r4, r3
 8003842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003846:	2200      	movs	r2, #0
 8003848:	673b      	str	r3, [r7, #112]	@ 0x70
 800384a:	677a      	str	r2, [r7, #116]	@ 0x74
 800384c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	415b      	adcs	r3, r3
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003860:	4641      	mov	r1, r8
 8003862:	1851      	adds	r1, r2, r1
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	4649      	mov	r1, r9
 8003868:	414b      	adcs	r3, r1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003878:	4659      	mov	r1, fp
 800387a:	00cb      	lsls	r3, r1, #3
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003882:	4651      	mov	r1, sl
 8003884:	00ca      	lsls	r2, r1, #3
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	4603      	mov	r3, r0
 800388c:	4642      	mov	r2, r8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003892:	464b      	mov	r3, r9
 8003894:	460a      	mov	r2, r1
 8003896:	eb42 0303 	adc.w	r3, r2, r3
 800389a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038b4:	4649      	mov	r1, r9
 80038b6:	008b      	lsls	r3, r1, #2
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038be:	4641      	mov	r1, r8
 80038c0:	008a      	lsls	r2, r1, #2
 80038c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038c6:	f7fc fcdb 	bl	8000280 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <UART_SetConfig+0x4e4>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	@ 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	3332      	adds	r3, #50	@ 0x32
 80038e2:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <UART_SetConfig+0x4e4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4422      	add	r2, r4
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038fe:	46bd      	mov	sp, r7
 8003900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003904:	51eb851f 	.word	0x51eb851f

08003908 <_ZN11TimeManager11getTimeSpanEv>:

	/*
	 * Returns an instance of a TimeSpan
	 * return value: TimeSpan struct instance
	 */
	TimeSpan getTimeSpan() { return passage_of_time_;}
 8003908:	b4b0      	push	{r4, r5, r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	6811      	ldr	r1, [r2, #0]
 8003918:	6855      	ldr	r5, [r2, #4]
 800391a:	6894      	ldr	r4, [r2, #8]
 800391c:	68d0      	ldr	r0, [r2, #12]
 800391e:	6019      	str	r1, [r3, #0]
 8003920:	605d      	str	r5, [r3, #4]
 8003922:	609c      	str	r4, [r3, #8]
 8003924:	60d8      	str	r0, [r3, #12]
 8003926:	6911      	ldr	r1, [r2, #16]
 8003928:	6119      	str	r1, [r3, #16]
 800392a:	7d12      	ldrb	r2, [r2, #20]
 800392c:	751a      	strb	r2, [r3, #20]
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bcb0      	pop	{r4, r5, r7}
 8003936:	4770      	bx	lr

08003938 <_ZN8Time_RTCC1EP17I2C_HandleTypeDefbhhhhhhh>:
 *      Author: Fola Fatola
 */

#include "rtc.hpp"

Time_RTC::Time_RTC(I2C_HandleTypeDef *i2c_handle, bool use_twenty_four_hour_time,
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b08b      	sub	sp, #44	@ 0x2c
 800393c:	af06      	add	r7, sp, #24
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	460b      	mov	r3, r1
 8003948:	71fb      	strb	r3, [r7, #7]
 800394a:	4613      	mov	r3, r2
 800394c:	71bb      	strb	r3, [r7, #6]
		uint8_t seconds, uint8_t minutes,
		uint8_t hours, uint8_t week_day,
		uint8_t date_day, uint8_t month, uint8_t year) :
	i2c_handle_{i2c_handle}, twenty_four_hour_time{use_twenty_four_hour_time},
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	79fa      	ldrb	r2, [r7, #7]
 8003958:	711a      	strb	r2, [r3, #4]
	tim_manager_{TimeManager(seconds, minutes, hours, week_day, date_day, month, year, use_twenty_four_hour_time)}{}
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1d58      	adds	r0, r3, #5
 800395e:	f897 4024 	ldrb.w	r4, [r7, #36]	@ 0x24
 8003962:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003966:	79b9      	ldrb	r1, [r7, #6]
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	9304      	str	r3, [sp, #16]
 800396c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003970:	9303      	str	r3, [sp, #12]
 8003972:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003976:	9302      	str	r3, [sp, #8]
 8003978:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4623      	mov	r3, r4
 8003986:	f000 f8b1 	bl	8003aec <_ZN11TimeManagerC1Ehhhhhhhb>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	bd90      	pop	{r4, r7, pc}

08003994 <_ZN8Time_RTC13rtc_write_regEhPh>:

RTC_Status_E Time_RTC::rtc_write_reg(uint8_t register_address, uint8_t *transmit_data) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af04      	add	r7, sp, #16
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	460b      	mov	r3, r1
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	72fb      	strb	r3, [r7, #11]
	if (i2c_handle_ == nullptr) {
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <_ZN8Time_RTC13rtc_write_regEhPh+0x1a>
		return RTC_NULL_I2C_HANDLE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e018      	b.n	80039e0 <_ZN8Time_RTC13rtc_write_regEhPh+0x4c>
	}

	if (HAL_I2C_Mem_Write(i2c_handle_, DEVICE_ADDR, register_address, MEM_ADDR_SIZE, transmit_data, 1, TIMEOUT) != HAL_OK) {
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	2364      	movs	r3, #100	@ 0x64
 80039b8:	9302      	str	r3, [sp, #8]
 80039ba:	2301      	movs	r3, #1
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2301      	movs	r3, #1
 80039c4:	21d0      	movs	r1, #208	@ 0xd0
 80039c6:	f7fd fdff 	bl	80015c8 <HAL_I2C_Mem_Write>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <_ZN8Time_RTC13rtc_write_regEhPh+0x4a>
		return RTC_INIT_FAIL;
 80039da:	2302      	movs	r3, #2
 80039dc:	e000      	b.n	80039e0 <_ZN8Time_RTC13rtc_write_regEhPh+0x4c>
	}

	return RTC_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_ZN8Time_RTC8rtc_initEv>:

	return RTC_OK;
}


RTC_Status_E Time_RTC::rtc_init() {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b090      	sub	sp, #64	@ 0x40
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	RTC_Status_E status = RTC_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	//rtc register stores data in bcd format.
	status = tim_manager_.convert_decimal_time_to_bcd();
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3305      	adds	r3, #5
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f8f2 	bl	8003be4 <_ZN11TimeManager27convert_decimal_time_to_bcdEv>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (status != RTC_OK) {
 8003a06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <_ZN8Time_RTC8rtc_initEv+0x2c>
		return status;
 8003a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a12:	e064      	b.n	8003ade <_ZN8Time_RTC8rtc_initEv+0xf6>
	}

	TimeSpan time_span = tim_manager_.getTimeSpan();
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1d5a      	adds	r2, r3, #5
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff72 	bl	8003908 <_ZN11TimeManager11getTimeSpanEv>

	//fetch the initial values for each of the units of time.
	//Each value of time will be written to a register corresponding to its unit.
	uint8_t seconds = time_span.seconds_.time_value;
 8003a24:	7f7b      	ldrb	r3, [r7, #29]
 8003a26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t minutes = time_span.minutes_.time_value;
 8003a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a2e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t hours = time_span.hours_.time_value;
 8003a32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a36:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t date_day = time_span.date_day_.time_value;
 8003a3a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a3e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t week_day = time_span.week_day_.time_value;
 8003a42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t month = time_span.month_.time_value;
 8003a4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t year = time_span.year_.time_value;
 8003a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a56:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	uint8_t bcd_time[7] = {seconds, minutes, hours,
			date_day, week_day, month, year};
 8003a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003a5e:	753b      	strb	r3, [r7, #20]
 8003a60:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a64:	757b      	strb	r3, [r7, #21]
 8003a66:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a6a:	75bb      	strb	r3, [r7, #22]
 8003a6c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a70:	75fb      	strb	r3, [r7, #23]
 8003a72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a76:	763b      	strb	r3, [r7, #24]
 8003a78:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003a7c:	767b      	strb	r3, [r7, #25]
 8003a7e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003a82:	76bb      	strb	r3, [r7, #26]

	uint8_t time_registers[7] = {SECONDS_REG, MINUTES_REG, HOURS_REG,
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <_ZN8Time_RTC8rtc_initEv+0x100>)
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a8e:	6018      	str	r0, [r3, #0]
 8003a90:	3304      	adds	r3, #4
 8003a92:	8019      	strh	r1, [r3, #0]
 8003a94:	3302      	adds	r3, #2
 8003a96:	0c0a      	lsrs	r2, r1, #16
 8003a98:	701a      	strb	r2, [r3, #0]
			WEEK_DAY_REG, DATE_DAY_REG, MONTH_REG, YEAR_REG};

	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a9e:	e019      	b.n	8003ad4 <_ZN8Time_RTC8rtc_initEv+0xec>
		//write the time values to the time registers.
		status = rtc_write_reg(time_registers[time_unit_idx], &(bcd_time[time_unit_idx]));
 8003aa0:	f107 020c 	add.w	r2, r7, #12
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa6:	4413      	add	r3, r2
 8003aa8:	7819      	ldrb	r1, [r3, #0]
 8003aaa:	f107 0214 	add.w	r2, r7, #20
 8003aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab0:	4413      	add	r3, r2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ff6d 	bl	8003994 <_ZN8Time_RTC13rtc_write_regEhPh>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (status != RTC_OK) {			//if the write fails, return error code.
 8003ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <_ZN8Time_RTC8rtc_initEv+0xe6>
			return status;
 8003ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003acc:	e007      	b.n	8003ade <_ZN8Time_RTC8rtc_initEv+0xf6>
	for (int time_unit_idx = 0; time_unit_idx < 7; ++time_unit_idx) {
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	dde2      	ble.n	8003aa0 <_ZN8Time_RTC8rtc_initEv+0xb8>
		}
	}

	return status;
 8003ada:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3740      	adds	r7, #64	@ 0x40
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08004660 	.word	0x08004660

08003aec <_ZN11TimeManagerC1Ehhhhhhhb>:

#include "timeunit.hpp"
#include <climits>


TimeManager::TimeManager(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t week_day, uint8_t date_day, uint8_t month, uint8_t year, bool use_twenty_four_hour_time) {
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	70fb      	strb	r3, [r7, #3]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70bb      	strb	r3, [r7, #2]
 8003b02:	4613      	mov	r3, r2
 8003b04:	707b      	strb	r3, [r7, #1]
	passage_of_time_.seconds_.time_type = SECONDS;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
	passage_of_time_.seconds_.time_value = seconds;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	705a      	strb	r2, [r3, #1]
	passage_of_time_.seconds_.max_time = 60;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223c      	movs	r2, #60	@ 0x3c
 8003b16:	709a      	strb	r2, [r3, #2]

	passage_of_time_.minutes_.time_type = MINUTES;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	70da      	strb	r2, [r3, #3]
	passage_of_time_.minutes_.time_value = minutes;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	78ba      	ldrb	r2, [r7, #2]
 8003b22:	711a      	strb	r2, [r3, #4]
	passage_of_time_.minutes_.max_time = 60;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	223c      	movs	r2, #60	@ 0x3c
 8003b28:	715a      	strb	r2, [r3, #5]

	passage_of_time_.hours_.time_type = HOURS;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	719a      	strb	r2, [r3, #6]
	passage_of_time_.hours_.time_value = hours;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	787a      	ldrb	r2, [r7, #1]
 8003b34:	71da      	strb	r2, [r3, #7]

	if (use_twenty_four_hour_time) {
 8003b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <_ZN11TimeManagerC1Ehhhhhhhb+0x5a>
		passage_of_time_.hours_.max_time = 24;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2218      	movs	r2, #24
 8003b42:	721a      	strb	r2, [r3, #8]
 8003b44:	e002      	b.n	8003b4c <_ZN11TimeManagerC1Ehhhhhhhb+0x60>
	} else {
		passage_of_time_.hours_.max_time = 12;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	220c      	movs	r2, #12
 8003b4a:	721a      	strb	r2, [r3, #8]
	}

	passage_of_time_.week_day_.time_type = WEEK_DAY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	725a      	strb	r2, [r3, #9]
	passage_of_time_.week_day_.time_value = week_day;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7c3a      	ldrb	r2, [r7, #16]
 8003b56:	729a      	strb	r2, [r3, #10]
	passage_of_time_.week_day_.max_time = 7;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2207      	movs	r2, #7
 8003b5c:	72da      	strb	r2, [r3, #11]

	passage_of_time_.month_.time_type = MONTH;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2205      	movs	r2, #5
 8003b62:	73da      	strb	r2, [r3, #15]
	passage_of_time_.month_.time_value = month;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7e3a      	ldrb	r2, [r7, #24]
 8003b68:	741a      	strb	r2, [r3, #16]
	passage_of_time_.month_.max_time = 12;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	220c      	movs	r2, #12
 8003b6e:	745a      	strb	r2, [r3, #17]


	passage_of_time_.date_day_.time_type = DATE_DAY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	731a      	strb	r2, [r3, #12]
	passage_of_time_.date_day_.time_value = date_day;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7d3a      	ldrb	r2, [r7, #20]
 8003b7a:	735a      	strb	r2, [r3, #13]

	if (month == JANUARY || month == MARCH
 8003b7c:	7e3b      	ldrb	r3, [r7, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d011      	beq.n	8003ba6 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 8003b82:	7e3b      	ldrb	r3, [r7, #24]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d00e      	beq.n	8003ba6 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
	 || month == MAY || month == JULY || month == AUGUST
 8003b88:	7e3b      	ldrb	r3, [r7, #24]
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d00b      	beq.n	8003ba6 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 8003b8e:	7e3b      	ldrb	r3, [r7, #24]
 8003b90:	2b07      	cmp	r3, #7
 8003b92:	d008      	beq.n	8003ba6 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 8003b94:	7e3b      	ldrb	r3, [r7, #24]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d005      	beq.n	8003ba6 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
	 || month == OCTOBER || month == DECEMBER){
 8003b9a:	7e3b      	ldrb	r3, [r7, #24]
 8003b9c:	2b0a      	cmp	r3, #10
 8003b9e:	d002      	beq.n	8003ba6 <_ZN11TimeManagerC1Ehhhhhhhb+0xba>
 8003ba0:	7e3b      	ldrb	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d103      	bne.n	8003bae <_ZN11TimeManagerC1Ehhhhhhhb+0xc2>
		passage_of_time_.date_day_.max_time = 31;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	221f      	movs	r2, #31
 8003baa:	739a      	strb	r2, [r3, #14]
 8003bac:	e009      	b.n	8003bc2 <_ZN11TimeManagerC1Ehhhhhhhb+0xd6>
	} else if (month == FEBRUARY) {							//We are NOT, doing leap year
 8003bae:	7e3b      	ldrb	r3, [r7, #24]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d103      	bne.n	8003bbc <_ZN11TimeManagerC1Ehhhhhhhb+0xd0>
		passage_of_time_.date_day_.max_time = 28;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	221c      	movs	r2, #28
 8003bb8:	739a      	strb	r2, [r3, #14]
 8003bba:	e002      	b.n	8003bc2 <_ZN11TimeManagerC1Ehhhhhhhb+0xd6>
	} else {
		passage_of_time_.date_day_.max_time = 30;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	221e      	movs	r2, #30
 8003bc0:	739a      	strb	r2, [r3, #14]
	}

	passage_of_time_.year_.time_type = YEAR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2206      	movs	r2, #6
 8003bc6:	749a      	strb	r2, [r3, #18]
	passage_of_time_.year_.time_value = year;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7f3a      	ldrb	r2, [r7, #28]
 8003bcc:	74da      	strb	r2, [r3, #19]
	passage_of_time_.year_.max_time = 99;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2263      	movs	r2, #99	@ 0x63
 8003bd2:	751a      	strb	r2, [r3, #20]
}
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <_ZN11TimeManager27convert_decimal_time_to_bcdEv>:
	passage_of_time_.date_day_.time_value = date_day;
	passage_of_time_.month_.time_value = month;
	passage_of_time_.year_.time_value = year;
}

RTC_Status_E TimeManager::convert_decimal_time_to_bcd() {
 8003be4:	b480      	push	{r7}
 8003be6:	b08d      	sub	sp, #52	@ 0x34
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003bec:	687b      	ldr	r3, [r7, #4]
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 8003bee:	60fb      	str	r3, [r7, #12]
	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3303      	adds	r3, #3
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 8003bf4:	613b      	str	r3, [r7, #16]
	TimeUnit* decimal_time[7] = {&passage_of_time_.seconds_, &(passage_of_time_.minutes_), &passage_of_time_.hours_,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3306      	adds	r3, #6
    		&passage_of_time_.week_day_, &passage_of_time_.date_day_, &passage_of_time_.month_, &passage_of_time_.year_};
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3309      	adds	r3, #9
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	330c      	adds	r3, #12
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	330f      	adds	r3, #15
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3312      	adds	r3, #18
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c18:	e05a      	b.n	8003cd0 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0xec>
    	if (decimal_time[tim_unit_idx]->time_value > decimal_time[tim_unit_idx]->max_time) {
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	3330      	adds	r3, #48	@ 0x30
 8003c20:	443b      	add	r3, r7
 8003c22:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003c26:	785a      	ldrb	r2, [r3, #1]
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3330      	adds	r3, #48	@ 0x30
 8003c2e:	443b      	add	r3, r7
 8003c30:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003c34:	789b      	ldrb	r3, [r3, #2]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d901      	bls.n	8003c3e <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x5a>
    		return RTC_DATA_TOO_LARGE;
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e04c      	b.n	8003cd8 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0xf4>
    	}

    	//TODO: add century and millenia calculations.
    	uint8_t ones = decimal_time[tim_unit_idx]->time_value % 10;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3330      	adds	r3, #48	@ 0x30
 8003c44:	443b      	add	r3, r7
 8003c46:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003c4a:	785a      	ldrb	r2, [r3, #1]
 8003c4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 8003c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c52:	08d9      	lsrs	r1, r3, #3
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		decimal_time[tim_unit_idx]->time_value /= 10;
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	3330      	adds	r3, #48	@ 0x30
 8003c68:	443b      	add	r3, r7
 8003c6a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003c6e:	785a      	ldrb	r2, [r3, #1]
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	3330      	adds	r3, #48	@ 0x30
 8003c76:	443b      	add	r3, r7
 8003c78:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003c7c:	4919      	ldr	r1, [pc, #100]	@ (8003ce4 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 8003c7e:	fba1 1202 	umull	r1, r2, r1, r2
 8003c82:	08d2      	lsrs	r2, r2, #3
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	705a      	strb	r2, [r3, #1]
		uint8_t tens = decimal_time[tim_unit_idx]->time_value % 10;
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3330      	adds	r3, #48	@ 0x30
 8003c8e:	443b      	add	r3, r7
 8003c90:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003c94:	785a      	ldrb	r2, [r3, #1]
 8003c96:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x100>)
 8003c98:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9c:	08d9      	lsrs	r1, r3, #3
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		decimal_time[tim_unit_idx]->time_value = ones + (tens << 4);
 8003cac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	b2d9      	uxtb	r1, r3
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3330      	adds	r3, #48	@ 0x30
 8003cba:	443b      	add	r3, r7
 8003cbc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003cc0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003cc4:	440a      	add	r2, r1
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	705a      	strb	r2, [r3, #1]
    for (int tim_unit_idx = 0; tim_unit_idx < 7; ++tim_unit_idx) {
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	3301      	adds	r3, #1
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	dda1      	ble.n	8003c1a <_ZN11TimeManager27convert_decimal_time_to_bcdEv+0x36>
    }

    return RTC_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3734      	adds	r7, #52	@ 0x34
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	cccccccd 	.word	0xcccccccd

08003ce8 <siprintf>:
 8003ce8:	b40e      	push	{r1, r2, r3}
 8003cea:	b500      	push	{lr}
 8003cec:	b09c      	sub	sp, #112	@ 0x70
 8003cee:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cf0:	9002      	str	r0, [sp, #8]
 8003cf2:	9006      	str	r0, [sp, #24]
 8003cf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cf8:	4809      	ldr	r0, [pc, #36]	@ (8003d20 <siprintf+0x38>)
 8003cfa:	9107      	str	r1, [sp, #28]
 8003cfc:	9104      	str	r1, [sp, #16]
 8003cfe:	4909      	ldr	r1, [pc, #36]	@ (8003d24 <siprintf+0x3c>)
 8003d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d04:	9105      	str	r1, [sp, #20]
 8003d06:	6800      	ldr	r0, [r0, #0]
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	a902      	add	r1, sp, #8
 8003d0c:	f000 f89c 	bl	8003e48 <_svfiprintf_r>
 8003d10:	9b02      	ldr	r3, [sp, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	b01c      	add	sp, #112	@ 0x70
 8003d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d1c:	b003      	add	sp, #12
 8003d1e:	4770      	bx	lr
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	ffff0208 	.word	0xffff0208

08003d28 <memset>:
 8003d28:	4402      	add	r2, r0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <memset+0xa>
 8003d30:	4770      	bx	lr
 8003d32:	f803 1b01 	strb.w	r1, [r3], #1
 8003d36:	e7f9      	b.n	8003d2c <memset+0x4>

08003d38 <__errno>:
 8003d38:	4b01      	ldr	r3, [pc, #4]	@ (8003d40 <__errno+0x8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000000c 	.word	0x2000000c

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4d0d      	ldr	r5, [pc, #52]	@ (8003d7c <__libc_init_array+0x38>)
 8003d48:	4c0d      	ldr	r4, [pc, #52]	@ (8003d80 <__libc_init_array+0x3c>)
 8003d4a:	1b64      	subs	r4, r4, r5
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	2600      	movs	r6, #0
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	4d0b      	ldr	r5, [pc, #44]	@ (8003d84 <__libc_init_array+0x40>)
 8003d56:	4c0c      	ldr	r4, [pc, #48]	@ (8003d88 <__libc_init_array+0x44>)
 8003d58:	f000 fc66 	bl	8004628 <_init>
 8003d5c:	1b64      	subs	r4, r4, r5
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	2600      	movs	r6, #0
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	080046bc 	.word	0x080046bc
 8003d80:	080046bc 	.word	0x080046bc
 8003d84:	080046bc 	.word	0x080046bc
 8003d88:	080046c0 	.word	0x080046c0

08003d8c <__retarget_lock_acquire_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__retarget_lock_release_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <__ssputs_r>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	688e      	ldr	r6, [r1, #8]
 8003d96:	461f      	mov	r7, r3
 8003d98:	42be      	cmp	r6, r7
 8003d9a:	680b      	ldr	r3, [r1, #0]
 8003d9c:	4682      	mov	sl, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4690      	mov	r8, r2
 8003da2:	d82d      	bhi.n	8003e00 <__ssputs_r+0x70>
 8003da4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003da8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003dac:	d026      	beq.n	8003dfc <__ssputs_r+0x6c>
 8003dae:	6965      	ldr	r5, [r4, #20]
 8003db0:	6909      	ldr	r1, [r1, #16]
 8003db2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db6:	eba3 0901 	sub.w	r9, r3, r1
 8003dba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dbe:	1c7b      	adds	r3, r7, #1
 8003dc0:	444b      	add	r3, r9
 8003dc2:	106d      	asrs	r5, r5, #1
 8003dc4:	429d      	cmp	r5, r3
 8003dc6:	bf38      	it	cc
 8003dc8:	461d      	movcc	r5, r3
 8003dca:	0553      	lsls	r3, r2, #21
 8003dcc:	d527      	bpl.n	8003e1e <__ssputs_r+0x8e>
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f000 f958 	bl	8004084 <_malloc_r>
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	b360      	cbz	r0, 8003e32 <__ssputs_r+0xa2>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	464a      	mov	r2, r9
 8003ddc:	f000 fbc4 	bl	8004568 <memcpy>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dea:	81a3      	strh	r3, [r4, #12]
 8003dec:	6126      	str	r6, [r4, #16]
 8003dee:	6165      	str	r5, [r4, #20]
 8003df0:	444e      	add	r6, r9
 8003df2:	eba5 0509 	sub.w	r5, r5, r9
 8003df6:	6026      	str	r6, [r4, #0]
 8003df8:	60a5      	str	r5, [r4, #8]
 8003dfa:	463e      	mov	r6, r7
 8003dfc:	42be      	cmp	r6, r7
 8003dfe:	d900      	bls.n	8003e02 <__ssputs_r+0x72>
 8003e00:	463e      	mov	r6, r7
 8003e02:	6820      	ldr	r0, [r4, #0]
 8003e04:	4632      	mov	r2, r6
 8003e06:	4641      	mov	r1, r8
 8003e08:	f000 fb84 	bl	8004514 <memmove>
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	1b9b      	subs	r3, r3, r6
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	4433      	add	r3, r6
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1e:	462a      	mov	r2, r5
 8003e20:	f000 fb4a 	bl	80044b8 <_realloc_r>
 8003e24:	4606      	mov	r6, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d1e0      	bne.n	8003dec <__ssputs_r+0x5c>
 8003e2a:	6921      	ldr	r1, [r4, #16]
 8003e2c:	4650      	mov	r0, sl
 8003e2e:	f000 fba9 	bl	8004584 <_free_r>
 8003e32:	230c      	movs	r3, #12
 8003e34:	f8ca 3000 	str.w	r3, [sl]
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e44:	e7e9      	b.n	8003e1a <__ssputs_r+0x8a>
	...

08003e48 <_svfiprintf_r>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	4698      	mov	r8, r3
 8003e4e:	898b      	ldrh	r3, [r1, #12]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	b09d      	sub	sp, #116	@ 0x74
 8003e54:	4607      	mov	r7, r0
 8003e56:	460d      	mov	r5, r1
 8003e58:	4614      	mov	r4, r2
 8003e5a:	d510      	bpl.n	8003e7e <_svfiprintf_r+0x36>
 8003e5c:	690b      	ldr	r3, [r1, #16]
 8003e5e:	b973      	cbnz	r3, 8003e7e <_svfiprintf_r+0x36>
 8003e60:	2140      	movs	r1, #64	@ 0x40
 8003e62:	f000 f90f 	bl	8004084 <_malloc_r>
 8003e66:	6028      	str	r0, [r5, #0]
 8003e68:	6128      	str	r0, [r5, #16]
 8003e6a:	b930      	cbnz	r0, 8003e7a <_svfiprintf_r+0x32>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e74:	b01d      	add	sp, #116	@ 0x74
 8003e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7a:	2340      	movs	r3, #64	@ 0x40
 8003e7c:	616b      	str	r3, [r5, #20]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e82:	2320      	movs	r3, #32
 8003e84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8c:	2330      	movs	r3, #48	@ 0x30
 8003e8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800402c <_svfiprintf_r+0x1e4>
 8003e92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e96:	f04f 0901 	mov.w	r9, #1
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	469a      	mov	sl, r3
 8003e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea2:	b10a      	cbz	r2, 8003ea8 <_svfiprintf_r+0x60>
 8003ea4:	2a25      	cmp	r2, #37	@ 0x25
 8003ea6:	d1f9      	bne.n	8003e9c <_svfiprintf_r+0x54>
 8003ea8:	ebba 0b04 	subs.w	fp, sl, r4
 8003eac:	d00b      	beq.n	8003ec6 <_svfiprintf_r+0x7e>
 8003eae:	465b      	mov	r3, fp
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ff6b 	bl	8003d90 <__ssputs_r>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f000 80a7 	beq.w	800400e <_svfiprintf_r+0x1c6>
 8003ec0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ec2:	445a      	add	r2, fp
 8003ec4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 809f 	beq.w	800400e <_svfiprintf_r+0x1c6>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eda:	f10a 0a01 	add.w	sl, sl, #1
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	9307      	str	r3, [sp, #28]
 8003ee2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ee6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ee8:	4654      	mov	r4, sl
 8003eea:	2205      	movs	r2, #5
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	484e      	ldr	r0, [pc, #312]	@ (800402c <_svfiprintf_r+0x1e4>)
 8003ef2:	f7fc f975 	bl	80001e0 <memchr>
 8003ef6:	9a04      	ldr	r2, [sp, #16]
 8003ef8:	b9d8      	cbnz	r0, 8003f32 <_svfiprintf_r+0xea>
 8003efa:	06d0      	lsls	r0, r2, #27
 8003efc:	bf44      	itt	mi
 8003efe:	2320      	movmi	r3, #32
 8003f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f04:	0711      	lsls	r1, r2, #28
 8003f06:	bf44      	itt	mi
 8003f08:	232b      	movmi	r3, #43	@ 0x2b
 8003f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f14:	d015      	beq.n	8003f42 <_svfiprintf_r+0xfa>
 8003f16:	9a07      	ldr	r2, [sp, #28]
 8003f18:	4654      	mov	r4, sl
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f04f 0c0a 	mov.w	ip, #10
 8003f20:	4621      	mov	r1, r4
 8003f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f26:	3b30      	subs	r3, #48	@ 0x30
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d94b      	bls.n	8003fc4 <_svfiprintf_r+0x17c>
 8003f2c:	b1b0      	cbz	r0, 8003f5c <_svfiprintf_r+0x114>
 8003f2e:	9207      	str	r2, [sp, #28]
 8003f30:	e014      	b.n	8003f5c <_svfiprintf_r+0x114>
 8003f32:	eba0 0308 	sub.w	r3, r0, r8
 8003f36:	fa09 f303 	lsl.w	r3, r9, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	46a2      	mov	sl, r4
 8003f40:	e7d2      	b.n	8003ee8 <_svfiprintf_r+0xa0>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	9103      	str	r1, [sp, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bfbb      	ittet	lt
 8003f4e:	425b      	neglt	r3, r3
 8003f50:	f042 0202 	orrlt.w	r2, r2, #2
 8003f54:	9307      	strge	r3, [sp, #28]
 8003f56:	9307      	strlt	r3, [sp, #28]
 8003f58:	bfb8      	it	lt
 8003f5a:	9204      	strlt	r2, [sp, #16]
 8003f5c:	7823      	ldrb	r3, [r4, #0]
 8003f5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f60:	d10a      	bne.n	8003f78 <_svfiprintf_r+0x130>
 8003f62:	7863      	ldrb	r3, [r4, #1]
 8003f64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f66:	d132      	bne.n	8003fce <_svfiprintf_r+0x186>
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	9203      	str	r2, [sp, #12]
 8003f70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f74:	3402      	adds	r4, #2
 8003f76:	9305      	str	r3, [sp, #20]
 8003f78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800403c <_svfiprintf_r+0x1f4>
 8003f7c:	7821      	ldrb	r1, [r4, #0]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	4650      	mov	r0, sl
 8003f82:	f7fc f92d 	bl	80001e0 <memchr>
 8003f86:	b138      	cbz	r0, 8003f98 <_svfiprintf_r+0x150>
 8003f88:	9b04      	ldr	r3, [sp, #16]
 8003f8a:	eba0 000a 	sub.w	r0, r0, sl
 8003f8e:	2240      	movs	r2, #64	@ 0x40
 8003f90:	4082      	lsls	r2, r0
 8003f92:	4313      	orrs	r3, r2
 8003f94:	3401      	adds	r4, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	4824      	ldr	r0, [pc, #144]	@ (8004030 <_svfiprintf_r+0x1e8>)
 8003f9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fa2:	2206      	movs	r2, #6
 8003fa4:	f7fc f91c 	bl	80001e0 <memchr>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d036      	beq.n	800401a <_svfiprintf_r+0x1d2>
 8003fac:	4b21      	ldr	r3, [pc, #132]	@ (8004034 <_svfiprintf_r+0x1ec>)
 8003fae:	bb1b      	cbnz	r3, 8003ff8 <_svfiprintf_r+0x1b0>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	3308      	adds	r3, #8
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fbe:	4433      	add	r3, r6
 8003fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc2:	e76a      	b.n	8003e9a <_svfiprintf_r+0x52>
 8003fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc8:	460c      	mov	r4, r1
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e7a8      	b.n	8003f20 <_svfiprintf_r+0xd8>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	9305      	str	r3, [sp, #20]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f04f 0c0a 	mov.w	ip, #10
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe0:	3a30      	subs	r2, #48	@ 0x30
 8003fe2:	2a09      	cmp	r2, #9
 8003fe4:	d903      	bls.n	8003fee <_svfiprintf_r+0x1a6>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0c6      	beq.n	8003f78 <_svfiprintf_r+0x130>
 8003fea:	9105      	str	r1, [sp, #20]
 8003fec:	e7c4      	b.n	8003f78 <_svfiprintf_r+0x130>
 8003fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e7f0      	b.n	8003fda <_svfiprintf_r+0x192>
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <_svfiprintf_r+0x1f0>)
 8004000:	a904      	add	r1, sp, #16
 8004002:	4638      	mov	r0, r7
 8004004:	f3af 8000 	nop.w
 8004008:	1c42      	adds	r2, r0, #1
 800400a:	4606      	mov	r6, r0
 800400c:	d1d6      	bne.n	8003fbc <_svfiprintf_r+0x174>
 800400e:	89ab      	ldrh	r3, [r5, #12]
 8004010:	065b      	lsls	r3, r3, #25
 8004012:	f53f af2d 	bmi.w	8003e70 <_svfiprintf_r+0x28>
 8004016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004018:	e72c      	b.n	8003e74 <_svfiprintf_r+0x2c>
 800401a:	ab03      	add	r3, sp, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	462a      	mov	r2, r5
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <_svfiprintf_r+0x1f0>)
 8004022:	a904      	add	r1, sp, #16
 8004024:	4638      	mov	r0, r7
 8004026:	f000 f91b 	bl	8004260 <_printf_i>
 800402a:	e7ed      	b.n	8004008 <_svfiprintf_r+0x1c0>
 800402c:	08004680 	.word	0x08004680
 8004030:	0800468a 	.word	0x0800468a
 8004034:	00000000 	.word	0x00000000
 8004038:	08003d91 	.word	0x08003d91
 800403c:	08004686 	.word	0x08004686

08004040 <sbrk_aligned>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	4e0f      	ldr	r6, [pc, #60]	@ (8004080 <sbrk_aligned+0x40>)
 8004044:	460c      	mov	r4, r1
 8004046:	6831      	ldr	r1, [r6, #0]
 8004048:	4605      	mov	r5, r0
 800404a:	b911      	cbnz	r1, 8004052 <sbrk_aligned+0x12>
 800404c:	f000 fa7c 	bl	8004548 <_sbrk_r>
 8004050:	6030      	str	r0, [r6, #0]
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 fa77 	bl	8004548 <_sbrk_r>
 800405a:	1c43      	adds	r3, r0, #1
 800405c:	d103      	bne.n	8004066 <sbrk_aligned+0x26>
 800405e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004062:	4620      	mov	r0, r4
 8004064:	bd70      	pop	{r4, r5, r6, pc}
 8004066:	1cc4      	adds	r4, r0, #3
 8004068:	f024 0403 	bic.w	r4, r4, #3
 800406c:	42a0      	cmp	r0, r4
 800406e:	d0f8      	beq.n	8004062 <sbrk_aligned+0x22>
 8004070:	1a21      	subs	r1, r4, r0
 8004072:	4628      	mov	r0, r5
 8004074:	f000 fa68 	bl	8004548 <_sbrk_r>
 8004078:	3001      	adds	r0, #1
 800407a:	d1f2      	bne.n	8004062 <sbrk_aligned+0x22>
 800407c:	e7ef      	b.n	800405e <sbrk_aligned+0x1e>
 800407e:	bf00      	nop
 8004080:	200002b0 	.word	0x200002b0

08004084 <_malloc_r>:
 8004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004088:	1ccd      	adds	r5, r1, #3
 800408a:	f025 0503 	bic.w	r5, r5, #3
 800408e:	3508      	adds	r5, #8
 8004090:	2d0c      	cmp	r5, #12
 8004092:	bf38      	it	cc
 8004094:	250c      	movcc	r5, #12
 8004096:	2d00      	cmp	r5, #0
 8004098:	4606      	mov	r6, r0
 800409a:	db01      	blt.n	80040a0 <_malloc_r+0x1c>
 800409c:	42a9      	cmp	r1, r5
 800409e:	d904      	bls.n	80040aa <_malloc_r+0x26>
 80040a0:	230c      	movs	r3, #12
 80040a2:	6033      	str	r3, [r6, #0]
 80040a4:	2000      	movs	r0, #0
 80040a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004180 <_malloc_r+0xfc>
 80040ae:	f000 f9f7 	bl	80044a0 <__malloc_lock>
 80040b2:	f8d8 3000 	ldr.w	r3, [r8]
 80040b6:	461c      	mov	r4, r3
 80040b8:	bb44      	cbnz	r4, 800410c <_malloc_r+0x88>
 80040ba:	4629      	mov	r1, r5
 80040bc:	4630      	mov	r0, r6
 80040be:	f7ff ffbf 	bl	8004040 <sbrk_aligned>
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	4604      	mov	r4, r0
 80040c6:	d158      	bne.n	800417a <_malloc_r+0xf6>
 80040c8:	f8d8 4000 	ldr.w	r4, [r8]
 80040cc:	4627      	mov	r7, r4
 80040ce:	2f00      	cmp	r7, #0
 80040d0:	d143      	bne.n	800415a <_malloc_r+0xd6>
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	d04b      	beq.n	800416e <_malloc_r+0xea>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	4639      	mov	r1, r7
 80040da:	4630      	mov	r0, r6
 80040dc:	eb04 0903 	add.w	r9, r4, r3
 80040e0:	f000 fa32 	bl	8004548 <_sbrk_r>
 80040e4:	4581      	cmp	r9, r0
 80040e6:	d142      	bne.n	800416e <_malloc_r+0xea>
 80040e8:	6821      	ldr	r1, [r4, #0]
 80040ea:	1a6d      	subs	r5, r5, r1
 80040ec:	4629      	mov	r1, r5
 80040ee:	4630      	mov	r0, r6
 80040f0:	f7ff ffa6 	bl	8004040 <sbrk_aligned>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d03a      	beq.n	800416e <_malloc_r+0xea>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	442b      	add	r3, r5
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	bb62      	cbnz	r2, 8004160 <_malloc_r+0xdc>
 8004106:	f8c8 7000 	str.w	r7, [r8]
 800410a:	e00f      	b.n	800412c <_malloc_r+0xa8>
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	1b52      	subs	r2, r2, r5
 8004110:	d420      	bmi.n	8004154 <_malloc_r+0xd0>
 8004112:	2a0b      	cmp	r2, #11
 8004114:	d917      	bls.n	8004146 <_malloc_r+0xc2>
 8004116:	1961      	adds	r1, r4, r5
 8004118:	42a3      	cmp	r3, r4
 800411a:	6025      	str	r5, [r4, #0]
 800411c:	bf18      	it	ne
 800411e:	6059      	strne	r1, [r3, #4]
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	bf08      	it	eq
 8004124:	f8c8 1000 	streq.w	r1, [r8]
 8004128:	5162      	str	r2, [r4, r5]
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	4630      	mov	r0, r6
 800412e:	f000 f9bd 	bl	80044ac <__malloc_unlock>
 8004132:	f104 000b 	add.w	r0, r4, #11
 8004136:	1d23      	adds	r3, r4, #4
 8004138:	f020 0007 	bic.w	r0, r0, #7
 800413c:	1ac2      	subs	r2, r0, r3
 800413e:	bf1c      	itt	ne
 8004140:	1a1b      	subne	r3, r3, r0
 8004142:	50a3      	strne	r3, [r4, r2]
 8004144:	e7af      	b.n	80040a6 <_malloc_r+0x22>
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	42a3      	cmp	r3, r4
 800414a:	bf0c      	ite	eq
 800414c:	f8c8 2000 	streq.w	r2, [r8]
 8004150:	605a      	strne	r2, [r3, #4]
 8004152:	e7eb      	b.n	800412c <_malloc_r+0xa8>
 8004154:	4623      	mov	r3, r4
 8004156:	6864      	ldr	r4, [r4, #4]
 8004158:	e7ae      	b.n	80040b8 <_malloc_r+0x34>
 800415a:	463c      	mov	r4, r7
 800415c:	687f      	ldr	r7, [r7, #4]
 800415e:	e7b6      	b.n	80040ce <_malloc_r+0x4a>
 8004160:	461a      	mov	r2, r3
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	42a3      	cmp	r3, r4
 8004166:	d1fb      	bne.n	8004160 <_malloc_r+0xdc>
 8004168:	2300      	movs	r3, #0
 800416a:	6053      	str	r3, [r2, #4]
 800416c:	e7de      	b.n	800412c <_malloc_r+0xa8>
 800416e:	230c      	movs	r3, #12
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	4630      	mov	r0, r6
 8004174:	f000 f99a 	bl	80044ac <__malloc_unlock>
 8004178:	e794      	b.n	80040a4 <_malloc_r+0x20>
 800417a:	6005      	str	r5, [r0, #0]
 800417c:	e7d6      	b.n	800412c <_malloc_r+0xa8>
 800417e:	bf00      	nop
 8004180:	200002b4 	.word	0x200002b4

08004184 <_printf_common>:
 8004184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004188:	4616      	mov	r6, r2
 800418a:	4698      	mov	r8, r3
 800418c:	688a      	ldr	r2, [r1, #8]
 800418e:	690b      	ldr	r3, [r1, #16]
 8004190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004194:	4293      	cmp	r3, r2
 8004196:	bfb8      	it	lt
 8004198:	4613      	movlt	r3, r2
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041a0:	4607      	mov	r7, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	b10a      	cbz	r2, 80041aa <_printf_common+0x26>
 80041a6:	3301      	adds	r3, #1
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	0699      	lsls	r1, r3, #26
 80041ae:	bf42      	ittt	mi
 80041b0:	6833      	ldrmi	r3, [r6, #0]
 80041b2:	3302      	addmi	r3, #2
 80041b4:	6033      	strmi	r3, [r6, #0]
 80041b6:	6825      	ldr	r5, [r4, #0]
 80041b8:	f015 0506 	ands.w	r5, r5, #6
 80041bc:	d106      	bne.n	80041cc <_printf_common+0x48>
 80041be:	f104 0a19 	add.w	sl, r4, #25
 80041c2:	68e3      	ldr	r3, [r4, #12]
 80041c4:	6832      	ldr	r2, [r6, #0]
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	42ab      	cmp	r3, r5
 80041ca:	dc26      	bgt.n	800421a <_printf_common+0x96>
 80041cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	3b00      	subs	r3, #0
 80041d4:	bf18      	it	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	0692      	lsls	r2, r2, #26
 80041da:	d42b      	bmi.n	8004234 <_printf_common+0xb0>
 80041dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041e0:	4641      	mov	r1, r8
 80041e2:	4638      	mov	r0, r7
 80041e4:	47c8      	blx	r9
 80041e6:	3001      	adds	r0, #1
 80041e8:	d01e      	beq.n	8004228 <_printf_common+0xa4>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	6922      	ldr	r2, [r4, #16]
 80041ee:	f003 0306 	and.w	r3, r3, #6
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	bf02      	ittt	eq
 80041f6:	68e5      	ldreq	r5, [r4, #12]
 80041f8:	6833      	ldreq	r3, [r6, #0]
 80041fa:	1aed      	subeq	r5, r5, r3
 80041fc:	68a3      	ldr	r3, [r4, #8]
 80041fe:	bf0c      	ite	eq
 8004200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004204:	2500      	movne	r5, #0
 8004206:	4293      	cmp	r3, r2
 8004208:	bfc4      	itt	gt
 800420a:	1a9b      	subgt	r3, r3, r2
 800420c:	18ed      	addgt	r5, r5, r3
 800420e:	2600      	movs	r6, #0
 8004210:	341a      	adds	r4, #26
 8004212:	42b5      	cmp	r5, r6
 8004214:	d11a      	bne.n	800424c <_printf_common+0xc8>
 8004216:	2000      	movs	r0, #0
 8004218:	e008      	b.n	800422c <_printf_common+0xa8>
 800421a:	2301      	movs	r3, #1
 800421c:	4652      	mov	r2, sl
 800421e:	4641      	mov	r1, r8
 8004220:	4638      	mov	r0, r7
 8004222:	47c8      	blx	r9
 8004224:	3001      	adds	r0, #1
 8004226:	d103      	bne.n	8004230 <_printf_common+0xac>
 8004228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004230:	3501      	adds	r5, #1
 8004232:	e7c6      	b.n	80041c2 <_printf_common+0x3e>
 8004234:	18e1      	adds	r1, r4, r3
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	2030      	movs	r0, #48	@ 0x30
 800423a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800423e:	4422      	add	r2, r4
 8004240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004248:	3302      	adds	r3, #2
 800424a:	e7c7      	b.n	80041dc <_printf_common+0x58>
 800424c:	2301      	movs	r3, #1
 800424e:	4622      	mov	r2, r4
 8004250:	4641      	mov	r1, r8
 8004252:	4638      	mov	r0, r7
 8004254:	47c8      	blx	r9
 8004256:	3001      	adds	r0, #1
 8004258:	d0e6      	beq.n	8004228 <_printf_common+0xa4>
 800425a:	3601      	adds	r6, #1
 800425c:	e7d9      	b.n	8004212 <_printf_common+0x8e>
	...

08004260 <_printf_i>:
 8004260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	7e0f      	ldrb	r7, [r1, #24]
 8004266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004268:	2f78      	cmp	r7, #120	@ 0x78
 800426a:	4691      	mov	r9, r2
 800426c:	4680      	mov	r8, r0
 800426e:	460c      	mov	r4, r1
 8004270:	469a      	mov	sl, r3
 8004272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004276:	d807      	bhi.n	8004288 <_printf_i+0x28>
 8004278:	2f62      	cmp	r7, #98	@ 0x62
 800427a:	d80a      	bhi.n	8004292 <_printf_i+0x32>
 800427c:	2f00      	cmp	r7, #0
 800427e:	f000 80d2 	beq.w	8004426 <_printf_i+0x1c6>
 8004282:	2f58      	cmp	r7, #88	@ 0x58
 8004284:	f000 80b9 	beq.w	80043fa <_printf_i+0x19a>
 8004288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800428c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004290:	e03a      	b.n	8004308 <_printf_i+0xa8>
 8004292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004296:	2b15      	cmp	r3, #21
 8004298:	d8f6      	bhi.n	8004288 <_printf_i+0x28>
 800429a:	a101      	add	r1, pc, #4	@ (adr r1, 80042a0 <_printf_i+0x40>)
 800429c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a0:	080042f9 	.word	0x080042f9
 80042a4:	0800430d 	.word	0x0800430d
 80042a8:	08004289 	.word	0x08004289
 80042ac:	08004289 	.word	0x08004289
 80042b0:	08004289 	.word	0x08004289
 80042b4:	08004289 	.word	0x08004289
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	08004289 	.word	0x08004289
 80042c0:	08004289 	.word	0x08004289
 80042c4:	08004289 	.word	0x08004289
 80042c8:	08004289 	.word	0x08004289
 80042cc:	0800440d 	.word	0x0800440d
 80042d0:	08004337 	.word	0x08004337
 80042d4:	080043c7 	.word	0x080043c7
 80042d8:	08004289 	.word	0x08004289
 80042dc:	08004289 	.word	0x08004289
 80042e0:	0800442f 	.word	0x0800442f
 80042e4:	08004289 	.word	0x08004289
 80042e8:	08004337 	.word	0x08004337
 80042ec:	08004289 	.word	0x08004289
 80042f0:	08004289 	.word	0x08004289
 80042f4:	080043cf 	.word	0x080043cf
 80042f8:	6833      	ldr	r3, [r6, #0]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6032      	str	r2, [r6, #0]
 8004300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004308:	2301      	movs	r3, #1
 800430a:	e09d      	b.n	8004448 <_printf_i+0x1e8>
 800430c:	6833      	ldr	r3, [r6, #0]
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	1d19      	adds	r1, r3, #4
 8004312:	6031      	str	r1, [r6, #0]
 8004314:	0606      	lsls	r6, r0, #24
 8004316:	d501      	bpl.n	800431c <_printf_i+0xbc>
 8004318:	681d      	ldr	r5, [r3, #0]
 800431a:	e003      	b.n	8004324 <_printf_i+0xc4>
 800431c:	0645      	lsls	r5, r0, #25
 800431e:	d5fb      	bpl.n	8004318 <_printf_i+0xb8>
 8004320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004324:	2d00      	cmp	r5, #0
 8004326:	da03      	bge.n	8004330 <_printf_i+0xd0>
 8004328:	232d      	movs	r3, #45	@ 0x2d
 800432a:	426d      	negs	r5, r5
 800432c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004330:	4859      	ldr	r0, [pc, #356]	@ (8004498 <_printf_i+0x238>)
 8004332:	230a      	movs	r3, #10
 8004334:	e011      	b.n	800435a <_printf_i+0xfa>
 8004336:	6821      	ldr	r1, [r4, #0]
 8004338:	6833      	ldr	r3, [r6, #0]
 800433a:	0608      	lsls	r0, r1, #24
 800433c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004340:	d402      	bmi.n	8004348 <_printf_i+0xe8>
 8004342:	0649      	lsls	r1, r1, #25
 8004344:	bf48      	it	mi
 8004346:	b2ad      	uxthmi	r5, r5
 8004348:	2f6f      	cmp	r7, #111	@ 0x6f
 800434a:	4853      	ldr	r0, [pc, #332]	@ (8004498 <_printf_i+0x238>)
 800434c:	6033      	str	r3, [r6, #0]
 800434e:	bf14      	ite	ne
 8004350:	230a      	movne	r3, #10
 8004352:	2308      	moveq	r3, #8
 8004354:	2100      	movs	r1, #0
 8004356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800435a:	6866      	ldr	r6, [r4, #4]
 800435c:	60a6      	str	r6, [r4, #8]
 800435e:	2e00      	cmp	r6, #0
 8004360:	bfa2      	ittt	ge
 8004362:	6821      	ldrge	r1, [r4, #0]
 8004364:	f021 0104 	bicge.w	r1, r1, #4
 8004368:	6021      	strge	r1, [r4, #0]
 800436a:	b90d      	cbnz	r5, 8004370 <_printf_i+0x110>
 800436c:	2e00      	cmp	r6, #0
 800436e:	d04b      	beq.n	8004408 <_printf_i+0x1a8>
 8004370:	4616      	mov	r6, r2
 8004372:	fbb5 f1f3 	udiv	r1, r5, r3
 8004376:	fb03 5711 	mls	r7, r3, r1, r5
 800437a:	5dc7      	ldrb	r7, [r0, r7]
 800437c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004380:	462f      	mov	r7, r5
 8004382:	42bb      	cmp	r3, r7
 8004384:	460d      	mov	r5, r1
 8004386:	d9f4      	bls.n	8004372 <_printf_i+0x112>
 8004388:	2b08      	cmp	r3, #8
 800438a:	d10b      	bne.n	80043a4 <_printf_i+0x144>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	07df      	lsls	r7, r3, #31
 8004390:	d508      	bpl.n	80043a4 <_printf_i+0x144>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	6861      	ldr	r1, [r4, #4]
 8004396:	4299      	cmp	r1, r3
 8004398:	bfde      	ittt	le
 800439a:	2330      	movle	r3, #48	@ 0x30
 800439c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80043a4:	1b92      	subs	r2, r2, r6
 80043a6:	6122      	str	r2, [r4, #16]
 80043a8:	f8cd a000 	str.w	sl, [sp]
 80043ac:	464b      	mov	r3, r9
 80043ae:	aa03      	add	r2, sp, #12
 80043b0:	4621      	mov	r1, r4
 80043b2:	4640      	mov	r0, r8
 80043b4:	f7ff fee6 	bl	8004184 <_printf_common>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d14a      	bne.n	8004452 <_printf_i+0x1f2>
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043c0:	b004      	add	sp, #16
 80043c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f043 0320 	orr.w	r3, r3, #32
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	4833      	ldr	r0, [pc, #204]	@ (800449c <_printf_i+0x23c>)
 80043d0:	2778      	movs	r7, #120	@ 0x78
 80043d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	6831      	ldr	r1, [r6, #0]
 80043da:	061f      	lsls	r7, r3, #24
 80043dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80043e0:	d402      	bmi.n	80043e8 <_printf_i+0x188>
 80043e2:	065f      	lsls	r7, r3, #25
 80043e4:	bf48      	it	mi
 80043e6:	b2ad      	uxthmi	r5, r5
 80043e8:	6031      	str	r1, [r6, #0]
 80043ea:	07d9      	lsls	r1, r3, #31
 80043ec:	bf44      	itt	mi
 80043ee:	f043 0320 	orrmi.w	r3, r3, #32
 80043f2:	6023      	strmi	r3, [r4, #0]
 80043f4:	b11d      	cbz	r5, 80043fe <_printf_i+0x19e>
 80043f6:	2310      	movs	r3, #16
 80043f8:	e7ac      	b.n	8004354 <_printf_i+0xf4>
 80043fa:	4827      	ldr	r0, [pc, #156]	@ (8004498 <_printf_i+0x238>)
 80043fc:	e7e9      	b.n	80043d2 <_printf_i+0x172>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f023 0320 	bic.w	r3, r3, #32
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	e7f6      	b.n	80043f6 <_printf_i+0x196>
 8004408:	4616      	mov	r6, r2
 800440a:	e7bd      	b.n	8004388 <_printf_i+0x128>
 800440c:	6833      	ldr	r3, [r6, #0]
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	6961      	ldr	r1, [r4, #20]
 8004412:	1d18      	adds	r0, r3, #4
 8004414:	6030      	str	r0, [r6, #0]
 8004416:	062e      	lsls	r6, r5, #24
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	d501      	bpl.n	8004420 <_printf_i+0x1c0>
 800441c:	6019      	str	r1, [r3, #0]
 800441e:	e002      	b.n	8004426 <_printf_i+0x1c6>
 8004420:	0668      	lsls	r0, r5, #25
 8004422:	d5fb      	bpl.n	800441c <_printf_i+0x1bc>
 8004424:	8019      	strh	r1, [r3, #0]
 8004426:	2300      	movs	r3, #0
 8004428:	6123      	str	r3, [r4, #16]
 800442a:	4616      	mov	r6, r2
 800442c:	e7bc      	b.n	80043a8 <_printf_i+0x148>
 800442e:	6833      	ldr	r3, [r6, #0]
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	6032      	str	r2, [r6, #0]
 8004434:	681e      	ldr	r6, [r3, #0]
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	2100      	movs	r1, #0
 800443a:	4630      	mov	r0, r6
 800443c:	f7fb fed0 	bl	80001e0 <memchr>
 8004440:	b108      	cbz	r0, 8004446 <_printf_i+0x1e6>
 8004442:	1b80      	subs	r0, r0, r6
 8004444:	6060      	str	r0, [r4, #4]
 8004446:	6863      	ldr	r3, [r4, #4]
 8004448:	6123      	str	r3, [r4, #16]
 800444a:	2300      	movs	r3, #0
 800444c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004450:	e7aa      	b.n	80043a8 <_printf_i+0x148>
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	4632      	mov	r2, r6
 8004456:	4649      	mov	r1, r9
 8004458:	4640      	mov	r0, r8
 800445a:	47d0      	blx	sl
 800445c:	3001      	adds	r0, #1
 800445e:	d0ad      	beq.n	80043bc <_printf_i+0x15c>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	079b      	lsls	r3, r3, #30
 8004464:	d413      	bmi.n	800448e <_printf_i+0x22e>
 8004466:	68e0      	ldr	r0, [r4, #12]
 8004468:	9b03      	ldr	r3, [sp, #12]
 800446a:	4298      	cmp	r0, r3
 800446c:	bfb8      	it	lt
 800446e:	4618      	movlt	r0, r3
 8004470:	e7a6      	b.n	80043c0 <_printf_i+0x160>
 8004472:	2301      	movs	r3, #1
 8004474:	4632      	mov	r2, r6
 8004476:	4649      	mov	r1, r9
 8004478:	4640      	mov	r0, r8
 800447a:	47d0      	blx	sl
 800447c:	3001      	adds	r0, #1
 800447e:	d09d      	beq.n	80043bc <_printf_i+0x15c>
 8004480:	3501      	adds	r5, #1
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	9903      	ldr	r1, [sp, #12]
 8004486:	1a5b      	subs	r3, r3, r1
 8004488:	42ab      	cmp	r3, r5
 800448a:	dcf2      	bgt.n	8004472 <_printf_i+0x212>
 800448c:	e7eb      	b.n	8004466 <_printf_i+0x206>
 800448e:	2500      	movs	r5, #0
 8004490:	f104 0619 	add.w	r6, r4, #25
 8004494:	e7f5      	b.n	8004482 <_printf_i+0x222>
 8004496:	bf00      	nop
 8004498:	08004691 	.word	0x08004691
 800449c:	080046a2 	.word	0x080046a2

080044a0 <__malloc_lock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <__malloc_lock+0x8>)
 80044a2:	f7ff bc73 	b.w	8003d8c <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	200002ac 	.word	0x200002ac

080044ac <__malloc_unlock>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__malloc_unlock+0x8>)
 80044ae:	f7ff bc6e 	b.w	8003d8e <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	200002ac 	.word	0x200002ac

080044b8 <_realloc_r>:
 80044b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044bc:	4680      	mov	r8, r0
 80044be:	4615      	mov	r5, r2
 80044c0:	460c      	mov	r4, r1
 80044c2:	b921      	cbnz	r1, 80044ce <_realloc_r+0x16>
 80044c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c8:	4611      	mov	r1, r2
 80044ca:	f7ff bddb 	b.w	8004084 <_malloc_r>
 80044ce:	b92a      	cbnz	r2, 80044dc <_realloc_r+0x24>
 80044d0:	f000 f858 	bl	8004584 <_free_r>
 80044d4:	2400      	movs	r4, #0
 80044d6:	4620      	mov	r0, r4
 80044d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044dc:	f000 f89c 	bl	8004618 <_malloc_usable_size_r>
 80044e0:	4285      	cmp	r5, r0
 80044e2:	4606      	mov	r6, r0
 80044e4:	d802      	bhi.n	80044ec <_realloc_r+0x34>
 80044e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044ea:	d8f4      	bhi.n	80044d6 <_realloc_r+0x1e>
 80044ec:	4629      	mov	r1, r5
 80044ee:	4640      	mov	r0, r8
 80044f0:	f7ff fdc8 	bl	8004084 <_malloc_r>
 80044f4:	4607      	mov	r7, r0
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d0ec      	beq.n	80044d4 <_realloc_r+0x1c>
 80044fa:	42b5      	cmp	r5, r6
 80044fc:	462a      	mov	r2, r5
 80044fe:	4621      	mov	r1, r4
 8004500:	bf28      	it	cs
 8004502:	4632      	movcs	r2, r6
 8004504:	f000 f830 	bl	8004568 <memcpy>
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f000 f83a 	bl	8004584 <_free_r>
 8004510:	463c      	mov	r4, r7
 8004512:	e7e0      	b.n	80044d6 <_realloc_r+0x1e>

08004514 <memmove>:
 8004514:	4288      	cmp	r0, r1
 8004516:	b510      	push	{r4, lr}
 8004518:	eb01 0402 	add.w	r4, r1, r2
 800451c:	d902      	bls.n	8004524 <memmove+0x10>
 800451e:	4284      	cmp	r4, r0
 8004520:	4623      	mov	r3, r4
 8004522:	d807      	bhi.n	8004534 <memmove+0x20>
 8004524:	1e43      	subs	r3, r0, #1
 8004526:	42a1      	cmp	r1, r4
 8004528:	d008      	beq.n	800453c <memmove+0x28>
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004532:	e7f8      	b.n	8004526 <memmove+0x12>
 8004534:	4402      	add	r2, r0
 8004536:	4601      	mov	r1, r0
 8004538:	428a      	cmp	r2, r1
 800453a:	d100      	bne.n	800453e <memmove+0x2a>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004546:	e7f7      	b.n	8004538 <memmove+0x24>

08004548 <_sbrk_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d06      	ldr	r5, [pc, #24]	@ (8004564 <_sbrk_r+0x1c>)
 800454c:	2300      	movs	r3, #0
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc fb68 	bl	8000c28 <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_sbrk_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_sbrk_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	200002b8 	.word	0x200002b8

08004568 <memcpy>:
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004570:	d100      	bne.n	8004574 <memcpy+0xc>
 8004572:	4770      	bx	lr
 8004574:	b510      	push	{r4, lr}
 8004576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457e:	4291      	cmp	r1, r2
 8004580:	d1f9      	bne.n	8004576 <memcpy+0xe>
 8004582:	bd10      	pop	{r4, pc}

08004584 <_free_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4605      	mov	r5, r0
 8004588:	2900      	cmp	r1, #0
 800458a:	d041      	beq.n	8004610 <_free_r+0x8c>
 800458c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004590:	1f0c      	subs	r4, r1, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfb8      	it	lt
 8004596:	18e4      	addlt	r4, r4, r3
 8004598:	f7ff ff82 	bl	80044a0 <__malloc_lock>
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <_free_r+0x90>)
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	b933      	cbnz	r3, 80045b0 <_free_r+0x2c>
 80045a2:	6063      	str	r3, [r4, #4]
 80045a4:	6014      	str	r4, [r2, #0]
 80045a6:	4628      	mov	r0, r5
 80045a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ac:	f7ff bf7e 	b.w	80044ac <__malloc_unlock>
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	d908      	bls.n	80045c6 <_free_r+0x42>
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	1821      	adds	r1, r4, r0
 80045b8:	428b      	cmp	r3, r1
 80045ba:	bf01      	itttt	eq
 80045bc:	6819      	ldreq	r1, [r3, #0]
 80045be:	685b      	ldreq	r3, [r3, #4]
 80045c0:	1809      	addeq	r1, r1, r0
 80045c2:	6021      	streq	r1, [r4, #0]
 80045c4:	e7ed      	b.n	80045a2 <_free_r+0x1e>
 80045c6:	461a      	mov	r2, r3
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b10b      	cbz	r3, 80045d0 <_free_r+0x4c>
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d9fa      	bls.n	80045c6 <_free_r+0x42>
 80045d0:	6811      	ldr	r1, [r2, #0]
 80045d2:	1850      	adds	r0, r2, r1
 80045d4:	42a0      	cmp	r0, r4
 80045d6:	d10b      	bne.n	80045f0 <_free_r+0x6c>
 80045d8:	6820      	ldr	r0, [r4, #0]
 80045da:	4401      	add	r1, r0
 80045dc:	1850      	adds	r0, r2, r1
 80045de:	4283      	cmp	r3, r0
 80045e0:	6011      	str	r1, [r2, #0]
 80045e2:	d1e0      	bne.n	80045a6 <_free_r+0x22>
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	6053      	str	r3, [r2, #4]
 80045ea:	4408      	add	r0, r1
 80045ec:	6010      	str	r0, [r2, #0]
 80045ee:	e7da      	b.n	80045a6 <_free_r+0x22>
 80045f0:	d902      	bls.n	80045f8 <_free_r+0x74>
 80045f2:	230c      	movs	r3, #12
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	e7d6      	b.n	80045a6 <_free_r+0x22>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	1821      	adds	r1, r4, r0
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf04      	itt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	bf04      	itt	eq
 8004608:	1809      	addeq	r1, r1, r0
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	6054      	str	r4, [r2, #4]
 800460e:	e7ca      	b.n	80045a6 <_free_r+0x22>
 8004610:	bd38      	pop	{r3, r4, r5, pc}
 8004612:	bf00      	nop
 8004614:	200002b4 	.word	0x200002b4

08004618 <_malloc_usable_size_r>:
 8004618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461c:	1f18      	subs	r0, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfbc      	itt	lt
 8004622:	580b      	ldrlt	r3, [r1, r0]
 8004624:	18c0      	addlt	r0, r0, r3
 8004626:	4770      	bx	lr

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
